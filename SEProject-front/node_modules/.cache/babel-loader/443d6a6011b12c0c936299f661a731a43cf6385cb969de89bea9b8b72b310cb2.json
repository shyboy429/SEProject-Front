{"ast":null,"code":"import * as echarts from 'echarts';\nexport default {\n  name: 'PieChart',\n  data() {\n    return {\n      chart: null,\n      paperData: [{\n        id: 1,\n        type: '选择题'\n      }, {\n        id: 2,\n        type: '填空题'\n      }, {\n        id: 3,\n        type: '选择题'\n      }, {\n        id: 4,\n        type: '问答题'\n      }, {\n        id: 5,\n        type: '选择题'\n      }, {\n        id: 6,\n        type: '填空题'\n      }\n      // 更多数据\n      ]\n    };\n  },\n  mounted() {\n    this.initChart();\n  },\n  methods: {\n    initChart() {\n      this.chart = echarts.init(document.getElementById('myChart'));\n\n      // 计算每种类型的数量\n      const typeCounts = this.paperData.reduce((acc, item) => {\n        acc[item.type] = (acc[item.type] || 0) + 1;\n        return acc;\n      }, {});\n\n      // 将计算结果转换为 ECharts 数据格式\n      const data = Object.keys(typeCounts).map(type => {\n        return {\n          value: typeCounts[type],\n          name: type\n        };\n      });\n      const option = {\n        title: {\n          text: '题目类型占比图:',\n          left: 'left'\n        },\n        tooltip: {\n          trigger: 'item',\n          formatter: '{a} <br/>{b} : {c} ({d}%)'\n        },\n        legend: {\n          type: 'scroll',\n          orient: 'vertical',\n          right: 0,\n          top: 'center',\n          icon: 'circle',\n          selectedMode: 'multiple',\n          formatter: name => {\n            let total = data.reduce((sum, item) => sum + item.value, 0);\n            let item = data.find(item => item.name === name);\n            let p = (item.value / total * 100).toFixed(2);\n            return `${name}  |  ${p}%`;\n          }\n        },\n        series: [{\n          name: '题目类型占比',\n          type: 'pie',\n          radius: '60%',\n          center: ['25%', '55%'],\n          selectedMode: 'single',\n          data: data,\n          label: {\n            show: true,\n            formatter: '{b}: {c} ({d}%)'\n          },\n          itemStyle: {\n            emphasis: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\n            }\n          }\n        }]\n      };\n      this.chart.setOption(option);\n      window.addEventListener('resize', () => {\n        this.chart.resize();\n      });\n    }\n  },\n  beforeDestroy() {\n    if (this.chart) {\n      window.removeEventListener('resize', this.chart.resize);\n      this.chart.dispose();\n    }\n  }\n};","map":{"version":3,"names":["echarts","name","data","chart","paperData","id","type","mounted","initChart","methods","init","document","getElementById","typeCounts","reduce","acc","item","Object","keys","map","value","option","title","text","left","tooltip","trigger","formatter","legend","orient","right","top","icon","selectedMode","total","sum","find","p","toFixed","series","radius","center","label","show","itemStyle","emphasis","shadowBlur","shadowOffsetX","shadowColor","setOption","window","addEventListener","resize","beforeDestroy","removeEventListener","dispose"],"sources":["C:\\Users\\86139\\Desktop\\demo_vue\\src\\components\\Test.vue"],"sourcesContent":["<template>\r\n  <div id=\"myChart\" style=\"width: 600px; height: 400px;\"></div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\n\r\nexport default {\r\n  name: 'PieChart',\r\n  data() {\r\n    return {\r\n      chart: null,\r\n      paperData: [\r\n        { id: 1, type: '选择题' },\r\n        { id: 2, type: '填空题' },\r\n        { id: 3, type: '选择题' },\r\n        { id: 4, type: '问答题' },\r\n        { id: 5, type: '选择题' },\r\n        { id: 6, type: '填空题' },\r\n        // 更多数据\r\n      ],\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initChart();\r\n  },\r\n  methods: {\r\n    initChart() {\r\n      this.chart = echarts.init(document.getElementById('myChart'));\r\n\r\n      // 计算每种类型的数量\r\n      const typeCounts = this.paperData.reduce((acc, item) => {\r\n        acc[item.type] = (acc[item.type] || 0) + 1;\r\n        return acc;\r\n      }, {});\r\n\r\n      // 将计算结果转换为 ECharts 数据格式\r\n      const data = Object.keys(typeCounts).map(type => {\r\n        return { value: typeCounts[type], name: type };\r\n      });\r\n\r\n      const option = {\r\n        title: {\r\n          text: '题目类型占比图:',\r\n          left: 'left'\r\n        },\r\n        tooltip: {\r\n          trigger: 'item',\r\n          formatter: '{a} <br/>{b} : {c} ({d}%)'\r\n        },\r\n        legend: {\r\n          type: 'scroll',\r\n          orient: 'vertical',\r\n          right: 0,\r\n          top: 'center',\r\n          icon: 'circle',\r\n          selectedMode: 'multiple',\r\n          formatter: (name) => {\r\n            let total = data.reduce((sum, item) => sum + item.value, 0);\r\n            let item = data.find(item => item.name === name);\r\n            let p = (item.value / total * 100).toFixed(2);\r\n            return `${name}  |  ${p}%`;\r\n          }\r\n        },\r\n        series: [\r\n          {\r\n            name: '题目类型占比',\r\n            type: 'pie',\r\n            radius: '60%',\r\n            center: ['25%', '55%'],\r\n            selectedMode: 'single',\r\n            data: data,\r\n            label: {\r\n              show: true,\r\n              formatter: '{b}: {c} ({d}%)'\r\n            },\r\n            itemStyle: {\r\n              emphasis: {\r\n                shadowBlur: 10,\r\n                shadowOffsetX: 0,\r\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      };\r\n\r\n      this.chart.setOption(option);\r\n\r\n      window.addEventListener('resize', () => {\r\n        this.chart.resize();\r\n      });\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    if (this.chart) {\r\n      window.removeEventListener('resize', this.chart.resize);\r\n      this.chart.dispose();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#myChart {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}