{"ast":null,"code":"import { mapActions, mapState } from 'vuex';\nimport { ElMessage } from 'element-plus';\nimport * as echarts from 'echarts';\nimport { ref } from 'vue';\nexport default {\n  setup() {\n    const value1 = ref([new Date(2024, 9, 10, 8, 40), new Date(2025, 9, 10, 9, 40)]);\n    const value2 = ref([new Date(2016, 9, 10, 8, 40), new Date(2016, 9, 10, 9, 40)]);\n    return {\n      value1,\n      value2\n    };\n  },\n  name: 'PaperManagement',\n  data() {\n    return {\n      buttons2: [{\n        label: '全部',\n        isActive: true,\n        method: this.getAll\n      },\n      // 默认第一个按钮为激活状态\n      {\n        label: '未开始',\n        isActive: false,\n        method: this.getUnstarted\n      }, {\n        label: '进行中',\n        isActive: false,\n        method: this.getPro\n      }, {\n        label: '已完成',\n        isActive: false,\n        method: this.getEnded\n      }],\n      dialogFormVisible: false,\n      dialogTableVisible: false,\n      chart: null,\n      dialogChartVisible: false,\n      dialogTable2Visible: false,\n      paper_id: 0,\n      formLabelWidth: '140px',\n      form: {\n        title: '',\n        introduction: '',\n        createdBy: '',\n        createTime: '',\n        updateTime: ''\n      },\n      searchKeyword: '',\n      filterQuestionType: '',\n      filterDifficulty: '',\n      currentPage: 1,\n      dict: {\n        'pageNum': 1,\n        'kind': 'all'\n      },\n      pageSize: 5\n      //   tableData: [\n      //     { \n      //       title: '这是一个假问题?',\n      //       introduction: '选择题',\n      //       createTime: '2024-06-03',\n      //       updateTime: '2024-06-03',\n      //       createdBy: \"小张\",\n      //       id: 5\n      //     }\n      //   ],\n      //   paperData: [\n      //     { \n      //       question: '这是一个假问题?',\n      //       questionType: '选择题',\n      //       tag: '物理',\n      //       difficulty: '中等',\n      //       analysis: '这是一个问题的解析',\n      //       createdBy: \"小张\",\n      //       id: 5\n      //     }\n      //   ]\n    };\n  },\n  computed: {\n    ...mapState(['exams', 'paper', 'paperQuestions', 'user', 'examsPages']),\n    totalPages() {\n      console.log(\"pages\", this.examsPages);\n      return this.examsPages;\n      console.log(\"this\", this.questionsPages);\n      return 1000;\n    },\n    tableData() {\n      return this.exams.map(exam => ({\n        name: exam.name,\n        // introduction: exam.introduction,\n        startTime: exam.startTime,\n        endTime: exam.endTime,\n        durationTime: exam.durationTime,\n        paperID: exam.paperTitle\n      }));\n    },\n    paperData() {\n      return this.paperQuestions.map(question => ({\n        question: question.description,\n        questionType: question.type,\n        tag: question.tag,\n        difficulty: question.difficultLevel,\n        analysis: question.analysis,\n        id: question.id,\n        createdBy: question.createdBy\n      }));\n    },\n    selectedData() {\n      return this.paper.map(question => ({\n        question: question.question,\n        questionType: question.questionType,\n        tag: question.tag,\n        difficulty: question.difficulty,\n        id: question.id,\n        analysis: question.analysis,\n        createdBy: question.createdBy\n      }));\n    }\n  },\n  methods: {\n    ...mapActions(['fetchExams', 'addPaper', 'addQuestionToPaper', 'removeFromPaper', 'fetchPaperQuestion', 'updatePaperQuestions', 'deletePaper', 'fetchExamPages', 'createExam']),\n    getAll() {\n      console.log(\"getall\");\n      this.dict.kind = 'all';\n      this.dict.pageNum = 1;\n      this.currentPage = 1;\n      this.fetchExams(this.dict);\n      this.fetchExamPages(this.dict['kind']);\n    },\n    getPro() {\n      this.dict.kind = 'pro';\n      this.dict.pageNum = 1;\n      this.currentPage = 1;\n      this.fetchExams(this.dict);\n      this.fetchExamPages(this.dict['kind']);\n    },\n    getUnstarted() {\n      this.dict.kind = 'unstart';\n      this.dict.pageNum = 1;\n      this.currentPage = 1;\n      this.fetchExams(this.dict);\n      this.fetchExamPages(this.dict['kind']);\n    },\n    getEnded() {\n      this.dict.kind = 'end';\n      this.dict.pageNum = 1;\n      this.currentPage = 1;\n      this.fetchExams(this.dict);\n      this.fetchExamPages(this.dict['kind']);\n    },\n    handleButtonClick(method, index) {\n      this.activateButton(this.buttons2, index);\n      method(); // 调用传递的方法\n    },\n    activateButton(buttonGroup, index) {\n      buttonGroup.forEach((button, i) => {\n        button.isActive = i === index;\n        //在这里增加发送请求\n      });\n    },\n    automaticPaper() {\n      // 自动组卷的逻辑\n    },\n    // addPaper() {\n    //   this.dialogFormVisible = true;\n    // },\n    async saveExam() {\n      //   const currentDateTime = new Date().toISOString().slice(0, 19).replace('T', ' ');\n      //   this.form.createTime = currentDateTime;\n      //   this.form.updateTime = currentDateTime;\n      console.log(this.value1);\n      // const [startTime, endTime] = this.form.value1;\n      const startTime = this.value1[0];\n      const endTime = this.value1[1];\n      console.log('Start Time:', startTime);\n      console.log('End Time:', endTime);\n\n      // 创建 newExam 对象\n      const newExam = {\n        name: this.form.name,\n        introduction: this.form.introduction,\n        paperId: this.form.paperTitle,\n        publisher: this.user.username,\n        startTime: startTime,\n        // 开始时间\n        endTime: endTime,\n        // 结束时间\n        durationTime: this.form.timeLimit // 考试限时\n      };\n      const result = await this.createExam(newExam);\n      this.dialogFormVisible = false;\n      this.form = {\n        name: '',\n        introduction: '',\n        paperTitle: '',\n        createTime: '',\n        timeLimit: ''\n      };\n      this.dict['pageNum'] = this.currentPage;\n      await this.fetchExams(this.dict);\n      if (result.success == 'success') {\n        this.success('创建成功');\n      } else {\n        this.error('创建失败');\n      }\n      this.fetchExamPages(this.dict['kind']);\n    },\n    composePaper(index, row) {\n      const questionId = row.id; // 获取 question id\n      this.addQuestionToPaper(questionId);\n      console.log('组卷操作:', questionId);\n    },\n    handleCartDelete(row) {\n      const questionId = row.id; // 获取 question id\n      console.log(row.id);\n      this.removeFromPaper(questionId);\n      // this.paper = this.paper.filter(item => item.id !== row.id);\n      console.log(this.paper);\n      ElMessage({\n        message: '移除成功',\n        type: 'success',\n        customClass: 'custom-message-class',\n        duration: 3000,\n        showClose: true\n      });\n    },\n    querySelected() {\n      if (this.paper.length === 0) {\n        this.selectedData = [];\n      } else {\n        this.selectedData = this.paper.map(question => ({\n          question: question.question,\n          questionType: question.questionType,\n          tag: question.tag,\n          difficulty: question.difficulty,\n          analysis: question.analysis,\n          createdBy: question.createdBy,\n          id: question.id\n        }));\n      }\n    },\n    queryPaper(index, row) {\n      console.log('query');\n      const paperId = row.id; // 获取 question id\n      this.paper_id = row.id;\n      console.log('query');\n      this.fetchPaperQuestion(paperId);\n      console.log('查看试卷:', paperId);\n    },\n    async handlePaperDelete(index, row) {\n      const paperId = row.id; // 获取 question id\n      await this.deletePaper(paperId);\n\n      // this.paper_id = row.id;\n      ElMessage({\n        message: '删除成功',\n        type: 'success',\n        customClass: 'custom-message-class',\n        duration: 3000,\n        showClose: true\n      });\n      await this.fetchPapersPages();\n      this.fetchPapers(this.currentPage);\n    },\n    analysis(index, row) {\n      this.queryPaper(index, row);\n      this.initChart();\n    },\n    async handleDelete(row) {\n      console.log(this.paper_id);\n      const paperID = this.paper_id;\n      console.log(row);\n      await this.updatePaperQuestions({\n        'paperid': paperID,\n        'questionid': row.id\n      });\n      this.fetchPapers(this.currentPage);\n      ElMessage({\n        message: '移出成功',\n        type: 'success',\n        customClass: 'custom-message-class',\n        duration: 3000,\n        showClose: true\n      });\n    },\n    // handleDelete(index, row) {\n    //   this.tableData.splice(index, 1);\n    // },\n    // handleEdit(index, row) {\n    //   // 编辑试卷的逻辑\n    // },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage -= 1;\n      }\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage += 1;\n      }\n    },\n    success(ms) {\n      ElMessage({\n        message: ms,\n        type: 'success',\n        customClass: 'custom-message-class',\n        duration: 3000,\n        showClose: true\n      });\n    },\n    warning(ms) {\n      ElMessage({\n        message: ms,\n        type: 'warning',\n        customClass: 'custom-message-class',\n        duration: 3000,\n        showClose: true\n      });\n    },\n    error(ms) {\n      ElMessage({\n        message: ms,\n        type: 'error',\n        customClass: 'custom-message-class',\n        duration: 3000,\n        showClose: true\n      });\n    },\n    initChart() {\n      this.$nextTick(() => {\n        console.log(this.paperQuestions);\n        this.chart = echarts.init(document.getElementById('myChart'));\n\n        // 计算每种类型的数量\n        const typeCounts = this.paperQuestions.reduce((acc, item) => {\n          acc[item.type] = (acc[item.type] || 0) + 1;\n          return acc;\n        }, {});\n\n        // 将计算结果转换为 ECharts 数据格式\n        const data = Object.keys(typeCounts).map(type => {\n          return {\n            value: typeCounts[type],\n            name: type\n          };\n        });\n        const option = {\n          title: {\n            text: '题目类型占比图:',\n            left: 'left'\n          },\n          tooltip: {\n            trigger: 'item',\n            formatter: '{a} <br/>{b} : {c} ({d}%)'\n          },\n          legend: {\n            type: 'scroll',\n            orient: 'vertical',\n            right: 0,\n            top: 'center',\n            icon: 'circle',\n            selectedMode: 'multiple',\n            formatter: name => {\n              let total = data.reduce((sum, item) => sum + item.value, 0);\n              let item = data.find(item => item.name === name);\n              let p = (item.value / total * 100).toFixed(2);\n              return `${name}  |  ${p}%`;\n            }\n          },\n          series: [{\n            name: '题目类型占比',\n            type: 'pie',\n            radius: '60%',\n            center: ['45%', '55%'],\n            selectedMode: 'single',\n            data: data,\n            label: {\n              show: true,\n              formatter: '{b}: {c} ({d}%)'\n            },\n            itemStyle: {\n              emphasis: {\n                shadowBlur: 10,\n                shadowOffsetX: 0,\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\n              }\n            }\n          }]\n        };\n        this.chart.setOption(option);\n        this.chart2 = echarts.init(document.getElementById('myChart2'));\n\n        // 计算每种难度的数量\n        const difficultyCounts = this.paperQuestions.reduce((acc, item) => {\n          acc[item.difficultLevel] = (acc[item.difficultLevel] || 0) + 1;\n          return acc;\n        }, {});\n\n        // 将计算结果转换为 ECharts 数据格式\n        const data2 = Object.keys(difficultyCounts).map(difficultLevel => {\n          return {\n            value: difficultyCounts[difficultLevel],\n            name: difficultLevel\n          };\n        });\n        const option2 = {\n          title: {\n            text: '题目难度占比图:',\n            left: 'left'\n          },\n          tooltip: {\n            trigger: 'item',\n            formatter: '{a} <br/>{b} : {c} ({d}%)'\n          },\n          legend: {\n            type: 'scroll',\n            orient: 'vertical',\n            right: 0,\n            top: 'center',\n            icon: 'circle',\n            selectedMode: 'multiple',\n            formatter: name => {\n              let total = data2.reduce((sum, item) => sum + item.value, 0);\n              let item = data2.find(item => item.name === name);\n              let p = (item.value / total * 100).toFixed(2);\n              return `${name}  |  ${p}%`;\n            }\n          },\n          series: [{\n            name: '题目难度占比',\n            type: 'pie',\n            radius: '60%',\n            center: ['45%', '55%'],\n            selectedMode: 'single',\n            data: data2,\n            label: {\n              show: true,\n              formatter: '{b}: {c} ({d}%)'\n            },\n            itemStyle: {\n              emphasis: {\n                shadowBlur: 10,\n                shadowOffsetX: 0,\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\n              }\n            }\n          }]\n        };\n        this.chart2.setOption(option2);\n        window.addEventListener('resize', () => {\n          this.chart.resize();\n          this.chart2.resize();\n        });\n      });\n    },\n    handlePageChange(page) {\n      console.log('Page changed to:', page); // 日志记录当前页码\n      this.currentPage = page;\n      this.dict['pageNum'] = this.currentPage;\n      this.fetchExams(this.dict); // 触发 Vuex action 以获取新页数据\n    }\n  },\n  mounted() {\n    console.log(\"fetch exam\", this.dict);\n    this.fetchExams(this.dict);\n    this.fetchExamPages(this.dict['kind']);\n  }\n};","map":{"version":3,"names":["mapActions","mapState","ElMessage","echarts","ref","setup","value1","Date","value2","name","data","buttons2","label","isActive","method","getAll","getUnstarted","getPro","getEnded","dialogFormVisible","dialogTableVisible","chart","dialogChartVisible","dialogTable2Visible","paper_id","formLabelWidth","form","title","introduction","createdBy","createTime","updateTime","searchKeyword","filterQuestionType","filterDifficulty","currentPage","dict","pageSize","computed","totalPages","console","log","examsPages","questionsPages","tableData","exams","map","exam","startTime","endTime","durationTime","paperID","paperTitle","paperData","paperQuestions","question","description","questionType","type","tag","difficulty","difficultLevel","analysis","id","selectedData","paper","methods","kind","pageNum","fetchExams","fetchExamPages","handleButtonClick","index","activateButton","buttonGroup","forEach","button","i","automaticPaper","saveExam","newExam","paperId","publisher","user","username","timeLimit","result","createExam","success","error","composePaper","row","questionId","addQuestionToPaper","handleCartDelete","removeFromPaper","message","customClass","duration","showClose","querySelected","length","queryPaper","fetchPaperQuestion","handlePaperDelete","deletePaper","fetchPapersPages","fetchPapers","initChart","handleDelete","updatePaperQuestions","prevPage","nextPage","ms","warning","$nextTick","init","document","getElementById","typeCounts","reduce","acc","item","Object","keys","value","option","text","left","tooltip","trigger","formatter","legend","orient","right","top","icon","selectedMode","total","sum","find","p","toFixed","series","radius","center","show","itemStyle","emphasis","shadowBlur","shadowOffsetX","shadowColor","setOption","chart2","difficultyCounts","data2","option2","window","addEventListener","resize","handlePageChange","page","mounted"],"sources":["C:\\Users\\86139\\Desktop\\demo_vue\\src\\components\\ExamManagement.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div class=\"form-row\">\r\n      <div class=\"form-group\">\r\n        <label>考试管理</label>\r\n      </div>\r\n      <div class=\"form-group\" style=\"margin-left:57%\">\r\n          <el-button-group class=\"ml-4\">\r\n            <el-button\r\n              v-for=\"(button, index) in buttons2\"\r\n              :key=\"index\"\r\n              :type=\"button.isActive ? 'success' : 'default'\"\r\n               @click=\"handleButtonClick(button.method, index)\"\r\n            >\r\n              {{ button.label }}\r\n            </el-button>\r\n          </el-button-group>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <el-button type=\"primary\" :disabled=\"(user.role !== 'ADMIN')\" @click=\"dialogFormVisible = true\" style=\"width: 80px;\">创建考试</el-button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 表格数据绑定和默认宽度 -->\r\n    <el-table :data=\"tableData\" style=\"width: 100%; margin-left: 3%;\">\r\n      <!-- 每一个列，prop为主键，label为文案 -->\r\n      <!-- 索引 -->\r\n      <el-table-column type=\"index\" width=\"50\"></el-table-column>\r\n      <el-table-column prop=\"name\" label=\"考试名称\" width=\"200\" header-align=\"left\"></el-table-column>\r\n      <el-table-column prop=\"introduction\" label=\"考试介绍\" width=\"200\" header-align=\"left\"></el-table-column>\r\n      <el-table-column prop=\"startTime\" label=\"开始时间\" width=\"200\" header-align=\"left\"></el-table-column>\r\n      <el-table-column prop=\"endTime\" label=\"结束时间\" width=\"200\" header-align=\"left\"></el-table-column>\r\n      <el-table-column prop=\"durationime\" label=\"限时\" width=\"120\"></el-table-column>\r\n      <el-table-column label=\"操作\" width=\"220\" header-align=\"center\" :header-cell-style=\"{ paddingLeft: '0px' }\">\r\n        <template #default=\"scope\">\r\n          <div style=\"display: flex; justify-content: space-between;\">\r\n            <el-button size=\"small\" type=\"primary\"  @click=\"dialogTableVisible = true; queryPaper(scope.$index, scope.row)\">编辑</el-button>\r\n            <el-button size=\"small\" type=\"danger\" :disabled=\"(user.username !== scope.row.createdBy)&&(user.role!=='ADMIN')\" @click=\"handlePaperDelete(scope.$index, scope.row)\">删除</el-button>\r\n            <el-button size=\"small\" type=\"info\" @click=\"dialogChartVisible = true; analysis(scope.$index, scope.row); \">试卷分析</el-button>\r\n          </div>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- <div class=\"questions-list\">\r\n      <div class=\"pagination\">\r\n        <button @click=\"prevPage\" :disabled=\"currentPage === 1\" style=\"padding: 5px 10px;\">上一页</button>\r\n        <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\" style=\"padding: 5px 10px;\">下一页</button>\r\n      </div>\r\n    </div> -->\r\n\r\n\r\n    <el-dialog v-model=\"dialogTableVisible\" title=\"编辑试卷\" width=\"950\">\r\n      <el-table :data=\"paperData\">\r\n        <el-table-column prop=\"question\" label=\"问题\" width=\"300\"></el-table-column>\r\n        <el-table-column prop=\"questionType\" label=\"题型\" width=\"180\"></el-table-column>\r\n        <el-table-column prop=\"tag\" label=\"标签\" width=\"180\"></el-table-column>\r\n        <el-table-column prop=\"difficulty\" label=\"难度\" width=\"120\"></el-table-column>\r\n        <el-table-column label=\"操作\" width=\"120\" header-align=\"center\">\r\n        <template #default=\"{ row }\">\r\n          <el-button type=\"primary\" :disabled=\"(user.role !== 'ADMIN')\" link @click=\"handleDelete(row)\" style=\"text-align: left;padding-left: 0px;\">移出试卷</el-button>\r\n        </template>\r\n      </el-table-column>\r\n      </el-table>\r\n    </el-dialog>\r\n\r\n    <el-dialog v-model=\"dialogTable2Visible\" title=\"试题篮\" width=\"950px\">\r\n      <el-table :data=\"selectedData\" >\r\n        <el-table-column prop=\"question\" label=\"问题\" width=\"300\"></el-table-column>\r\n        <el-table-column prop=\"questionType\" label=\"题型\" width=\"180\"></el-table-column>\r\n        <el-table-column prop=\"tag\" label=\"标签\" width=\"180\"></el-table-column>\r\n        <el-table-column prop=\"difficulty\" label=\"难度\" width=\"120\"></el-table-column>\r\n        <el-table-column label=\"操作\" width=\"120\" header-align=\"center\">\r\n        <template #default=\"{ row }\">\r\n          <el-button type=\"primary\" link @click=\"handleCartDelete(row)\" style=\"text-align: left;padding-left: 0px;\">移出试卷</el-button>\r\n        </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </el-dialog>\r\n\r\n    <!-- 创建试卷的对话框 -->\r\n    <el-dialog v-model=\"dialogFormVisible\" title=\"创建考试\">\r\n      <el-form :model=\"form\"  >\r\n        <el-form-item label=\"考试时间\" :label-width=\"formLabelWidth\">\r\n            <div class=\"demo-range\">\r\n              <el-date-picker\r\n                v-model=\"value1\"\r\n                type=\"datetimerange\"\r\n                start-placeholder=\"Start date\"\r\n                end-placeholder=\"End date\"\r\n                format=\"YYYY-MM-DD HH:mm:ss\"\r\n                date-format=\"YYYY/MM/DD ddd\"\r\n                time-format=\"A hh:mm:ss\"\r\n              />\r\n            </div>\r\n        </el-form-item>\r\n        <el-form-item label=\"考试名称\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"form.name\" autocomplete=\"off\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"考试介绍\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"form.introduction\" autocomplete=\"off\" />\r\n        </el-form-item>\r\n        <el-form-item label=\"试卷\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"form.paperTitle\" autocomplete=\"off\" />\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"考试限时\" :label-width=\"formLabelWidth\">\r\n          <el-input v-model=\"form.timeLimit\" autocomplete=\"off\" placeholder=\"输入考试限时(分钟)\" />\r\n        </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n        <div class=\"dialog-footer\">\r\n          <el-button type=\"primary\" @click=\"saveExam\">确认</el-button>\r\n          <el-button @click=\"dialogFormVisible = false\">取消</el-button>\r\n        </div>\r\n      </template>\r\n    </el-dialog>\r\n\r\n    <el-dialog v-model=\"dialogChartVisible\" title=\"试卷分析\" width=\"700px\" style=\"margin-left:33%; margin-top:3% \">\r\n      <!-- <div style=\"display: flex; justify-content: space-between;\"> -->\r\n        <div id=\"myChart\" style=\"width: 650px; height: 300px;\"></div>\r\n        <div id=\"myChart2\" style=\"width: 650px; height: 300px;\"></div>\r\n      <!-- </div> -->\r\n    </el-dialog>\r\n\r\n    <div class=\"pagination\">\r\n        <el-pagination\r\n      :page-size=\"10\"\r\n      :pager-count=\"11\"\r\n      layout=\"prev, pager, next\"\r\n      :total=\"totalPages\"\r\n      @current-change=\"handlePageChange\"\r\n    />\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { mapActions, mapState } from 'vuex';\r\nimport { ElMessage } from 'element-plus';\r\nimport * as echarts from 'echarts';\r\nimport { ref } from 'vue';\r\n\r\nexport default {\r\n    setup() {\r\n        const value1 = ref([\r\n        new Date(2024, 9, 10, 8, 40),\r\n        new Date(2025, 9, 10, 9, 40)\r\n        ]);\r\n        const value2 = ref([\r\n        new Date(2016, 9, 10, 8, 40),\r\n        new Date(2016, 9, 10, 9, 40)\r\n        ]);\r\n\r\n        return {\r\n        value1,\r\n        value2\r\n        };\r\n  },\r\n  name: 'PaperManagement',\r\n  data() {\r\n    return {\r\n      buttons2: [\r\n        { label: '全部', isActive: true, method: this.getAll}, // 默认第一个按钮为激活状态\r\n        { label: '未开始', isActive: false, method: this.getUnstarted },\r\n        { label: '进行中', isActive: false, method: this.getPro },\r\n        { label: '已完成', isActive: false, method: this.getEnded },\r\n      ],\r\n\r\n      dialogFormVisible: false,\r\n      dialogTableVisible: false,\r\n      chart: null,\r\n      dialogChartVisible: false,\r\n      dialogTable2Visible: false,\r\n      paper_id: 0,\r\n      formLabelWidth: '140px',\r\n      form: {\r\n        title: '',\r\n        introduction: '',\r\n        createdBy: '',\r\n        createTime: '',\r\n        updateTime: '',\r\n      },\r\n      searchKeyword: '',\r\n      filterQuestionType: '',\r\n      filterDifficulty: '',\r\n      currentPage: 1,\r\n      dict: {'pageNum':1, 'kind':'all'},\r\n      pageSize: 5,\r\n    //   tableData: [\r\n    //     { \r\n    //       title: '这是一个假问题?',\r\n    //       introduction: '选择题',\r\n    //       createTime: '2024-06-03',\r\n    //       updateTime: '2024-06-03',\r\n    //       createdBy: \"小张\",\r\n    //       id: 5\r\n    //     }\r\n    //   ],\r\n    //   paperData: [\r\n    //     { \r\n    //       question: '这是一个假问题?',\r\n    //       questionType: '选择题',\r\n    //       tag: '物理',\r\n    //       difficulty: '中等',\r\n    //       analysis: '这是一个问题的解析',\r\n    //       createdBy: \"小张\",\r\n    //       id: 5\r\n    //     }\r\n    //   ]\r\n    };\r\n  },\r\n  computed: {\r\n      ...mapState(['exams', 'paper', 'paperQuestions', 'user', 'examsPages']),\r\n      totalPages() {\r\n        console.log(\"pages\",this.examsPages)\r\n      return this.examsPages ;\r\n      console.log(\"this\", this.questionsPages);\r\n      return 1000;\r\n    },\r\n    tableData() {\r\n      return this.exams.map(exam => ({\r\n        name: exam.name,\r\n        // introduction: exam.introduction,\r\n        startTime: exam.startTime,\r\n        endTime: exam.endTime,\r\n        durationTime: exam.durationTime,\r\n        paperID: exam.paperTitle,\r\n      }));\r\n      },\r\n        paperData() {\r\n      return this.paperQuestions.map(question => ({\r\n        question: question.description,\r\n        questionType: question.type,\r\n        tag: question.tag,\r\n        difficulty: question.difficultLevel,\r\n        analysis: question.analysis,\r\n        id: question.id,\r\n        createdBy: question.createdBy,\r\n      }));\r\n    },\r\n    selectedData() {\r\n      return this.paper.map(question => ({\r\n        question: question.question,\r\n        questionType: question.questionType,\r\n        tag: question.tag,\r\n        difficulty: question.difficulty,\r\n        id: question.id,\r\n        analysis: question.analysis,\r\n        createdBy: question.createdBy,\r\n      }));\r\n    },\r\n  },\r\n  methods: {\r\n    ...mapActions(['fetchExams', 'addPaper', 'addQuestionToPaper', 'removeFromPaper', 'fetchPaperQuestion', 'updatePaperQuestions', 'deletePaper', 'fetchExamPages', 'createExam']),\r\n\r\n    getAll(){\r\n      console.log(\"getall\");\r\n      this.dict.kind = 'all';\r\n      this.dict.pageNum = 1;\r\n      this.currentPage = 1;\r\n      this.fetchExams(this.dict);\r\n      this.fetchExamPages(this.dict['kind']);\r\n    },\r\n    getPro(){\r\n      this.dict.kind = 'pro';\r\n      this.dict.pageNum = 1;\r\n      this.currentPage = 1;\r\n      this.fetchExams(this.dict);\r\n      this.fetchExamPages(this.dict['kind']);\r\n    },\r\n    getUnstarted(){\r\n      this.dict.kind = 'unstart';\r\n      this.dict.pageNum = 1;\r\n      this.currentPage = 1;\r\n      this.fetchExams(this.dict);\r\n      this.fetchExamPages(this.dict['kind']);\r\n    },\r\n    getEnded(){\r\n      this.dict.kind = 'end';\r\n      this.dict.pageNum = 1;\r\n      this.currentPage = 1;\r\n      this.fetchExams(this.dict);\r\n      this.fetchExamPages(this.dict['kind']);\r\n    },\r\n    handleButtonClick(method, index) {\r\n      this.activateButton(this.buttons2, index);\r\n      method(); // 调用传递的方法\r\n    },\r\n    activateButton(buttonGroup, index) {\r\n      buttonGroup.forEach((button, i) => {\r\n        button.isActive = i === index;\r\n        //在这里增加发送请求\r\n      });\r\n    },\r\n    \r\n    automaticPaper() {\r\n      // 自动组卷的逻辑\r\n    },\r\n    // addPaper() {\r\n    //   this.dialogFormVisible = true;\r\n    // },\r\n    async saveExam() {\r\n    //   const currentDateTime = new Date().toISOString().slice(0, 19).replace('T', ' ');\r\n    //   this.form.createTime = currentDateTime;\r\n    //   this.form.updateTime = currentDateTime;\r\n      console.log(this.value1);\r\n      // const [startTime, endTime] = this.form.value1;\r\n      const startTime = this.value1[0];\r\n      const endTime = this.value1[1];\r\n      console.log('Start Time:', startTime);\r\n      console.log('End Time:', endTime);\r\n\r\n      // 创建 newExam 对象\r\n      const newExam = {\r\n        name: this.form.name,\r\n        introduction: this.form.introduction,\r\n        paperId: this.form.paperTitle,\r\n        publisher: this.user.username,\r\n        startTime: startTime, // 开始时间\r\n        endTime: endTime, // 结束时间\r\n        durationTime: this.form.timeLimit, // 考试限时\r\n      };\r\n\r\n      const result = await this.createExam(newExam);\r\n      this.dialogFormVisible = false;\r\n      this.form = {\r\n        name: '',\r\n        introduction: '',\r\n        paperTitle: '',\r\n        createTime: '',\r\n        timeLimit: ''\r\n      };\r\n      this.dict['pageNum'] = this.currentPage\r\n      await this.fetchExams(this.dict);\r\n      if (result.success=='success'){\r\n          this.success('创建成功');\r\n      } else {\r\n        this.error('创建失败');\r\n      }\r\n      this.fetchExamPages(this.dict['kind']);\r\n    },\r\n\r\n    composePaper(index, row) {\r\n      const questionId = row.id; // 获取 question id\r\n      this.addQuestionToPaper(questionId);\r\n      console.log('组卷操作:', questionId);\r\n    },\r\n    handleCartDelete( row) {\r\n      const questionId = row.id; // 获取 question id\r\n      console.log(row.id);\r\n      this.removeFromPaper(questionId);\r\n      // this.paper = this.paper.filter(item => item.id !== row.id);\r\n      console.log(this.paper);\r\n        ElMessage({\r\n        message: '移除成功',\r\n        type: 'success',\r\n        customClass: 'custom-message-class',\r\n        duration: 3000,\r\n        showClose: true\r\n      });\r\n    },\r\n    querySelected() {\r\n      if (this.paper.length === 0) {\r\n        this.selectedData = [];\r\n      } else {\r\n        this.selectedData = this.paper.map(question => ({\r\n          question: question.question,\r\n          questionType: question.questionType,\r\n          tag: question.tag,\r\n          difficulty: question.difficulty,\r\n          analysis: question.analysis,\r\n          createdBy: question.createdBy,\r\n          id: question.id\r\n        }));\r\n      }\r\n    },\r\n    \r\n    queryPaper(index, row) {\r\n      console.log('query');\r\n      const paperId = row.id; // 获取 question id\r\n      this.paper_id = row.id;\r\n      console.log('query');\r\n      this.fetchPaperQuestion(paperId);\r\n      console.log('查看试卷:', paperId);\r\n    },\r\n    async handlePaperDelete(index, row){\r\n      const paperId = row.id; // 获取 question id\r\n      await this.deletePaper(paperId);\r\n      \r\n      // this.paper_id = row.id;\r\n      ElMessage({\r\n        message: '删除成功',\r\n        type: 'success',\r\n        customClass: 'custom-message-class',\r\n        duration: 3000,\r\n        showClose: true\r\n      });\r\n      await this.fetchPapersPages();\r\n      this.fetchPapers(this.currentPage);\r\n    },\r\n    analysis(index, row){\r\n      this.queryPaper(index, row);\r\n      this.initChart();\r\n    },\r\n    async handleDelete(row) {\r\n      console.log(this.paper_id)\r\n      const paperID = this.paper_id\r\n\r\n      console.log(row);\r\n      await this.updatePaperQuestions({'paperid':paperID, 'questionid':row.id});\r\n      this.fetchPapers(this.currentPage);\r\n      ElMessage({\r\n        message: '移出成功',\r\n        type: 'success',\r\n        customClass: 'custom-message-class',\r\n        duration: 3000,\r\n        showClose: true\r\n      });\r\n    },\r\n    // handleDelete(index, row) {\r\n    //   this.tableData.splice(index, 1);\r\n    // },\r\n    // handleEdit(index, row) {\r\n    //   // 编辑试卷的逻辑\r\n    // },\r\n    prevPage() {\r\n      if (this.currentPage > 1) {\r\n        this.currentPage -= 1;\r\n      }\r\n    },\r\n    nextPage() {\r\n      if (this.currentPage < this.totalPages) {\r\n        this.currentPage += 1;\r\n      }\r\n    },\r\n    \r\n\r\n    success(ms){\r\n      ElMessage({\r\n        message: ms,\r\n        type: 'success',\r\n        customClass: 'custom-message-class',\r\n        duration: 3000,\r\n        showClose: true\r\n      });\r\n    },\r\n    warning(ms){\r\n      ElMessage({\r\n        message: ms,\r\n        type: 'warning',\r\n        customClass: 'custom-message-class',\r\n        duration: 3000,\r\n        showClose: true\r\n      });\r\n    },\r\n    error(ms){\r\n      ElMessage({\r\n        message: ms,\r\n        type: 'error',\r\n        customClass: 'custom-message-class',\r\n        duration: 3000,\r\n        showClose: true\r\n      });\r\n    },\r\n\r\n    initChart() {\r\n      this.$nextTick(() => {\r\n        console.log(this.paperQuestions);\r\n      this.chart = echarts.init(document.getElementById('myChart'));\r\n\r\n      // 计算每种类型的数量\r\n      const typeCounts = this.paperQuestions.reduce((acc, item) => {\r\n        acc[item.type] = (acc[item.type] || 0) + 1;\r\n        return acc;\r\n      }, {});\r\n\r\n      // 将计算结果转换为 ECharts 数据格式\r\n      const data = Object.keys(typeCounts).map(type => {\r\n        return { value: typeCounts[type], name: type };\r\n      });\r\n\r\n      const option = {\r\n        title: {\r\n          text: '题目类型占比图:',\r\n          left: 'left'\r\n        },\r\n        tooltip: {\r\n          trigger: 'item',\r\n          formatter: '{a} <br/>{b} : {c} ({d}%)'\r\n        },\r\n        legend: {\r\n          type: 'scroll',\r\n          orient: 'vertical',\r\n          right: 0,\r\n          top: 'center',\r\n          icon: 'circle',\r\n          selectedMode: 'multiple',\r\n          formatter: (name) => {\r\n            let total = data.reduce((sum, item) => sum + item.value, 0);\r\n            let item = data.find(item => item.name === name);\r\n            let p = (item.value / total * 100).toFixed(2);\r\n            return `${name}  |  ${p}%`;\r\n          }\r\n        },\r\n        series: [\r\n          {\r\n            name: '题目类型占比',\r\n            type: 'pie',\r\n            radius: '60%',\r\n            center: ['45%', '55%'],\r\n            selectedMode: 'single',\r\n            data: data,\r\n            label: {\r\n              show: true,\r\n              formatter: '{b}: {c} ({d}%)'\r\n            },\r\n            itemStyle: {\r\n              emphasis: {\r\n                shadowBlur: 10,\r\n                shadowOffsetX: 0,\r\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n              }\r\n            }\r\n          }\r\n        ]\r\n      };\r\n\r\n      this.chart.setOption(option);\r\n\r\n    this.chart2 = echarts.init(document.getElementById('myChart2'));\r\n\r\n    // 计算每种难度的数量\r\n    const difficultyCounts = this.paperQuestions.reduce((acc, item) => {\r\n      acc[item.difficultLevel] = (acc[item.difficultLevel] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    // 将计算结果转换为 ECharts 数据格式\r\n    const data2 = Object.keys(difficultyCounts).map(difficultLevel => {\r\n      return { value: difficultyCounts[difficultLevel], name: difficultLevel };\r\n    });\r\n\r\n    const option2 = {\r\n      title: {\r\n        text: '题目难度占比图:',\r\n        left: 'left'\r\n      },\r\n      tooltip: {\r\n        trigger: 'item',\r\n        formatter: '{a} <br/>{b} : {c} ({d}%)'\r\n      },\r\n      legend: {\r\n        type: 'scroll',\r\n        orient: 'vertical',\r\n        right: 0,\r\n        top: 'center',\r\n        icon: 'circle',\r\n        selectedMode: 'multiple',\r\n        formatter: (name) => {\r\n          let total = data2.reduce((sum, item) => sum + item.value, 0);\r\n          let item = data2.find(item => item.name === name);\r\n          let p = (item.value / total * 100).toFixed(2);\r\n          return `${name}  |  ${p}%`;\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          name: '题目难度占比',\r\n          type: 'pie',\r\n          radius: '60%',\r\n          center: ['45%', '55%'],\r\n          selectedMode: 'single',\r\n          data: data2,\r\n          label: {\r\n            show: true,\r\n            formatter: '{b}: {c} ({d}%)'\r\n          },\r\n          itemStyle: {\r\n            emphasis: {\r\n              shadowBlur: 10,\r\n              shadowOffsetX: 0,\r\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    };\r\n\r\n    this.chart2.setOption(option2);\r\n\r\n    window.addEventListener('resize', () => {\r\n      this.chart.resize();\r\n      this.chart2.resize();\r\n    });\r\n      });\r\n    },\r\n  handlePageChange(page) {\r\n      console.log('Page changed to:', page); // 日志记录当前页码\r\n      this.currentPage = page;\r\n      this.dict['pageNum'] = this.currentPage;\r\n      this.fetchExams(this.dict); // 触发 Vuex action 以获取新页数据\r\n  },\r\n  },\r\n  mounted() {\r\n    console.log(\"fetch exam\", this.dict)\r\n    this.fetchExams(this.dict);\r\n    this.fetchExamPages(this.dict['kind']);\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n\r\n<style scoped>\r\n.container {\r\n  flex: 1;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  overflow: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.form-row {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 15px;\r\n  margin-left: 1px;\r\n}\r\n.form-group {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 0 15px;\r\n}\r\n.el-button{\r\n  /* 增加按钮间距 */\r\n  margin-left: 12px;\r\n}\r\n.demo-range .el-date-editor {\r\n  margin: 8px;\r\n}\r\n\r\n.demo-range .el-range-separator {\r\n  box-sizing: content-box;\r\n}\r\n.el-button-group {\r\n  display: flex;\r\n  flex-wrap: nowrap;\r\n}\r\n\r\nform {\r\n  background: white;\r\n  padding: 2rem;\r\n  border-radius: 5px;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\nform div {\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n/* button {\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  background: #1890ff;\r\n  border: none;\r\n  color: white;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background: #40a9ff;\r\n} */\r\n\r\n.alert {\r\n  margin-top: 1rem;\r\n  padding: 1rem;\r\n  background: #f8d7da;\r\n  color: #721c24;\r\n  border: 1px solid #f5c6cb;\r\n  border-radius: 5px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.pagination {\r\n  position: absolute;\r\n  bottom: 40px; /* 距离底部的距离 */\r\n  left: 58%; /* 水平居中 */\r\n  transform: translateX(-50%); /* 水平居中 */\r\n  display: flex;\r\n    justify-content: center;\r\n  align-items: center;\r\n  /* justify-content: space-between; */\r\n  width: 200px; /* 指定pagination的宽度 */\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}