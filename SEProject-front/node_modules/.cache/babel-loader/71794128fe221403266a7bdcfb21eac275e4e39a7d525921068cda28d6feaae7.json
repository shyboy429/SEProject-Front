{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* eslint-disable no-unused-vars */\n\nimport { createStore } from 'vuex';\nimport axios from 'axios';\n\n// 设置 Axios 基地址\n// axios.defaults.baseURL = 'http://47.93.170.188:8800';\naxios.defaults.baseURL = 'http://localhost:';\nconst store = createStore({\n  state: {\n    questions: [],\n    // 存储题目列表\n    paperQuestions: [],\n    examQuestions: [],\n    examAnswers: {},\n    paper: [],\n    papers: [],\n    papers2: [],\n    examInfo: null,\n    exams: [],\n    // 存储考试列表\n    question: [],\n    questionsPages: 1,\n    papersPages: 1,\n    examsPages: 1,\n    totalCount2: 0,\n    user: null,\n    // 存储当前登录用户,\n    users: null\n  },\n  mutations: {\n    setExamAnswer(state, {\n      questionId,\n      answer\n    }) {\n      state.examAnswers[questionId] = answer;\n    },\n    // 设置题目列表\n    setPapers(state, papers) {\n      state.papers = papers;\n    },\n    setPapers2(state, papers2) {\n      state.papers2 = papers2;\n    },\n    setExams(state, exams) {\n      state.exams = exams;\n    },\n    addPaper(state, paper) {\n      state.papers.push(paper);\n      state.paper = [];\n    },\n    removePaper(state, paperId) {\n      state.papers = state.papers.filter(paper => paper.id !== paperId);\n    },\n    addQuestionToPaper(state, question) {\n      console.log(\"hello\");\n      // if (!state.paper.includes(question)) {\n      state.paper.push(question);\n      // }\n    },\n    removeQuestionFromPaper(state, questionId) {\n      console.log(\"hh\");\n      state.paper = state.paper.filter(item => item.id !== questionId);\n    },\n    setPaperQuestions(state, questions) {\n      state.paperQuestions = questions;\n    },\n    setExamQuestions(state, questions) {\n      state.examQuestions = questions;\n    },\n    setExamInfo(state, row) {\n      state.examInfo = row;\n    },\n    // 设置题目列表\n    setQuestion(state, question) {\n      state.question = [];\n      state.question.push(question);\n    },\n    setQuestions(state, questions) {\n      state.questions = questions;\n    },\n    // 添加新题目\n    addQuestion(state, question) {\n      state.questions.push(question);\n    },\n    // 设置考试列表\n    // setExams(state, exams) {\n    //   state.exams = exams;\n    // },\n    // 添加新考试\n    addExam(state, exam) {\n      state.exams.push(exam);\n    },\n    // 设置当前用户\n    setUser(state, user) {\n      state.user = user;\n    },\n    setQuestionsPages(state, pagenum) {\n      state.questionsPages = pagenum;\n    },\n    setPapersPages(state, pagenum) {\n      state.papersPages = pagenum;\n    },\n    setExamsPages(state, pagenum) {\n      state.examsPages = pagenum;\n    },\n    setUsers(state, users) {\n      state.users = users;\n    },\n    add() {}\n  },\n  actions: {\n    removeFromPaper({\n      commit\n    }, id) {\n      commit('removeQuestionFromPaper', id);\n    },\n    async register({\n      commit\n    }, {\n      id,\n      username,\n      password,\n      role\n    }) {\n      try {\n        const response = await axios.post('/api/users/register', {\n          id,\n          username,\n          password,\n          role\n        });\n        commit('setUser', response.data);\n        return response.data;\n      } catch (error) {\n        console.error('注册失败：', error);\n        if (error.response && error.response.data) {\n          return error.response.data;\n        } else throw new Error('Registration failed');\n      }\n    },\n    async submitExamAnswer({\n      commit\n    }, answer) {\n      try {\n        // console.log(id);\n        // console.log('update');\n        let postData = [];\n        console.log(\"info:\", this.state.examInfo);\n        // 遍历 answer 对象，构建每个题目的数据格式\n        Object.keys(answer).forEach(questionId => {\n          let data = {\n            id: \"\",\n            // 通常是提交后服务器返回的答案记录的唯一标识符\n            studentName: this.state.user.username,\n            // 学生姓名，这里可以根据实际情况传入\n            examId: this.state.examInfo.examId,\n            // 考试的唯一标识符\n            questionId: questionId,\n            // 题目的唯一标识符，对应数据库中的Id\n            studentAnswer: answer[questionId],\n            // 学生的答案，根据传入的 answer 对象取值\n            grade: \"0\" // 初始分数为0，如果需要评分功能可以后续修改\n          };\n          postData.push(data);\n        });\n        console.log(postData);\n        const response = await axios.post('/api/answer-record/submit-answer', postData);\n        // const response2 = await axios.get('/api/papers');\n        // commit('setPapers', response2.data);\n        // commit('add');\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        // commit('add');\n      }\n    },\n    async deletePaper({\n      commit\n    }, PaperID) {\n      try {\n        // console.log(id);\n        console.log('update');\n        const response = await axios.delete('/api/papers/' + PaperID);\n        // const response2 = await axios.get('/api/papers');\n        // commit('setPapers', response2.data);\n        commit('add');\n        return response.data;\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('add');\n        return error.response.data;\n      }\n    },\n    async deleteExam({\n      commit\n    }, PaperID) {\n      try {\n        // console.log(id);\n        console.log('update');\n        const response = await axios.delete('/api/exams/' + PaperID);\n        // const response2 = await axios.get('/api/papers');\n        // commit('setPapers', response2.data);\n        commit('add');\n        return response.data;\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('add');\n        return error.response.data;\n      }\n    },\n    async updatePaperQuestions({\n      commit\n    }, dict) {\n      try {\n        // console.log(id);\n        console.log('update');\n        const response = await axios.post('/api/papers/' + dict.paperid + '/question/' + dict.questionid);\n        commit('setPaperQuestions', response.data);\n        // const response2 = await axios.get('/api/papers');\n        // commit('setPapers', response2.data);\n        commit('add');\n        return response.data;\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('add');\n        return error.response.data;\n      }\n    },\n    async updateUser({\n      commit\n    }, params) {\n      try {\n        // console.log(id);\n        console.log('update');\n        const queryString = Object.keys(params).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`).join('&&');\n        const response = await axios.put(`/api/users?${queryString}`);\n        // const response = await axios.put('/api/users/', dict);\n        // commit('setPaperQuestions', response.data);\n        // const response2 = await axios.get('/api/papers');\n        // commit('setPapers', response2.data);\n        commit('add');\n        return response.data;\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('add');\n        return error.response.data;\n      }\n    },\n    async deleteQuestion({\n      commit\n    }, id) {\n      try {\n        console.log(id);\n        console.log('delete');\n        const response = await axios.delete('/api/questions/' + id);\n        // const response2= await axios.get('/api/questions');\n        // commit('setQuestions', response2.data);\n        commit('add');\n        return response.data;\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('add');\n        return error.response.data;\n      }\n    },\n    async updateQuestion({\n      commit\n    }, form) {\n      try {\n        console.log(form.id);\n        const response = await axios.post('/api/questions/' + form.id, form.question);\n        commit('add');\n        return response.data;\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('add');\n        return error.response.data;\n      }\n    },\n    async fetchPaperQuestion({\n      commit\n    }, id) {\n      try {\n        const response = await axios.get('/api/papers/admin/' + id);\n        commit('setPaperQuestions', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setPaperQuestions', []);\n      }\n    },\n    async fetchUsers({\n      commit\n    }) {\n      try {\n        const response = await axios.get('/api/users');\n        commit('setUsers', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setUsers', []);\n      }\n    },\n    async fetchExamQuestion({\n      commit\n    }, id) {\n      try {\n        console.log(\"id:\", id);\n        const response = await axios.get('/api/papers/exam-paper/' + id[0]);\n        // var d2 = {};\n        // d2['id'] = response.data['questionId'];\n        // d2['type'] = response.data['questionType'];\n        // d2['description'] = response.data['specificContent'];\n        commit('setExamQuestions', response.data);\n        console.log(\"rrrrrrrrrrrr:\", id[1]);\n        commit('setExamInfo', id[1]);\n        console.log('examInfo:', this.state.examInfo);\n        this.state.totalCount2 = response.data.length;\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setExamQuestions', []);\n      }\n    },\n    // 获取paper列表\n    async fetchPapers({\n      commit\n    }, pageNum) {\n      try {\n        var response;\n        if (pageNum !== undefined) {\n          response = await axios.get('/api/papers?pageNum=' + pageNum);\n        } else {\n          response = await axios.get('/api/papers');\n        }\n        commit('setPapers', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setPapers', []);\n      }\n    },\n    async fetchPapers2({\n      commit\n    }, pageNum) {\n      try {\n        var response;\n        if (pageNum !== undefined) {\n          response = await axios.get('/api/papers?pageNum=' + pageNum);\n        } else {\n          response = await axios.get('/api/papers');\n        }\n        commit('setPapers2', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setPapers2', []);\n      }\n    },\n    // 获取题目列表\n    async fetchFileteredQuestion({\n      commit\n    }, id) {\n      try {\n        const response = await axios.get(`/api/questions/` + id);\n        commit('setQuestion', response.data); // Assuming you have a Vuex store\n        return response.data;\n      } catch (error) {\n        // Handle request failure\n        commit('setQuestion', []);\n        return error.response.data;\n      }\n    },\n    // 获取题目列表\n    async fetchFileteredQuestions({\n      commit\n    }, params) {\n      try {\n        // Construct query string from params\n        const queryString = Object.keys(params).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`).join('&');\n        const response = await axios.get(`/api/questions/search?${queryString}`);\n        // commit('setQuestions', response.data); // Assuming you have a Vuex store\n        commit('setQuestionsPages', response.data.length);\n      } catch (error) {\n        // Handle request failure\n        // commit('setQuestions', []);\n      }\n    },\n    // 获取题目列表\n    async fetchQuestions({\n      commit\n    }, params) {\n      try {\n        // Construct query string from params\n        const queryString = Object.keys(params).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`).join('&&');\n        const response = await axios.get(`/api/questions/search?${queryString}`);\n        commit('setQuestions', response.data); // Assuming you have a Vuex store\n        // return (len(response.data));\n      } catch (error) {\n        // Handle request failure\n        commit('setQuestions', []);\n      }\n    },\n    // // 获取题目列表\n    // async fetchQuestions({ commit }, pageNum) {\n    //   try {\n    //     var response;\n    //     if (pageNum!==undefined){\n    //       response = await axios.get('/api/questions/?pageNum='+ pageNum);\n    //     }else {\n    //       response = await axios.get('/api/questions');\n    //     }\n\n    //     commit('setQuestions', response.data);\n    //   } catch (error) {\n    //     // 请求失败时，设置空数据\n    //     commit('setQuestions', []);\n    //   }\n    // },\n    async fetchQuestionsPages({\n      commit\n    }) {\n      try {\n        const response = await axios.get('/api/questions/pageNum');\n        const totalPages = parseInt(response.data, 10); // 将 response.data 转换为整数\n        console.log('Fetched questions pages:', totalPages); // 日志记录转换后的整数值\n        console.log(response.data);\n        commit('setQuestionsPages', response.data);\n        console.log('pages:', this.state.questionsPages);\n      } catch (error) {\n        console.error('Failed to fetch questions pages:', error); // Add log\n        commit('setQuestionsPages', 1);\n      }\n    },\n    async fetchPapersPages({\n      commit\n    }) {\n      try {\n        const response = await axios.get('/api/papers/pageNum');\n        commit('setPapersPages', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setPapersPages', 1);\n      }\n    },\n    async fetchExamPages({\n      commit\n    }, kind) {\n      try {\n        var response;\n        if (kind === 'all') {\n          response = await axios.get('/api/exams/page-num');\n        } else if (kind === 'unstart') {\n          response = await axios.get('/api/exams/not-started/page-num');\n        } else if (kind === 'pro') {\n          response = await axios.get('/api/exams/in-progress/page-num');\n        } else if (kind === 'end') {\n          response = await axios.get('/api/exams/finished/page-num');\n        }\n        commit('setExamsPages', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setExamsPages', 1);\n      }\n    },\n    async addPaper({\n      commit\n    }, paper) {\n      try {\n        const response = await axios.post('/api/papers', paper);\n        // commit('addPaper', response.data);\n        // return {success:\"success\"};\n        return response.data;\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        // commit('addPaper', paper);\n        // return {success:\"error\"};\n        return error.response.data;\n      }\n    },\n    // 添加新题目\n    async addQuestion({\n      commit\n    }, question) {\n      try {\n        const response = await axios.post('/api/questions', question);\n        commit('addQuestion', response.data);\n        return response.data;\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        console.log(\"error\", error);\n        commit('addQuestion', question);\n        return error.response.data;\n        return {\n          success: \"error\",\n          message: \"网络错误\"\n        };\n      }\n    },\n    // 获取考试列表\n    // async fetchExams({ commit }) {\n    //   try {\n    //     const response = await axios.get('/api/exams');\n    //     commit('setExams', response.data);\n    //   } catch (error) {\n    //     // 请求失败时，设置空数据\n    //     commit('setExams', []);\n    //   }\n    // },\n    // async fetchExams({ commit }, pageNum) {\n    //   try {\n    //     var response;\n    //     if (pageNum!==undefined){\n    //       response = await axios.get('/api/exams?pageNum='+ pageNum);\n    //     }else {\n    //       response = await axios.get('/api/exams');\n    //     }\n    //     commit('setExams', response.data);\n    //   } catch (error) {\n    //     // 请求失败时，设置空数据\n    //     commit('setExams', []);\n    //   }\n    // },\n\n    async fetchExams({\n      commit\n    }, dict) {\n      try {\n        console.log('dd', dict);\n        var pageNum = dict.pageNum;\n        var kind = dict.kind;\n        var response;\n        if (kind === \"all\") {\n          if (pageNum !== undefined) {\n            response = await axios.get('/api/exams/student-name?pageNum=' + pageNum);\n          } else {\n            response = await axios.get('/api/exams');\n          }\n        } else if (kind === 'pro') {\n          if (pageNum !== undefined) {\n            response = await axios.get('/api/exams/student-name/in-progress?pageNum=' + pageNum);\n          } else {\n            response = await axios.get('/api/exams/student-name/in-progress');\n          }\n        } else if (kind === 'unstart') {\n          if (pageNum !== undefined) {\n            response = await axios.get('/api/exams/student-name/not-started?pageNum=' + pageNum);\n          } else {\n            response = await axios.get('/api/exams/student-name/not-started');\n          }\n        } else if (kind === 'end') {\n          if (pageNum !== undefined) {\n            response = await axios.get('/api/exams/student-name/finished?pageNum=' + pageNum);\n          } else {\n            response = await axios.get('/api/exams/student-name/finished');\n          }\n        }\n        commit('setExams', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setExams', []);\n      }\n    },\n    async fetchStudentExams({\n      commit\n    }, dict) {\n      try {\n        console.log('ddd', dict);\n        var pageNum = dict.pageNum;\n        var kind = dict.kind;\n        var response;\n        console.log('dddd', kind);\n        if (kind === \"all\") {\n          if (pageNum !== undefined) {\n            console.log('ddddd', kind);\n            response = await axios.get('/api/exams/student-name?pageNum=' + pageNum + '&&studentName=' + this.state.user.username);\n            console.log('ddddd', kind);\n          } else {\n            response = await axios.get('/api/exams' + '?studentName=' + this.state.user.username);\n          }\n        } else if (kind === 'pro') {\n          if (pageNum !== undefined) {\n            response = await axios.get('/api/exams/student-name/in-progress?pageNum=' + pageNum + '&&studentName=' + this.state.user.username);\n          } else {\n            response = await axios.get('/api/exams/student-name/in-progress' + '?studentName=' + this.state.user.username);\n          }\n        } else if (kind === 'unstart') {\n          if (pageNum !== undefined) {\n            response = await axios.get('/api/exams/student-name/not-started?pageNum=' + pageNum + '&&studentName=' + this.state.user.username);\n          } else {\n            response = await axios.get('/api/exams/student-name/not-started' + '?studentName=' + this.state.user.username);\n          }\n        } else if (kind === 'end') {\n          if (pageNum !== undefined) {\n            response = await axios.get('/api/exams/student-name/finished?pageNum=' + pageNum + '&&studentName=' + this.state.user.username);\n          } else {\n            response = await axios.get('/api/exams/student-name/finished' + '?studentName=' + this.state.user.username);\n          }\n        }\n        commit('setExams', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setExams', []);\n      }\n    },\n    // 创建新考试\n    async createExam({\n      commit\n    }, exam) {\n      try {\n        const response = await axios.post('/api/exams', exam);\n        // commit('addExam', response.data);\n        // return {success:\"success\"};\n        return response.data;\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到考试列表\n        // commit('addExam', exam);\n        // return {success:\"error\"};\n        return error.response.data;\n      }\n    },\n    // 提交考试\n    async submitExam(_, {\n      examId,\n      answers\n    }) {\n      try {\n        await axios.post(`/api/exams/${examId}/submit`, {\n          answers\n        });\n      } catch (error) {\n        // 提交失败时，暂时不做处理\n      }\n    },\n    // 用户登录\n    async login({\n      commit\n    }, credentials) {\n      try {\n        const response = await axios.post('/api/users/login', credentials);\n        commit('setUser', response.data);\n        return {\n          success: true,\n          role: response.data.role\n        };\n      } catch (error) {\n        return {\n          success: false,\n          message: '账号或密码错误'\n        };\n      }\n    }\n  },\n  getters: {\n    getExamQuestions(state) {\n      return state.examQuestions;\n    },\n    getExamAnswer: state => questionId => {\n      return state.examAnswers[questionId];\n    },\n    getAnsweredCount(state) {\n      return Object.keys(state.examAnswers).length;\n    }\n  }\n});\nexport default store;","map":{"version":3,"names":["createStore","axios","defaults","baseURL","store","state","questions","paperQuestions","examQuestions","examAnswers","paper","papers","papers2","examInfo","exams","question","questionsPages","papersPages","examsPages","totalCount2","user","users","mutations","setExamAnswer","questionId","answer","setPapers","setPapers2","setExams","addPaper","push","removePaper","paperId","filter","id","addQuestionToPaper","console","log","removeQuestionFromPaper","item","setPaperQuestions","setExamQuestions","setExamInfo","row","setQuestion","setQuestions","addQuestion","addExam","exam","setUser","setQuestionsPages","pagenum","setPapersPages","setExamsPages","setUsers","add","actions","removeFromPaper","commit","register","username","password","role","response","post","data","error","Error","submitExamAnswer","postData","Object","keys","forEach","studentName","examId","studentAnswer","grade","deletePaper","PaperID","delete","deleteExam","updatePaperQuestions","dict","paperid","questionid","updateUser","params","queryString","map","key","encodeURIComponent","join","put","deleteQuestion","updateQuestion","form","fetchPaperQuestion","get","fetchUsers","fetchExamQuestion","length","fetchPapers","pageNum","undefined","fetchPapers2","fetchFileteredQuestion","fetchFileteredQuestions","fetchQuestions","fetchQuestionsPages","totalPages","parseInt","fetchPapersPages","fetchExamPages","kind","success","message","fetchExams","fetchStudentExams","createExam","submitExam","_","answers","login","credentials","getters","getExamQuestions","getExamAnswer","getAnsweredCount"],"sources":["C:/Users/86139/Desktop/SEProject-front/src/store/index.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\n\nimport { createStore } from 'vuex';\nimport axios from 'axios';\n\n// 设置 Axios 基地址\n// axios.defaults.baseURL = 'http://47.93.170.188:8800';\naxios.defaults.baseURL = 'http://localhost:';\n\nconst store = createStore({\n  state: {\n    questions: [], // 存储题目列表\n    paperQuestions: [],\n    examQuestions: [],\n    examAnswers: {},\n    paper: [],\n    papers: [],\n    papers2:[],\n    examInfo: null,\n    exams: [], // 存储考试列表\n    question:[],\n    questionsPages:1,\n    papersPages:1,\n    examsPages:1,\n    totalCount2:0,\n    user: null, // 存储当前登录用户,\n    users:null\n  },\n  mutations: {\n    setExamAnswer(state, { questionId, answer }) {\n      state.examAnswers[questionId] = answer;\n    },\n\n    // 设置题目列表\n    setPapers(state, papers) {\n      state.papers = papers;\n    },\n    setPapers2(state, papers2) {\n      state.papers2 = papers2;\n    },\n    setExams(state, exams) {\n      state.exams = exams;\n    },\n    addPaper(state, paper) {\n      state.papers.push(paper);\n      state.paper = []\n    },\n    removePaper(state, paperId) {\n      state.papers = state.papers.filter(paper => paper.id !== paperId);\n    },\n\n    addQuestionToPaper(state, question) {\n      console.log(\"hello\");\n      // if (!state.paper.includes(question)) {\n        state.paper.push(question);\n      // }\n    },\n    removeQuestionFromPaper(state, questionId) {\n      console.log(\"hh\");\n      state.paper = state.paper.filter(item => item.id !== questionId);\n    },\n    \n    setPaperQuestions(state, questions){\n      state.paperQuestions = questions;\n    },\n    setExamQuestions(state, questions){\n      state.examQuestions = questions;\n    },\n    setExamInfo(state, row){\n      state.examInfo = row;\n    },\n    // 设置题目列表\n      setQuestion(state, question) {\n          state.question = [];\n      state.question.push(question);\n    },\n      setQuestions(state, questions) {\n        \n      state.questions = questions;\n    },\n    // 添加新题目\n    addQuestion(state, question) {\n      state.questions.push(question);\n    },\n    // 设置考试列表\n    // setExams(state, exams) {\n    //   state.exams = exams;\n    // },\n    // 添加新考试\n    addExam(state, exam) {\n      state.exams.push(exam);\n    },\n    // 设置当前用户\n    setUser(state, user) {\n      state.user = user;\n    },\n    setQuestionsPages(state, pagenum){\n      state.questionsPages = pagenum;\n    },\n    setPapersPages(state, pagenum){\n      state.papersPages = pagenum;\n    },\n    setExamsPages(state, pagenum){\n      state.examsPages = pagenum;\n    },\n    setUsers(state, users){\n      state.users = users;\n    },\n    add(){\n\n    }\n  },\n  actions: {\n    removeFromPaper({ commit }, id) {\n      commit('removeQuestionFromPaper', id);\n      },\n      async register({ commit }, { id, username, password, role }) {\n    try {\n      const response = await axios.post('/api/users/register', { id, username, password, role });\n      commit('setUser', response.data);\n      return response.data;\n    } catch (error) {\n        console.error('注册失败：', error);\n    if (error.response && error.response.data) {\n      return error.response.data;\n    } else\n      throw new Error('Registration failed');\n    }\n  },\n    async submitExamAnswer({commit}, answer){\n      try {\n        // console.log(id);\n        // console.log('update');\n        let postData = [];\n        console.log(\"info:\",this.state.examInfo)\n        // 遍历 answer 对象，构建每个题目的数据格式\n        Object.keys(answer).forEach(questionId => {\n          let data = {\n            id: \"\",  // 通常是提交后服务器返回的答案记录的唯一标识符\n            studentName: this.state.user.username,  // 学生姓名，这里可以根据实际情况传入\n            examId: this.state.examInfo.examId,  // 考试的唯一标识符\n            questionId: questionId,  // 题目的唯一标识符，对应数据库中的Id\n            studentAnswer: answer[questionId],  // 学生的答案，根据传入的 answer 对象取值\n            grade: \"0\"  // 初始分数为0，如果需要评分功能可以后续修改\n          };\n          postData.push(data);\n        });\n        console.log(postData);\n        const response = await axios.post('/api/answer-record/submit-answer', postData);\n        // const response2 = await axios.get('/api/papers');\n        // commit('setPapers', response2.data);\n        // commit('add');\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        // commit('add');\n      }\n    },\n    async deletePaper({commit}, PaperID){\n      try {\n        // console.log(id);\n        console.log('update');\n        const response = await axios.delete('/api/papers/'+PaperID);\n        // const response2 = await axios.get('/api/papers');\n        // commit('setPapers', response2.data);\n        commit('add');\n        return response.data;\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('add');\n        return error.response.data;\n      }\n    },\n    \n    async deleteExam({commit}, PaperID){\n      try {\n        // console.log(id);\n        console.log('update');\n        const response = await axios.delete('/api/exams/'+PaperID);\n        // const response2 = await axios.get('/api/papers');\n        // commit('setPapers', response2.data);\n        commit('add');\n        return response.data;\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('add');\n        return error.response.data;\n      }\n    },\n    async updatePaperQuestions({commit}, dict){\n      try {\n        // console.log(id);\n        console.log('update');\n        const response = await axios.post('/api/papers/'+dict.paperid+'/question/'+dict.questionid);\n        commit('setPaperQuestions', response.data);\n        // const response2 = await axios.get('/api/papers');\n        // commit('setPapers', response2.data);\n        commit('add');\n        return response.data;\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('add');\n        return error.response.data;\n      }\n    },\n\n    async updateUser({commit}, params){\n      try {\n        // console.log(id);\n        console.log('update');\n        const queryString = Object.keys(params)\n          .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n          .join('&&');\n  \n        const response = await axios.put(`/api/users?${queryString}`);\n        // const response = await axios.put('/api/users/', dict);\n        // commit('setPaperQuestions', response.data);\n        // const response2 = await axios.get('/api/papers');\n        // commit('setPapers', response2.data);\n        commit('add');\n        return response.data;\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('add');\n        return error.response.data;\n      }\n    },\n    async deleteQuestion({commit}, id){\n      try {\n        console.log(id);\n        console.log('delete');\n        const response = await axios.delete('/api/questions/'+id);\n        // const response2= await axios.get('/api/questions');\n        // commit('setQuestions', response2.data);\n        commit('add');\n        return response.data;\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('add');\n        return error.response.data\n      }\n    },\n    async updateQuestion({commit}, form) {\n      try {\n        console.log(form.id);\n        const response = await axios.post('/api/questions/'+form.id, form.question);\n        \n        commit('add');\n        return response.data\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('add');\n        return error.response.data\n      }\n    },\n\n    async fetchPaperQuestion({ commit}, id){\n      try {\n        const response = await axios.get('/api/papers/admin/'+id);\n        commit('setPaperQuestions', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setPaperQuestions', []);\n      }\n    },\n    async fetchUsers({ commit}){\n      try {\n        const response = await axios.get('/api/users');\n        commit('setUsers', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setUsers', []);\n      }\n    },\n\n    async fetchExamQuestion({ commit}, id){\n      try {\n        console.log(\"id:\",id);\n        const response = await axios.get('/api/papers/exam-paper/'+id[0]);\n        // var d2 = {};\n        // d2['id'] = response.data['questionId'];\n        // d2['type'] = response.data['questionType'];\n        // d2['description'] = response.data['specificContent'];\n        commit('setExamQuestions', response.data);\n        console.log(\"rrrrrrrrrrrr:\", id[1]);\n        commit('setExamInfo', id[1]);\n        console.log('examInfo:', this.state.examInfo);\n        this.state.totalCount2 = response.data.length;\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setExamQuestions', []);\n      }\n    },\n    // 获取paper列表\n    async fetchPapers({ commit }, pageNum) {\n      try {\n        var response;\n        if (pageNum!==undefined){\n          response = await axios.get('/api/papers?pageNum='+ pageNum);\n        }else {\n          response = await axios.get('/api/papers');\n        }\n        commit('setPapers', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setPapers', []);\n      }\n    },\n    async fetchPapers2({ commit }, pageNum) {\n      try {\n        var response;\n        if (pageNum!==undefined){\n          response = await axios.get('/api/papers?pageNum='+ pageNum);\n        }else {\n          response = await axios.get('/api/papers');\n        }\n        commit('setPapers2', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setPapers2', []);\n      }\n    },\n    // 获取题目列表\n    async fetchFileteredQuestion({ commit }, id) {\n      try {\n  \n        const response = await axios.get(`/api/questions/`+id);\n        commit('setQuestion', response.data); // Assuming you have a Vuex store\n        return response.data;\n      } catch (error) {\n        // Handle request failure\n        commit('setQuestion', []);\n        return error.response.data;\n      }\n    },\n    // 获取题目列表\n    async fetchFileteredQuestions({ commit }, params) {\n      try {\n        // Construct query string from params\n        const queryString = Object.keys(params)\n          .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n          .join('&');\n  \n        const response = await axios.get(`/api/questions/search?${queryString}`);\n        // commit('setQuestions', response.data); // Assuming you have a Vuex store\n        commit('setQuestionsPages', response.data.length);\n      } catch (error) {\n        // Handle request failure\n        // commit('setQuestions', []);\n      }\n    },\n    // 获取题目列表\n    async fetchQuestions({ commit }, params) {\n      try {\n        // Construct query string from params\n        const queryString = Object.keys(params)\n          .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n          .join('&&');\n  \n        const response = await axios.get(`/api/questions/search?${queryString}`);\n        commit('setQuestions', response.data); // Assuming you have a Vuex store\n        // return (len(response.data));\n        \n      } catch (error) {\n        // Handle request failure\n        commit('setQuestions', []);\n      }\n    },\n    // // 获取题目列表\n    // async fetchQuestions({ commit }, pageNum) {\n    //   try {\n    //     var response;\n    //     if (pageNum!==undefined){\n    //       response = await axios.get('/api/questions/?pageNum='+ pageNum);\n    //     }else {\n    //       response = await axios.get('/api/questions');\n    //     }\n        \n    //     commit('setQuestions', response.data);\n    //   } catch (error) {\n    //     // 请求失败时，设置空数据\n    //     commit('setQuestions', []);\n    //   }\n    // },\n    async fetchQuestionsPages({ commit }) {\n      try {\n        const response = await axios.get('/api/questions/pageNum');\n        const totalPages = parseInt(response.data, 10); // 将 response.data 转换为整数\n        console.log('Fetched questions pages:', totalPages); // 日志记录转换后的整数值\n        console.log(response.data);\n        commit('setQuestionsPages', response.data);\n        console.log('pages:', this.state.questionsPages)\n      } catch (error) {\n        console.error('Failed to fetch questions pages:', error); // Add log\n        commit('setQuestionsPages', 1);\n      }\n    },\n    \n    async fetchPapersPages({commit}){\n      try {\n        const response = await axios.get('/api/papers/pageNum');\n        commit('setPapersPages', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setPapersPages', 1);\n      }\n    },\n    \n    async fetchExamPages({commit},kind){\n      try {\n        var response;\n        if (kind==='all'){\n          response = await axios.get('/api/exams/page-num');\n        }else if(kind==='unstart'){\n          response = await axios.get('/api/exams/not-started/page-num');\n        }else if(kind==='pro'){\n          response = await axios.get('/api/exams/in-progress/page-num');\n        }else if(kind==='end'){\n          response = await axios.get('/api/exams/finished/page-num');\n        }\n        \n        commit('setExamsPages', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setExamsPages', 1);\n      }\n    },\n    async addPaper({ commit }, paper) {\n      try {\n        const response = await axios.post('/api/papers', paper);\n        // commit('addPaper', response.data);\n        // return {success:\"success\"};\n        return response.data;\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        // commit('addPaper', paper);\n        // return {success:\"error\"};\n        return error.response.data;\n      }\n    },\n    // 添加新题目\n    async addQuestion({ commit }, question) {\n      try {\n        const response = await axios.post('/api/questions', question);\n        commit('addQuestion', response.data);\n        return response.data;\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        console.log(\"error\",error);\n        commit('addQuestion', question);\n        return error.response.data;\n        return {success:\"error\", message:\"网络错误\"}\n      }\n    },\n    // 获取考试列表\n    // async fetchExams({ commit }) {\n    //   try {\n    //     const response = await axios.get('/api/exams');\n    //     commit('setExams', response.data);\n    //   } catch (error) {\n    //     // 请求失败时，设置空数据\n    //     commit('setExams', []);\n    //   }\n    // },\n    // async fetchExams({ commit }, pageNum) {\n    //   try {\n    //     var response;\n    //     if (pageNum!==undefined){\n    //       response = await axios.get('/api/exams?pageNum='+ pageNum);\n    //     }else {\n    //       response = await axios.get('/api/exams');\n    //     }\n    //     commit('setExams', response.data);\n    //   } catch (error) {\n    //     // 请求失败时，设置空数据\n    //     commit('setExams', []);\n    //   }\n    // },\n\n    async fetchExams({ commit }, dict) {\n      try {\n        console.log('dd', dict)\n\n        var pageNum = dict.pageNum;\n        var kind = dict.kind;\n        var response;\n        if(kind===\"all\"){\n          if (pageNum!==undefined){\n            response = await axios.get('/api/exams/student-name?pageNum='+ pageNum);\n          }else {\n            response = await axios.get('/api/exams');\n          }\n        }else if(kind==='pro'){\n          if (pageNum!==undefined){\n            response = await axios.get('/api/exams/student-name/in-progress?pageNum='+ pageNum);\n          }else {\n            response = await axios.get('/api/exams/student-name/in-progress');\n          }\n        }else if(kind==='unstart'){\n          if (pageNum!==undefined){\n            response = await axios.get('/api/exams/student-name/not-started?pageNum='+ pageNum);\n          }else {\n            response = await axios.get('/api/exams/student-name/not-started');\n          }\n        }else if(kind==='end'){\n          if (pageNum!==undefined){\n            response = await axios.get('/api/exams/student-name/finished?pageNum='+ pageNum);\n          }else {\n            response = await axios.get('/api/exams/student-name/finished');\n          }\n        }\n\n        commit('setExams', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setExams', []);\n      }\n    },\n\n    async fetchStudentExams({ commit }, dict) {\n      try {\n        console.log('ddd', dict)\n\n        var pageNum = dict.pageNum;\n        var kind = dict.kind;\n        var response;\n        console.log('dddd', kind)\n        if(kind===\"all\"){\n          if (pageNum!==undefined){\n            console.log('ddddd', kind)\n            response = await axios.get('/api/exams/student-name?pageNum='+ pageNum +'&&studentName='+ this.state.user.username);\n            console.log('ddddd', kind)\n          }else {\n            response = await axios.get('/api/exams'+'?studentName='+ this.state.user.username);\n          }\n        }else if(kind==='pro'){\n          if (pageNum!==undefined){\n            response = await axios.get('/api/exams/student-name/in-progress?pageNum='+ pageNum+'&&studentName='+ this.state.user.username);\n          }else {\n            response = await axios.get('/api/exams/student-name/in-progress'+'?studentName='+ this.state.user.username);\n          }\n        }else if(kind==='unstart'){\n          if (pageNum!==undefined){\n            response = await axios.get('/api/exams/student-name/not-started?pageNum='+ pageNum+'&&studentName='+ this.state.user.username);\n          }else {\n            response = await axios.get('/api/exams/student-name/not-started'+'?studentName='+ this.state.user.username);\n          }\n        }else if(kind==='end'){\n          if (pageNum!==undefined){\n            response = await axios.get('/api/exams/student-name/finished?pageNum='+ pageNum+'&&studentName='+ this.state.user.username);\n          }else {\n            response = await axios.get('/api/exams/student-name/finished'+'?studentName='+ this.state.user.username);\n          }\n        }\n\n        commit('setExams', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setExams', []);\n      }\n    },\n\n    // 创建新考试\n    async createExam({ commit }, exam) {\n      try {\n        const response = await axios.post('/api/exams', exam);\n        // commit('addExam', response.data);\n        // return {success:\"success\"};\n        return response.data;\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到考试列表\n        // commit('addExam', exam);\n        // return {success:\"error\"};\n        return error.response.data\n      }\n    },\n    // 提交考试\n    async submitExam(_, { examId, answers }) {\n      try {\n        await axios.post(`/api/exams/${examId}/submit`, { answers });\n      } catch (error) {\n        // 提交失败时，暂时不做处理\n      }\n    },\n    // 用户登录\n    async login({ commit }, credentials) {\n      try {\n        const response = await axios.post('/api/users/login', credentials);\n        commit('setUser', response.data);\n        return { success: true, role: response.data.role};\n      } catch (error) {\n        return { success: false, message: '账号或密码错误' };\n      }\n    }\n  },\n  getters: {\n    getExamQuestions(state) {\n      return state.examQuestions;\n    },\n    getExamAnswer: (state) => (questionId) => {\n      return state.examAnswers[questionId];\n    },\n    getAnsweredCount(state) {\n      return Object.keys(state.examAnswers).length;\n    }\n  }\n});\n\nexport default store;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}