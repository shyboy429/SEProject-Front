{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-65f9216f\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"form-row\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"form-group\"\n}, [/*#__PURE__*/_createElementVNode(\"label\", null, \"试卷管理\")], -1 /* HOISTED */));\nconst _hoisted_4 = {\n  class: \"form-group\"\n};\nconst _hoisted_5 = {\n  class: \"form-group\"\n};\nconst _hoisted_6 = {\n  class: \"form-group\"\n};\nconst _hoisted_7 = {\n  style: {\n    \"display\": \"flex\",\n    \"justify-content\": \"space-between\"\n  }\n};\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", {\n  style: {\n    \"color\": \"red\",\n    \"margin-right\": \"2px\"\n  }\n}, \"* \", -1 /* HOISTED */));\nconst _hoisted_9 = {\n  class: \"dialog-footer\"\n};\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"myChart\",\n  style: {\n    \"width\": \"650px\",\n    \"height\": \"300px\"\n  }\n}, null, -1 /* HOISTED */));\nconst _hoisted_11 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"myChart2\",\n  style: {\n    \"width\": \"650px\",\n    \"height\": \"300px\"\n  }\n}, null, -1 /* HOISTED */));\nconst _hoisted_12 = {\n  class: \"pagination\"\n};\nexport function render(_ctx, _cache) {\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_table_column = _resolveComponent(\"el-table-column\");\n  const _component_el_table = _resolveComponent(\"el-table\");\n  const _component_el_dialog = _resolveComponent(\"el-dialog\");\n  const _component_el_input = _resolveComponent(\"el-input\");\n  const _component_el_form_item = _resolveComponent(\"el-form-item\");\n  const _component_el_form = _resolveComponent(\"el-form\");\n  const _component_el_pagination = _resolveComponent(\"el-pagination\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_hoisted_3, _createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_el_button, {\n    disabled: _ctx.user.role !== 'ADMIN',\n    onClick: _cache[0] || (_cache[0] = $event => _ctx.warning('暂未开放')),\n    style: {\n      \"width\": \"80px\",\n      \"margin-left\": \"800px\"\n    }\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"自动组卷\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"disabled\"])]), _createElementVNode(\"div\", _hoisted_5, [_createVNode(_component_el_button, {\n    type: \"success\",\n    disabled: _ctx.user.role !== 'ADMIN',\n    plain: \"\",\n    onClick: _cache[1] || (_cache[1] = $event => {\n      _ctx.dialogTable2Visible = true;\n      _ctx.querySelected();\n    }),\n    style: {\n      \"width\": \"80px\"\n    }\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"已选试题\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"disabled\"])]), _createElementVNode(\"div\", _hoisted_6, [_createVNode(_component_el_button, {\n    type: \"primary\",\n    disabled: _ctx.user.role !== 'ADMIN',\n    onClick: _cache[2] || (_cache[2] = $event => _ctx.dialogFormVisible = true),\n    style: {\n      \"width\": \"80px\"\n    }\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"创建试卷\")]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"disabled\"])])]), _createCommentVNode(\" 表格数据绑定和默认宽度 \"), _createVNode(_component_el_table, {\n    data: _ctx.tableData,\n    style: {\n      \"width\": \"100%\",\n      \"margin-left\": \"3%\"\n    }\n  }, {\n    default: _withCtx(() => [_createCommentVNode(\" 每一个列，prop为主键，label为文案 \"), _createCommentVNode(\" 索引 \"), _createVNode(_component_el_table_column, {\n      type: \"index\",\n      width: \"50\"\n    }), _createVNode(_component_el_table_column, {\n      prop: \"title\",\n      label: \"试卷名称\",\n      width: \"200\",\n      \"header-align\": \"left\"\n    }), _createVNode(_component_el_table_column, {\n      prop: \"introduction\",\n      label: \"试卷介绍\",\n      width: \"200\",\n      \"header-align\": \"left\"\n    }), _createVNode(_component_el_table_column, {\n      prop: \"createTime\",\n      label: \"创建时间\",\n      width: \"200\",\n      \"header-align\": \"left\"\n    }), _createVNode(_component_el_table_column, {\n      prop: \"updateTime\",\n      label: \"修改时间\",\n      width: \"200\",\n      \"header-align\": \"left\"\n    }), _createVNode(_component_el_table_column, {\n      prop: \"createdBy\",\n      label: \"创建人\",\n      width: \"120\"\n    }), _createVNode(_component_el_table_column, {\n      label: \"操作\",\n      width: \"220\",\n      \"header-align\": \"center\",\n      \"header-cell-style\": {\n        paddingLeft: '0px'\n      }\n    }, {\n      default: _withCtx(scope => [_createElementVNode(\"div\", _hoisted_7, [_createVNode(_component_el_button, {\n        size: \"small\",\n        type: \"primary\",\n        onClick: $event => {\n          _ctx.dialogTableVisible = true;\n          _ctx.queryPaper(scope.$index, scope.row);\n        }\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"编辑\")]),\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"]), _createVNode(_component_el_button, {\n        size: \"small\",\n        type: \"danger\",\n        disabled: _ctx.user.username !== scope.row.createdBy && _ctx.user.role !== 'ADMIN',\n        onClick: $event => _ctx.handlePaperDelete(scope.$index, scope.row)\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"删除\")]),\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"disabled\", \"onClick\"]), _createVNode(_component_el_button, {\n        size: \"small\",\n        type: \"info\",\n        onClick: $event => {\n          this.dialogChartVisible = true;\n          _ctx.analysis(scope.$index, scope.row);\n        }\n      }, {\n        default: _withCtx(() => [_createTextVNode(\"试卷分析\")]),\n        _: 2 /* DYNAMIC */\n      }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"])])]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"data\"]), _createCommentVNode(\" <div class=\\\"questions-list\\\">\\n      <div class=\\\"pagination\\\">\\n        <button @click=\\\"prevPage\\\" :disabled=\\\"currentPage === 1\\\" style=\\\"padding: 5px 10px;\\\">上一页</button>\\n        <button @click=\\\"nextPage\\\" :disabled=\\\"currentPage === totalPages\\\" style=\\\"padding: 5px 10px;\\\">下一页</button>\\n      </div>\\n    </div> \"), _createVNode(_component_el_dialog, {\n    modelValue: _ctx.dialogTableVisible,\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => _ctx.dialogTableVisible = $event),\n    title: \"编辑试卷\",\n    width: \"950\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_table, {\n      data: _ctx.paperData\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_table_column, {\n        prop: \"question\",\n        label: \"问题\",\n        width: \"300\"\n      }), _createVNode(_component_el_table_column, {\n        prop: \"questionType\",\n        label: \"题型\",\n        width: \"180\"\n      }), _createVNode(_component_el_table_column, {\n        prop: \"tag\",\n        label: \"标签\",\n        width: \"180\"\n      }), _createVNode(_component_el_table_column, {\n        prop: \"difficulty\",\n        label: \"难度\",\n        width: \"120\"\n      }), _createVNode(_component_el_table_column, {\n        label: \"操作\",\n        width: \"120\",\n        \"header-align\": \"center\"\n      }, {\n        default: _withCtx(({\n          row\n        }) => [_createVNode(_component_el_button, {\n          type: \"primary\",\n          disabled: _ctx.user.role !== 'ADMIN',\n          link: \"\",\n          onClick: $event => _ctx.handleDelete(row),\n          style: {\n            \"text-align\": \"left\",\n            \"padding-left\": \"0px\"\n          }\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"移出试卷\")]),\n          _: 2 /* DYNAMIC */\n        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"disabled\", \"onClick\"])]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"data\"])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_el_dialog, {\n    modelValue: _ctx.dialogTable2Visible,\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.dialogTable2Visible = $event),\n    title: \"试题篮\",\n    width: \"950px\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_table, {\n      data: _ctx.selectedData\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_table_column, {\n        prop: \"question\",\n        label: \"问题\",\n        width: \"300\"\n      }), _createVNode(_component_el_table_column, {\n        prop: \"questionType\",\n        label: \"题型\",\n        width: \"180\"\n      }), _createVNode(_component_el_table_column, {\n        prop: \"tag\",\n        label: \"标签\",\n        width: \"180\"\n      }), _createVNode(_component_el_table_column, {\n        prop: \"difficulty\",\n        label: \"难度\",\n        width: \"120\"\n      }), _createVNode(_component_el_table_column, {\n        label: \"操作\",\n        width: \"120\",\n        \"header-align\": \"center\"\n      }, {\n        default: _withCtx(({\n          row\n        }) => [_createVNode(_component_el_button, {\n          type: \"primary\",\n          link: \"\",\n          onClick: $event => _ctx.handleCartDelete(row),\n          style: {\n            \"text-align\": \"left\",\n            \"padding-left\": \"0px\"\n          }\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"移出试卷\")]),\n          _: 2 /* DYNAMIC */\n        }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"onClick\"])]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"data\"])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"]), _createCommentVNode(\" 创建试卷的对话框 \"), _createVNode(_component_el_dialog, {\n    modelValue: _ctx.dialogFormVisible,\n    \"onUpdate:modelValue\": _cache[8] || (_cache[8] = $event => _ctx.dialogFormVisible = $event),\n    title: \"创建试卷\"\n  }, {\n    footer: _withCtx(() => [_createElementVNode(\"div\", _hoisted_9, [_createVNode(_component_el_button, {\n      type: \"primary\",\n      onClick: _ctx.savePaper\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"确认\")]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_el_button, {\n      onClick: _cache[7] || (_cache[7] = $event => _ctx.dialogFormVisible = false)\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"取消\")]),\n      _: 1 /* STABLE */\n    })])]),\n    default: _withCtx(() => [_createVNode(_component_el_form, {\n      model: _ctx.form\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_form_item, {\n        \"label-width\": _ctx.formLabelWidth\n      }, {\n        label: _withCtx(() => [_hoisted_8, _createTextVNode(\" 试卷名称 \")]),\n        default: _withCtx(() => [_createVNode(_component_el_input, {\n          modelValue: _ctx.form.title,\n          \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => _ctx.form.title = $event),\n          autocomplete: \"off\"\n        }, null, 8 /* PROPS */, [\"modelValue\"])]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"label-width\"]), _createVNode(_component_el_form_item, {\n        label: \"试卷介绍\",\n        \"label-width\": _ctx.formLabelWidth\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_input, {\n          modelValue: _ctx.form.introduction,\n          \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => _ctx.form.introduction = $event),\n          autocomplete: \"off\"\n        }, null, 8 /* PROPS */, [\"modelValue\"])]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"label-width\"])]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"model\"])]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_el_dialog, {\n    modelValue: _ctx.dialogChartVisible,\n    \"onUpdate:modelValue\": _cache[9] || (_cache[9] = $event => _ctx.dialogChartVisible = $event),\n    title: \"试卷分析\",\n    width: \"700px\",\n    style: {\n      \"margin-left\": \"33%\",\n      \"margin-top\": \"3%\"\n    }\n  }, {\n    default: _withCtx(() => [_hoisted_10, _hoisted_11]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"modelValue\"]), _createElementVNode(\"div\", _hoisted_12, [_createVNode(_component_el_pagination, {\n    \"page-size\": 10,\n    \"pager-count\": 11,\n    layout: \"prev, pager, next\",\n    total: _ctx.totalPages,\n    onCurrentChange: _ctx.handlePageChange\n  }, null, 8 /* PROPS */, [\"total\", \"onCurrentChange\"])])]);\n}","map":{"version":3,"names":["class","_createElementVNode","style","id","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_createVNode","_component_el_button","disabled","_ctx","user","role","onClick","_cache","$event","warning","default","_withCtx","_createTextVNode","_","_hoisted_5","type","plain","dialogTable2Visible","querySelected","_hoisted_6","dialogFormVisible","_createCommentVNode","_component_el_table","data","tableData","_component_el_table_column","width","prop","label","paddingLeft","scope","_hoisted_7","size","dialogTableVisible","queryPaper","$index","row","username","createdBy","handlePaperDelete","dialogChartVisible","analysis","_component_el_dialog","modelValue","title","paperData","link","handleDelete","selectedData","handleCartDelete","footer","_hoisted_9","savePaper","_component_el_form","model","form","_component_el_form_item","formLabelWidth","_hoisted_8","_component_el_input","autocomplete","introduction","_hoisted_10","_hoisted_11","_hoisted_12","_component_el_pagination","layout","total","totalPages","onCurrentChange","handlePageChange"],"sources":["C:\\Users\\86139\\Desktop\\SEProject-front\\src\\components\\PaperManagement.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"form-row\">\n      <div class=\"form-group\">\n        <label>试卷管理</label>\n      </div>\n      <div class=\"form-group\">\n        <el-button :disabled=\"(user.role !== 'ADMIN')\" @click=\"warning('暂未开放')\" style=\"width: 80px; margin-left: 800px;\">自动组卷</el-button>\n      </div>\n      <div class=\"form-group\">\n        <el-button type=\"success\" :disabled=\"(user.role !== 'ADMIN')\" plain @click=\"dialogTable2Visible = true; querySelected()\" style=\"width: 80px;\">已选试题</el-button>\n      </div>\n      <div class=\"form-group\">\n        <el-button type=\"primary\" :disabled=\"(user.role !== 'ADMIN')\" @click=\"dialogFormVisible = true\" style=\"width: 80px;\">创建试卷</el-button>\n      </div>\n    </div>\n\n    <!-- 表格数据绑定和默认宽度 -->\n    <el-table :data=\"tableData\" style=\"width: 100%; margin-left: 3%;\">\n      <!-- 每一个列，prop为主键，label为文案 -->\n      <!-- 索引 -->\n      <el-table-column type=\"index\" width=\"50\"></el-table-column>\n      <el-table-column prop=\"title\" label=\"试卷名称\" width=\"200\" header-align=\"left\"></el-table-column>\n      <el-table-column prop=\"introduction\" label=\"试卷介绍\" width=\"200\" header-align=\"left\"></el-table-column>\n      <el-table-column prop=\"createTime\" label=\"创建时间\" width=\"200\" header-align=\"left\"></el-table-column>\n      <el-table-column prop=\"updateTime\" label=\"修改时间\" width=\"200\" header-align=\"left\"></el-table-column>\n      <el-table-column prop=\"createdBy\" label=\"创建人\" width=\"120\"></el-table-column>\n      <el-table-column label=\"操作\" width=\"220\" header-align=\"center\" :header-cell-style=\"{ paddingLeft: '0px' }\">\n        <template #default=\"scope\">\n          <div style=\"display: flex; justify-content: space-between;\">\n            <el-button size=\"small\" type=\"primary\"  @click=\"dialogTableVisible = true; queryPaper(scope.$index, scope.row)\">编辑</el-button>\n            <el-button size=\"small\" type=\"danger\" :disabled=\"(user.username !== scope.row.createdBy)&&(user.role!=='ADMIN')\" @click=\"handlePaperDelete(scope.$index, scope.row)\">删除</el-button>\n            <el-button size=\"small\" type=\"info\" @click=\"this.dialogChartVisible = true; analysis(scope.$index, scope.row); \">试卷分析</el-button>\n          </div>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <!-- <div class=\"questions-list\">\n      <div class=\"pagination\">\n        <button @click=\"prevPage\" :disabled=\"currentPage === 1\" style=\"padding: 5px 10px;\">上一页</button>\n        <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\" style=\"padding: 5px 10px;\">下一页</button>\n      </div>\n    </div> -->\n\n\n    <el-dialog v-model=\"dialogTableVisible\" title=\"编辑试卷\" width=\"950\">\n      <el-table :data=\"paperData\">\n        <el-table-column prop=\"question\" label=\"问题\" width=\"300\"></el-table-column>\n        <el-table-column prop=\"questionType\" label=\"题型\" width=\"180\"></el-table-column>\n        <el-table-column prop=\"tag\" label=\"标签\" width=\"180\"></el-table-column>\n        <el-table-column prop=\"difficulty\" label=\"难度\" width=\"120\"></el-table-column>\n        <el-table-column label=\"操作\" width=\"120\" header-align=\"center\">\n        <template #default=\"{ row }\">\n          <el-button type=\"primary\" :disabled=\"(user.role !== 'ADMIN')\" link @click=\"handleDelete(row)\" style=\"text-align: left;padding-left: 0px;\">移出试卷</el-button>\n        </template>\n      </el-table-column>\n      </el-table>\n    </el-dialog>\n\n    <el-dialog v-model=\"dialogTable2Visible\" title=\"试题篮\" width=\"950px\">\n      <el-table :data=\"selectedData\" >\n        <el-table-column prop=\"question\" label=\"问题\" width=\"300\"></el-table-column>\n        <el-table-column prop=\"questionType\" label=\"题型\" width=\"180\"></el-table-column>\n        <el-table-column prop=\"tag\" label=\"标签\" width=\"180\"></el-table-column>\n        <el-table-column prop=\"difficulty\" label=\"难度\" width=\"120\"></el-table-column>\n        <el-table-column label=\"操作\" width=\"120\" header-align=\"center\">\n        <template #default=\"{ row }\">\n          <el-button type=\"primary\" link @click=\"handleCartDelete(row)\" style=\"text-align: left;padding-left: 0px;\">移出试卷</el-button>\n        </template>\n        </el-table-column>\n      </el-table>\n    </el-dialog>\n\n    <!-- 创建试卷的对话框 -->\n    <el-dialog v-model=\"dialogFormVisible\" title=\"创建试卷\">\n      <el-form :model=\"form\"  >\n        \n        <el-form-item  :label-width=\"formLabelWidth\">\n                <template #label>\n        <span style=\"color: red; margin-right:2px\">* </span> 试卷名称\n      </template>\n          <el-input v-model=\"form.title\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"试卷介绍\" :label-width=\"formLabelWidth\">\n          <el-input v-model=\"form.introduction\" autocomplete=\"off\" />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <div class=\"dialog-footer\">\n          <el-button type=\"primary\" @click=\"savePaper\">确认</el-button>\n          <el-button @click=\"dialogFormVisible = false\">取消</el-button>\n        </div>\n      </template>\n    </el-dialog>\n\n    <el-dialog v-model=\"dialogChartVisible\" title=\"试卷分析\" width=\"700px\" style=\"margin-left:33%; margin-top:3% \">\n        <div id=\"myChart\" style=\"width: 650px; height: 300px;\"></div>\n        <div id=\"myChart2\" style=\"width: 650px; height: 300px;\"></div>\n    \n    </el-dialog>\n\n    <div class=\"pagination\">\n        <el-pagination\n      :page-size=\"10\"\n      :pager-count=\"11\"\n      layout=\"prev, pager, next\"\n      :total=\"totalPages\"\n      @current-change=\"handlePageChange\"\n    />\n    </div>\n  </div>\n</template>\n<script>\nimport { mapActions, mapState } from 'vuex';\nimport { ElMessage } from 'element-plus';\nimport * as echarts from 'echarts';\n\nexport default {\n  name: 'PaperManagement',\n  data() {\n    return {\n      dialogFormVisible: false,\n      dialogTableVisible: false,\n      chart: null,\n      dialogChartVisible: false,\n      dialogTable2Visible: false,\n      paper_id: 0,\n      formLabelWidth: '140px',\n      form: {\n        title: '',\n        introduction: '',\n        createdBy: '',\n        createTime: '',\n        updateTime: '',\n      },\n      searchKeyword: '',\n      filterQuestionType: '',\n      filterDifficulty: '',\n      currentPage: 1,\n      pageSize: 5,\n    //   tableData: [\n    //     { \n    //       title: '这是一个假问题?',\n    //       introduction: '选择题',\n    //       createTime: '2024-06-03',\n    //       updateTime: '2024-06-03',\n    //       createdBy: \"小张\",\n    //       id: 5\n    //     }\n    //   ],\n    //   paperData: [\n    //     { \n    //       question: '这是一个假问题?',\n    //       questionType: '选择题',\n    //       tag: '物理',\n    //       difficulty: '中等',\n    //       analysis: '这是一个问题的解析',\n    //       createdBy: \"小张\",\n    //       id: 5\n    //     }\n    //   ]\n    };\n  },\n  computed: {\n      ...mapState(['papers', 'paper', 'paperQuestions', 'user', 'papersPages']),\n      totalPages() {\n      return this.papersPages ;\n      console.log(\"this\", this.questionsPages);\n      return 1000;\n    },\n    tableData() {\n      return this.papers.map(paper => ({\n        title: paper.title,\n        introduction: paper.introduction,\n        createTime: paper.createTime,\n        updateTime: paper.updateTime,\n        createdBy: paper.createdBy,\n        id: paper.id,\n      }));\n      },\n        paperData() {\n      return this.paperQuestions.map(question => ({\n        question: question.description,\n        questionType: question.type,\n        tag: question.tag,\n        difficulty: question.difficultLevel,\n        analysis: question.analysis,\n        id: question.id,\n        createdBy: question.createdBy,\n      }));\n    },\n    selectedData() {\n      return this.paper.map(question => ({\n        question: question.question,\n        questionType: question.questionType,\n        tag: question.tag,\n        difficulty: question.difficulty,\n        id: question.id,\n        analysis: question.analysis,\n        createdBy: question.createdBy,\n      }));\n    },\n  },\n  methods: {\n    ...mapActions(['fetchPapers', 'addPaper', 'addQuestionToPaper', 'removeFromPaper', 'fetchPaperQuestion', 'updatePaperQuestions', 'deletePaper', 'fetchPapersPages']),\n\n\n    automaticPaper() {\n      // 自动组卷的逻辑\n    },\n    // addPaper() {\n    //   this.dialogFormVisible = true;\n      // },\n    //   async ab() {\n    //       setTimeout(() => {\n        \n        \n    //   }, 300);\n        \n    },\n    async savePaper() {\n      const currentDateTime = new Date().toISOString().slice(0, 19).replace('T', ' ');\n      this.form.createTime = currentDateTime;\n      this.form.updateTime = currentDateTime;\n\n      this.tableData.push({ ...this.form, id: this.tableData.length + 1 });\n\n      // 遍历 this.paper 并提取每个 question 的 id\n      const content = this.paper.map(item => item.id).join(' ');\n\n      const newPaper = {\n        title: this.form.title,\n        introduction: this.form.introduction,\n        createdBy: this.user.username,\n        createTime: this.form.createTime,\n        updateTime: this.form.updateTime,\n        // 改！\n        content: content,\n        id: \"\"\n      };\n      const result = await this.addPaper(newPaper);\n      this.dialogFormVisible = false;\n      this.form = {\n        title: '',\n        introduction: '',\n        createdBy: '',\n        createTime: '',\n        updateTime: ''\n      };\n      await this.fetchPapers(this.currentPage);\n      if (!result.success){\n          this.success('创建成功');\n      } else {\n        this.error(result.error);\n      }\n      this.fetchPapersPages();\n    },\n    composePaper(index, row) {\n      const questionId = row.id; // 获取 question id\n      this.addQuestionToPaper(questionId);\n      console.log('组卷操作:', questionId);\n    },\n    handleCartDelete( row) {\n      const questionId = row.id; // 获取 question id\n      console.log(row.id);\n      this.removeFromPaper(questionId);\n      // this.paper = this.paper.filter(item => item.id !== row.id);\n      console.log(this.paper);\n        ElMessage({\n        message: '移除成功',\n        type: 'success',\n        customClass: 'custom-message-class',\n        duration: 3000,\n        showClose: true\n      });\n    },\n    querySelected() {\n      if (this.paper.length === 0) {\n        this.selectedData = [];\n      } else {\n        this.selectedData = this.paper.map(question => ({\n          question: question.question,\n          questionType: question.questionType,\n          tag: question.tag,\n          difficulty: question.difficulty,\n          analysis: question.analysis,\n          createdBy: question.createdBy,\n          id: question.id\n        }));\n      }\n    },\n    \n    queryPaper(index, row) {\n      console.log('query');\n      const paperId = row.id; // 获取 question id\n      this.paper_id = row.id;\n      console.log('query');\n      this.fetchPaperQuestion(paperId);\n      console.log('查看试卷:', paperId);\n    },\n    async handlePaperDelete(index, row){\n      const paperId = row.id; // 获取 question id\n      const result = await this.deletePaper(paperId);\n      if (result.success!=='error'){\n          this.success('删除成功');\n      } else {\n        this.error(result.error);\n      }\n      await this.fetchPapersPages();\n      this.fetchPapers(this.currentPage);\n    },\n    async analysis(index, row){\n      await this.queryPaper(index, row);\n      this.initChart();\n    },\n    async handleDelete(row) {\n      console.log(this.paper_id)\n      const paperID = this.paper_id\n\n      console.log(row);\n      const result = await this.updatePaperQuestions({'paperid':paperID, 'questionid':row.id});\n      this.fetchPapers(this.currentPage);\n      if (result.success!=='error'){\n          this.success('删除成功');\n      } else {\n        this.error(result.error);\n      }\n    },\n    // handleDelete(index, row) {\n    //   this.tableData.splice(index, 1);\n    // },\n    // handleEdit(index, row) {\n    //   // 编辑试卷的逻辑\n    // },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage -= 1;\n      }\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage += 1;\n      }\n    },\n    \n\n    success(ms){\n      ElMessage({\n        message: ms,\n        type: 'success',\n        customClass: 'custom-message-class',\n        duration: 3000,\n        showClose: true\n      });\n    },\n    warning(ms){\n      ElMessage({\n        message: ms,\n        type: 'warning',\n        customClass: 'custom-message-class',\n        duration: 3000,\n        showClose: true\n      });\n    },\n    error(ms){\n      ElMessage({\n        message: ms,\n        type: 'error',\n        customClass: 'custom-message-class',\n        duration: 3000,\n        showClose: true\n      });\n    },\n\n    initChart() {\n      this.$nextTick(() => {\n        console.log(this.paperQuestions);\n      this.chart = echarts.init(document.getElementById('myChart'));\n\n      // 计算每种类型的数量\n      const typeCounts = this.paperQuestions.reduce((acc, item) => {\n        acc[item.type] = (acc[item.type] || 0) + 1;\n        return acc;\n      }, {});\n\n      // 将计算结果转换为 ECharts 数据格式\n      const data = Object.keys(typeCounts).map(type => {\n        return { value: typeCounts[type], name: type };\n      });\n\n      const option = {\n        title: {\n          text: '题目类型占比图:',\n          left: 'left'\n        },\n        tooltip: {\n          trigger: 'item',\n          formatter: '{a} <br/>{b} : {c} ({d}%)'\n        },\n        legend: {\n          type: 'scroll',\n          orient: 'vertical',\n          right: 0,\n          top: 'center',\n          icon: 'circle',\n          selectedMode: 'multiple',\n          formatter: (name) => {\n            let total = data.reduce((sum, item) => sum + item.value, 0);\n            let item = data.find(item => item.name === name);\n            let p = (item.value / total * 100).toFixed(2);\n            return `${name}  |  ${p}%`;\n          }\n        },\n        series: [\n          {\n            name: '题目类型占比',\n            type: 'pie',\n            radius: '60%',\n            center: ['45%', '55%'],\n            selectedMode: 'single',\n            data: data,\n            label: {\n              show: true,\n              formatter: '{b}: {c} ({d}%)'\n            },\n            itemStyle: {\n              emphasis: {\n                shadowBlur: 10,\n                shadowOffsetX: 0,\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\n              }\n            }\n          }\n        ]\n      };\n\n      this.chart.setOption(option);\n\n    this.chart2 = echarts.init(document.getElementById('myChart2'));\n\n    // 计算每种难度的数量\n    const difficultyCounts = this.paperQuestions.reduce((acc, item) => {\n      acc[item.difficultLevel] = (acc[item.difficultLevel] || 0) + 1;\n      return acc;\n    }, {});\n\n    // 将计算结果转换为 ECharts 数据格式\n    const data2 = Object.keys(difficultyCounts).map(difficultLevel => {\n      return { value: difficultyCounts[difficultLevel], name: difficultLevel };\n    });\n\n    const option2 = {\n      title: {\n        text: '题目难度占比图:',\n        left: 'left'\n      },\n      tooltip: {\n        trigger: 'item',\n        formatter: '{a} <br/>{b} : {c} ({d}%)'\n      },\n      legend: {\n        type: 'scroll',\n        orient: 'vertical',\n        right: 0,\n        top: 'center',\n        icon: 'circle',\n        selectedMode: 'multiple',\n        formatter: (name) => {\n          let total = data2.reduce((sum, item) => sum + item.value, 0);\n          let item = data2.find(item => item.name === name);\n          let p = (item.value / total * 100).toFixed(2);\n          return `${name}  |  ${p}%`;\n        }\n      },\n      series: [\n        {\n          name: '题目难度占比',\n          type: 'pie',\n          radius: '60%',\n          center: ['45%', '55%'],\n          selectedMode: 'single',\n          data: data2,\n          label: {\n            show: true,\n            formatter: '{b}: {c} ({d}%)'\n          },\n          itemStyle: {\n            emphasis: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\n            }\n          }\n        }\n      ]\n    };\n\n    this.chart2.setOption(option2);\n\n    window.addEventListener('resize', () => {\n      this.chart.resize();\n      this.chart2.resize();\n    });\n      });\n    },\n  handlePageChange(page) {\n      console.log('Page changed to:', page); // 日志记录当前页码\n      this.currentPage = page;\n      this.fetchPapers(page); // 触发 Vuex action 以获取新页数据\n  },\n  },\n  mounted() {\n    this.fetchPapers(this.currentPage);\n    this.fetchPapersPages();\n  }\n};\n</script>\n\n\n\n<style scoped>\n.container {\n  flex: 1;\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  overflow: auto;\n  display: flex;\n  flex-direction: column;\n}\n.form-row {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 15px;\n  margin-left: 1px;\n}\n.required {\n  color: red;\n}\n.form-group {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  margin: 0 15px;\n}\n.el-button{\n  /* 增加按钮间距 */\n  margin-left: 12px;\n}\nform {\n  background: white;\n  padding: 2rem;\n  border-radius: 5px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\nform div {\n  margin-bottom: 1rem;\n}\n\n/* button {\n  width: 100%;\n  padding: 0.5rem;\n  background: #1890ff;\n  border: none;\n  color: white;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background: #40a9ff;\n} */\n\n.alert {\n  margin-top: 1rem;\n  padding: 1rem;\n  background: #f8d7da;\n  color: #721c24;\n  border: 1px solid #f5c6cb;\n  border-radius: 5px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.pagination {\n  position: absolute;\n  bottom: 40px; /* 距离底部的距离 */\n  left: 58%; /* 水平居中 */\n  transform: translateX(-50%); /* 水平居中 */\n  display: flex;\n    justify-content: center;\n  align-items: center;\n  /* justify-content: space-between; */\n  width: 200px; /* 指定pagination的宽度 */\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}