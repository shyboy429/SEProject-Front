{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* eslint-disable no-unused-vars */\n\nimport { createStore } from 'vuex';\nimport axios from 'axios';\n\n// 设置 Axios 基地址\naxios.defaults.baseURL = 'http://localhost:8181';\nconst store = createStore({\n  state: {\n    questions: [],\n    // 存储题目列表\n    paperQuestions: [],\n    examQuestions: [],\n    examAnswers: {},\n    paper: [],\n    papers: [],\n    examInfo: null,\n    exams: [],\n    // 存储考试列表\n    question: [],\n    questionsPages: 1,\n    papersPages: 1,\n    examsPages: 1,\n    totalCount2: 0,\n    user: null // 存储当前登录用户\n  },\n  mutations: {\n    setExamAnswer(state, {\n      questionId,\n      answer\n    }) {\n      state.examAnswers[questionId] = answer;\n    },\n    // 设置题目列表\n    setPapers(state, papers) {\n      state.papers = papers;\n    },\n    setExams(state, exams) {\n      state.exams = exams;\n    },\n    addPaper(state, paper) {\n      state.papers.push(paper);\n      state.paper = [];\n    },\n    removePaper(state, paperId) {\n      state.papers = state.papers.filter(paper => paper.id !== paperId);\n    },\n    addQuestionToPaper(state, question) {\n      console.log(\"hello\");\n      // if (!state.paper.includes(question)) {\n      state.paper.push(question);\n      // }\n    },\n    removeQuestionFromPaper(state, questionId) {\n      console.log(\"hh\");\n      state.paper = state.paper.filter(item => item.id !== questionId);\n    },\n    setPaperQuestions(state, questions) {\n      state.paperQuestions = questions;\n    },\n    setExamQuestions(state, questions) {\n      state.examQuestions = questions;\n    },\n    setExamInfo(state, row) {\n      state.examInfo = row;\n    },\n    // 设置题目列表\n    setQuestion(state, question) {\n      state.question = [];\n      state.question.push(question);\n    },\n    setQuestions(state, questions) {\n      state.questions = questions;\n    },\n    // 添加新题目\n    addQuestion(state, question) {\n      state.questions.push(question);\n    },\n    // 设置考试列表\n    // setExams(state, exams) {\n    //   state.exams = exams;\n    // },\n    // 添加新考试\n    addExam(state, exam) {\n      state.exams.push(exam);\n    },\n    // 设置当前用户\n    setUser(state, user) {\n      state.user = user;\n    },\n    setQuestionsPages(state, pagenum) {\n      state.questionsPages = pagenum;\n    },\n    setPapersPages(state, pagenum) {\n      state.papersPages = pagenum;\n    },\n    setExamsPages(state, pagenum) {\n      state.examsPages = pagenum;\n    },\n    add() {}\n  },\n  actions: {\n    removeFromPaper({\n      commit\n    }, id) {\n      commit('removeQuestionFromPaper', id);\n    },\n    async submitExamAnswer({\n      commit\n    }, answer) {\n      try {\n        // console.log(id);\n        // console.log('update');\n        let postData = [];\n        console.log(\"info:\", this.state.examInfo);\n        // 遍历 answer 对象，构建每个题目的数据格式\n        Object.keys(answer).forEach(questionId => {\n          let data = {\n            id: \"\",\n            // 通常是提交后服务器返回的答案记录的唯一标识符\n            studentName: this.state.user.username,\n            // 学生姓名，这里可以根据实际情况传入\n            examId: this.state.examInfo.examId,\n            // 考试的唯一标识符\n            questionId: questionId,\n            // 题目的唯一标识符，对应数据库中的Id\n            studentAnswer: answer[questionId],\n            // 学生的答案，根据传入的 answer 对象取值\n            grade: \"0\" // 初始分数为0，如果需要评分功能可以后续修改\n          };\n          postData.push(data);\n        });\n        console.log(postData);\n        const response = await axios.post('/api/answer-record/submit-answer', postData);\n        // const response2 = await axios.get('/api/papers');\n        // commit('setPapers', response2.data);\n        // commit('add');\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        // commit('add');\n      }\n    },\n    async deletePaper({\n      commit\n    }, PaperID) {\n      try {\n        // console.log(id);\n        console.log('update');\n        const response = await axios.delete('/api/papers/' + PaperID);\n        // const response2 = await axios.get('/api/papers');\n        // commit('setPapers', response2.data);\n        commit('add');\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('add');\n      }\n    },\n    async updatePaperQuestions({\n      commit\n    }, dict) {\n      try {\n        // console.log(id);\n        console.log('update');\n        const response = await axios.post('/api/papers/' + dict.paperid + '/question/' + dict.questionid);\n        commit('setPaperQuestions', response.data);\n        // const response2 = await axios.get('/api/papers');\n        // commit('setPapers', response2.data);\n        commit('add');\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('add');\n      }\n    },\n    async deleteQuestion({\n      commit\n    }, id) {\n      try {\n        console.log(id);\n        console.log('delete');\n        const response = await axios.delete('/api/questions/' + id);\n        // const response2= await axios.get('/api/questions');\n        // commit('setQuestions', response2.data);\n        commit('add');\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('add');\n      }\n    },\n    async updateQuestion({\n      commit\n    }, form) {\n      try {\n        console.log(form.id);\n        const response = await axios.post('/api/questions/' + form.id, form.question);\n        commit('add');\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('add');\n      }\n    },\n    async fetchPaperQuestion({\n      commit\n    }, id) {\n      try {\n        const response = await axios.get('/api/papers/admin/' + id);\n        commit('setPaperQuestions', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setPaperQuestions', []);\n      }\n    },\n    async fetchExamQuestion({\n      commit\n    }, id) {\n      try {\n        console.log(\"id:\", id);\n        const response = await axios.get('/api/papers/exam-paper/' + id[0]);\n        // var d2 = {};\n        // d2['id'] = response.data['questionId'];\n        // d2['type'] = response.data['questionType'];\n        // d2['description'] = response.data['specificContent'];\n        commit('setExamQuestions', response.data);\n        console.log(\"rrrrrrrrrrrr:\", id[1]);\n        commit('setExamInfo', id[1]);\n        console.log('examInfo:', this.state.examInfo);\n        this.state.totalCount2 = response.data.length;\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setExamQuestions', []);\n      }\n    },\n    // 获取paper列表\n    async fetchPapers({\n      commit\n    }, pageNum) {\n      try {\n        var response;\n        if (pageNum !== undefined) {\n          response = await axios.get('/api/papers?pageNum=' + pageNum);\n        } else {\n          response = await axios.get('/api/papers');\n        }\n        commit('setPapers', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setPapers', []);\n      }\n    },\n    // 获取题目列表\n    async fetchFileteredQuestion({\n      commit\n    }, id) {\n      try {\n        const response = await axios.get(`/api/questions/` + id);\n        commit('setQuestion', response.data); // Assuming you have a Vuex store\n      } catch (error) {\n        // Handle request failure\n        commit('setQuestion', []);\n      }\n    },\n    // 获取题目列表\n    async fetchFileteredQuestions({\n      commit\n    }, params) {\n      try {\n        // Construct query string from params\n        const queryString = Object.keys(params).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`).join('&');\n        const response = await axios.get(`/api/questions/search?${queryString}`);\n        // commit('setQuestions', response.data); // Assuming you have a Vuex store\n        commit('setQuestionsPages', response.data.length);\n      } catch (error) {\n        // Handle request failure\n        // commit('setQuestions', []);\n      }\n    },\n    // 获取题目列表\n    async fetchQuestions({\n      commit\n    }, params) {\n      try {\n        // Construct query string from params\n        const queryString = Object.keys(params).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`).join('&');\n        const response = await axios.get(`/api/questions/search?${queryString}`);\n        commit('setQuestions', response.data); // Assuming you have a Vuex store\n        // return (len(response.data));\n      } catch (error) {\n        // Handle request failure\n        commit('setQuestions', []);\n      }\n    },\n    // // 获取题目列表\n    // async fetchQuestions({ commit }, pageNum) {\n    //   try {\n    //     var response;\n    //     if (pageNum!==undefined){\n    //       response = await axios.get('/api/questions/?pageNum='+ pageNum);\n    //     }else {\n    //       response = await axios.get('/api/questions');\n    //     }\n\n    //     commit('setQuestions', response.data);\n    //   } catch (error) {\n    //     // 请求失败时，设置空数据\n    //     commit('setQuestions', []);\n    //   }\n    // },\n    async fetchQuestionsPages({\n      commit\n    }) {\n      try {\n        const response = await axios.get('/api/questions/pageNum');\n        const totalPages = parseInt(response.data, 10); // 将 response.data 转换为整数\n        console.log('Fetched questions pages:', totalPages); // 日志记录转换后的整数值\n        console.log(response.data);\n        commit('setQuestionsPages', response.data);\n        console.log('pages:', this.state.questionsPages);\n      } catch (error) {\n        console.error('Failed to fetch questions pages:', error); // Add log\n        commit('setQuestionsPages', 1);\n      }\n    },\n    async fetchPapersPages({\n      commit\n    }) {\n      try {\n        const response = await axios.get('/api/papers/pageNum');\n        commit('setPapersPages', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setPapersPages', 1);\n      }\n    },\n    async fetchExamPages({\n      commit\n    }, kind) {\n      try {\n        var response;\n        if (kind === 'all') {\n          response = await axios.get('/api/exams/page-num');\n        } else if (kind === 'unstart') {\n          response = await axios.get('/api/exams/not-started/page-num');\n        } else if (kind === 'pro') {\n          response = await axios.get('/api/exams/in-progress/page-num');\n        } else if (kind === 'end') {\n          response = await axios.get('/api/exams/finished/page-num');\n        }\n        commit('setExamsPages', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setExamsPages', 1);\n      }\n    },\n    async addPaper({\n      commit\n    }, paper) {\n      try {\n        const response = await axios.post('/api/papers', paper);\n        // commit('addPaper', response.data);\n        return {\n          success: \"success\"\n        };\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        // commit('addPaper', paper);\n        return {\n          success: \"error\"\n        };\n      }\n    },\n    // 添加新题目\n    async addQuestion({\n      commit\n    }, question) {\n      try {\n        const response = await axios.post('/api/questions', question);\n        commit('addQuestion', response.data);\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('addQuestion', question);\n      }\n    },\n    // 获取考试列表\n    // async fetchExams({ commit }) {\n    //   try {\n    //     const response = await axios.get('/api/exams');\n    //     commit('setExams', response.data);\n    //   } catch (error) {\n    //     // 请求失败时，设置空数据\n    //     commit('setExams', []);\n    //   }\n    // },\n    // async fetchExams({ commit }, pageNum) {\n    //   try {\n    //     var response;\n    //     if (pageNum!==undefined){\n    //       response = await axios.get('/api/exams?pageNum='+ pageNum);\n    //     }else {\n    //       response = await axios.get('/api/exams');\n    //     }\n    //     commit('setExams', response.data);\n    //   } catch (error) {\n    //     // 请求失败时，设置空数据\n    //     commit('setExams', []);\n    //   }\n    // },\n\n    async fetchExams({\n      commit\n    }, dict) {\n      try {\n        console.log('dd', dict);\n        var pageNum = dict.pageNum;\n        var kind = dict.kind;\n        var response;\n        if (kind === \"all\") {\n          if (pageNum !== undefined) {\n            response = await axios.get('/api/exams/student-name?pageNum=' + pageNum);\n          } else {\n            response = await axios.get('/api/exams');\n          }\n        } else if (kind === 'pro') {\n          if (pageNum !== undefined) {\n            response = await axios.get('/api/exams/student-name/in-progress?pageNum=' + pageNum);\n          } else {\n            response = await axios.get('/api/exams/student-name/in-progress');\n          }\n        } else if (kind === 'unstart') {\n          if (pageNum !== undefined) {\n            response = await axios.get('/api/exams/student-name/not-started?pageNum=' + pageNum);\n          } else {\n            response = await axios.get('/api/exams/student-name/not-started');\n          }\n        } else if (kind === 'end') {\n          if (pageNum !== undefined) {\n            response = await axios.get('/api/exams/student-name/finished?pageNum=' + pageNum);\n          } else {\n            response = await axios.get('/api/exams/student-name/finished');\n          }\n        }\n        commit('setExams', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setExams', []);\n      }\n    },\n    async fetchStudentExams({\n      commit\n    }, dict) {\n      try {\n        console.log('ddd', dict);\n        var pageNum = dict.pageNum;\n        var kind = dict.kind;\n        var response;\n        console.log('dddd', kind);\n        if (kind === \"all\") {\n          if (pageNum !== undefined) {\n            console.log('ddddd', kind);\n            response = await axios.get('/api/exams/student-name?pageNum=' + pageNum + '&&studentName=' + this.state.user.username);\n            console.log('ddddd', kind);\n          } else {\n            response = await axios.get('/api/exams' + '?studentName=' + this.state.user.username);\n          }\n        } else if (kind === 'pro') {\n          if (pageNum !== undefined) {\n            response = await axios.get('/api/exams/student-name/in-progress?pageNum=' + pageNum + '&&studentName=' + this.state.user.username);\n          } else {\n            response = await axios.get('/api/exams/student-name/in-progress' + '?studentName=' + this.state.user.username);\n          }\n        } else if (kind === 'unstart') {\n          if (pageNum !== undefined) {\n            response = await axios.get('/api/exams/student-name/not-started?pageNum=' + pageNum + '&&studentName=' + this.state.user.username);\n          } else {\n            response = await axios.get('/api/exams/student-name/not-started' + '?studentName=' + this.state.user.username);\n          }\n        } else if (kind === 'end') {\n          if (pageNum !== undefined) {\n            response = await axios.get('/api/exams/student-name/finished?pageNum=' + pageNum + '&&studentName=' + this.state.user.username);\n          } else {\n            response = await axios.get('/api/exams/student-name/finished' + '?studentName=' + this.state.user.username);\n          }\n        }\n        commit('setExams', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setExams', []);\n      }\n    },\n    // 创建新考试\n    async createExam({\n      commit\n    }, exam) {\n      try {\n        const response = await axios.post('/api/exams', exam);\n        // commit('addExam', response.data);\n        return {\n          success: \"success\"\n        };\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到考试列表\n        // commit('addExam', exam);\n        return {\n          success: \"error\"\n        };\n      }\n    },\n    // 提交考试\n    async submitExam(_, {\n      examId,\n      answers\n    }) {\n      try {\n        await axios.post(`/api/exams/${examId}/submit`, {\n          answers\n        });\n      } catch (error) {\n        // 提交失败时，暂时不做处理\n      }\n    },\n    // 用户登录\n    async login({\n      commit\n    }, credentials) {\n      try {\n        const response = await axios.post('/api/users/login', credentials);\n        commit('setUser', response.data);\n        return {\n          success: true,\n          role: response.data.role\n        };\n      } catch (error) {\n        return {\n          success: false,\n          message: error.response ? error.response.data.message : '网络错误'\n        };\n      }\n    }\n  },\n  async register({\n    commit\n  }, {\n    id,\n    username,\n    password,\n    role\n  }) {\n    try {\n      const response = await axios.post('/api/users/register', {\n        id,\n        username,\n        password,\n        role\n      });\n      commit('setUser', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('注册失败：', error);\n      throw new Error('Registration failed');\n    }\n  },\n  getters: {\n    getExamQuestions(state) {\n      return state.examQuestions;\n    },\n    getExamAnswer: state => questionId => {\n      return state.examAnswers[questionId];\n    },\n    getAnsweredCount(state) {\n      return Object.keys(state.examAnswers).length;\n    }\n  }\n});\nexport default store;","map":{"version":3,"names":["createStore","axios","defaults","baseURL","store","state","questions","paperQuestions","examQuestions","examAnswers","paper","papers","examInfo","exams","question","questionsPages","papersPages","examsPages","totalCount2","user","mutations","setExamAnswer","questionId","answer","setPapers","setExams","addPaper","push","removePaper","paperId","filter","id","addQuestionToPaper","console","log","removeQuestionFromPaper","item","setPaperQuestions","setExamQuestions","setExamInfo","row","setQuestion","setQuestions","addQuestion","addExam","exam","setUser","setQuestionsPages","pagenum","setPapersPages","setExamsPages","add","actions","removeFromPaper","commit","submitExamAnswer","postData","Object","keys","forEach","data","studentName","username","examId","studentAnswer","grade","response","post","error","deletePaper","PaperID","delete","updatePaperQuestions","dict","paperid","questionid","deleteQuestion","updateQuestion","form","fetchPaperQuestion","get","fetchExamQuestion","length","fetchPapers","pageNum","undefined","fetchFileteredQuestion","fetchFileteredQuestions","params","queryString","map","key","encodeURIComponent","join","fetchQuestions","fetchQuestionsPages","totalPages","parseInt","fetchPapersPages","fetchExamPages","kind","success","fetchExams","fetchStudentExams","createExam","submitExam","_","answers","login","credentials","role","message","register","password","Error","getters","getExamQuestions","getExamAnswer","getAnsweredCount"],"sources":["C:/Users/86139/Desktop/demo_vue/src/store/index.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\n\nimport { createStore } from 'vuex';\nimport axios from 'axios';\n\n// 设置 Axios 基地址\naxios.defaults.baseURL = 'http://localhost:8181';\n\nconst store = createStore({\n  state: {\n    questions: [], // 存储题目列表\n    paperQuestions: [],\n    examQuestions: [],\n    examAnswers: {},\n    paper: [],\n    papers: [],\n    examInfo: null,\n    exams: [], // 存储考试列表\n    question:[],\n    questionsPages:1,\n    papersPages:1,\n    examsPages:1,\n    totalCount2:0,\n    user: null, // 存储当前登录用户\n  },\n  mutations: {\n    setExamAnswer(state, { questionId, answer }) {\n      state.examAnswers[questionId] = answer;\n    },\n\n    // 设置题目列表\n    setPapers(state, papers) {\n      state.papers = papers;\n    },\n    setExams(state, exams) {\n      state.exams = exams;\n    },\n    addPaper(state, paper) {\n      state.papers.push(paper);\n      state.paper = []\n    },\n    removePaper(state, paperId) {\n      state.papers = state.papers.filter(paper => paper.id !== paperId);\n    },\n\n    addQuestionToPaper(state, question) {\n      console.log(\"hello\");\n      // if (!state.paper.includes(question)) {\n        state.paper.push(question);\n      // }\n    },\n    removeQuestionFromPaper(state, questionId) {\n      console.log(\"hh\");\n      state.paper = state.paper.filter(item => item.id !== questionId);\n    },\n    \n    setPaperQuestions(state, questions){\n      state.paperQuestions = questions;\n    },\n    setExamQuestions(state, questions){\n      state.examQuestions = questions;\n    },\n    setExamInfo(state, row){\n      state.examInfo = row;\n    },\n    // 设置题目列表\n      setQuestion(state, question) {\n          state.question = [];\n      state.question.push(question);\n    },\n      setQuestions(state, questions) {\n        \n      state.questions = questions;\n    },\n    // 添加新题目\n    addQuestion(state, question) {\n      state.questions.push(question);\n    },\n    // 设置考试列表\n    // setExams(state, exams) {\n    //   state.exams = exams;\n    // },\n    // 添加新考试\n    addExam(state, exam) {\n      state.exams.push(exam);\n    },\n    // 设置当前用户\n    setUser(state, user) {\n      state.user = user;\n    },\n    setQuestionsPages(state, pagenum){\n      state.questionsPages = pagenum;\n    },\n    setPapersPages(state, pagenum){\n      state.papersPages = pagenum;\n    },\n    setExamsPages(state, pagenum){\n      state.examsPages = pagenum;\n    },\n    add(){\n\n    }\n  },\n  actions: {\n    removeFromPaper({ commit }, id) {\n      commit('removeQuestionFromPaper', id);\n    },\n    async submitExamAnswer({commit}, answer){\n      try {\n        // console.log(id);\n        // console.log('update');\n        let postData = [];\n        console.log(\"info:\",this.state.examInfo)\n        // 遍历 answer 对象，构建每个题目的数据格式\n        Object.keys(answer).forEach(questionId => {\n          let data = {\n            id: \"\",  // 通常是提交后服务器返回的答案记录的唯一标识符\n            studentName: this.state.user.username,  // 学生姓名，这里可以根据实际情况传入\n            examId: this.state.examInfo.examId,  // 考试的唯一标识符\n            questionId: questionId,  // 题目的唯一标识符，对应数据库中的Id\n            studentAnswer: answer[questionId],  // 学生的答案，根据传入的 answer 对象取值\n            grade: \"0\"  // 初始分数为0，如果需要评分功能可以后续修改\n          };\n          postData.push(data);\n        });\n        console.log(postData);\n        const response = await axios.post('/api/answer-record/submit-answer', postData);\n        // const response2 = await axios.get('/api/papers');\n        // commit('setPapers', response2.data);\n        // commit('add');\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        // commit('add');\n      }\n    },\n    async deletePaper({commit}, PaperID){\n      try {\n        // console.log(id);\n        console.log('update');\n        const response = await axios.delete('/api/papers/'+PaperID);\n        // const response2 = await axios.get('/api/papers');\n        // commit('setPapers', response2.data);\n        commit('add');\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('add');\n      }\n    },\n    async updatePaperQuestions({commit}, dict){\n      try {\n        // console.log(id);\n        console.log('update');\n        const response = await axios.post('/api/papers/'+dict.paperid+'/question/'+dict.questionid);\n        commit('setPaperQuestions', response.data);\n        // const response2 = await axios.get('/api/papers');\n        // commit('setPapers', response2.data);\n        commit('add');\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('add');\n      }\n    },\n    async deleteQuestion({commit}, id){\n      try {\n        console.log(id);\n        console.log('delete');\n        const response = await axios.delete('/api/questions/'+id);\n        // const response2= await axios.get('/api/questions');\n        // commit('setQuestions', response2.data);\n        commit('add');\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('add');\n      }\n    },\n    async updateQuestion({commit}, form) {\n      try {\n        console.log(form.id);\n        const response = await axios.post('/api/questions/'+form.id, form.question);\n        \n        commit('add');\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('add');\n      }\n    },\n\n    async fetchPaperQuestion({ commit}, id){\n      try {\n        const response = await axios.get('/api/papers/admin/'+id);\n        commit('setPaperQuestions', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setPaperQuestions', []);\n      }\n    },\n\n    async fetchExamQuestion({ commit}, id){\n      try {\n        console.log(\"id:\",id);\n        const response = await axios.get('/api/papers/exam-paper/'+id[0]);\n        // var d2 = {};\n        // d2['id'] = response.data['questionId'];\n        // d2['type'] = response.data['questionType'];\n        // d2['description'] = response.data['specificContent'];\n        commit('setExamQuestions', response.data);\n        console.log(\"rrrrrrrrrrrr:\", id[1]);\n        commit('setExamInfo', id[1]);\n        console.log('examInfo:', this.state.examInfo);\n        this.state.totalCount2 = response.data.length;\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setExamQuestions', []);\n      }\n    },\n    // 获取paper列表\n    async fetchPapers({ commit }, pageNum) {\n      try {\n        var response;\n        if (pageNum!==undefined){\n          response = await axios.get('/api/papers?pageNum='+ pageNum);\n        }else {\n          response = await axios.get('/api/papers');\n        }\n        commit('setPapers', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setPapers', []);\n      }\n    },\n    // 获取题目列表\n    async fetchFileteredQuestion({ commit }, id) {\n      try {\n  \n        const response = await axios.get(`/api/questions/`+id);\n        commit('setQuestion', response.data); // Assuming you have a Vuex store\n      } catch (error) {\n        // Handle request failure\n        commit('setQuestion', []);\n      }\n    },\n    // 获取题目列表\n    async fetchFileteredQuestions({ commit }, params) {\n      try {\n        // Construct query string from params\n        const queryString = Object.keys(params)\n          .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n          .join('&');\n  \n        const response = await axios.get(`/api/questions/search?${queryString}`);\n        // commit('setQuestions', response.data); // Assuming you have a Vuex store\n        commit('setQuestionsPages', response.data.length);\n      } catch (error) {\n        // Handle request failure\n        // commit('setQuestions', []);\n      }\n    },\n    // 获取题目列表\n    async fetchQuestions({ commit }, params) {\n      try {\n        // Construct query string from params\n        const queryString = Object.keys(params)\n          .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n          .join('&');\n  \n        const response = await axios.get(`/api/questions/search?${queryString}`);\n        commit('setQuestions', response.data); // Assuming you have a Vuex store\n        // return (len(response.data));\n        \n      } catch (error) {\n        // Handle request failure\n        commit('setQuestions', []);\n      }\n    },\n    // // 获取题目列表\n    // async fetchQuestions({ commit }, pageNum) {\n    //   try {\n    //     var response;\n    //     if (pageNum!==undefined){\n    //       response = await axios.get('/api/questions/?pageNum='+ pageNum);\n    //     }else {\n    //       response = await axios.get('/api/questions');\n    //     }\n        \n    //     commit('setQuestions', response.data);\n    //   } catch (error) {\n    //     // 请求失败时，设置空数据\n    //     commit('setQuestions', []);\n    //   }\n    // },\n    async fetchQuestionsPages({ commit }) {\n      try {\n        const response = await axios.get('/api/questions/pageNum');\n        const totalPages = parseInt(response.data, 10); // 将 response.data 转换为整数\n        console.log('Fetched questions pages:', totalPages); // 日志记录转换后的整数值\n        console.log(response.data);\n        commit('setQuestionsPages', response.data);\n        console.log('pages:', this.state.questionsPages)\n      } catch (error) {\n        console.error('Failed to fetch questions pages:', error); // Add log\n        commit('setQuestionsPages', 1);\n      }\n    },\n    \n    async fetchPapersPages({commit}){\n      try {\n        const response = await axios.get('/api/papers/pageNum');\n        commit('setPapersPages', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setPapersPages', 1);\n      }\n    },\n    \n    async fetchExamPages({commit},kind){\n      try {\n        var response;\n        if (kind==='all'){\n          response = await axios.get('/api/exams/page-num');\n        }else if(kind==='unstart'){\n          response = await axios.get('/api/exams/not-started/page-num');\n        }else if(kind==='pro'){\n          response = await axios.get('/api/exams/in-progress/page-num');\n        }else if(kind==='end'){\n          response = await axios.get('/api/exams/finished/page-num');\n        }\n        \n        commit('setExamsPages', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setExamsPages', 1);\n      }\n    },\n    async addPaper({ commit }, paper) {\n      try {\n        const response = await axios.post('/api/papers', paper);\n        // commit('addPaper', response.data);\n        return {success:\"success\"};\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        // commit('addPaper', paper);\n        return {success:\"error\"};\n      }\n    },\n    // 添加新题目\n    async addQuestion({ commit }, question) {\n      try {\n        const response = await axios.post('/api/questions', question);\n        commit('addQuestion', response.data);\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('addQuestion', question);\n      }\n    },\n    // 获取考试列表\n    // async fetchExams({ commit }) {\n    //   try {\n    //     const response = await axios.get('/api/exams');\n    //     commit('setExams', response.data);\n    //   } catch (error) {\n    //     // 请求失败时，设置空数据\n    //     commit('setExams', []);\n    //   }\n    // },\n    // async fetchExams({ commit }, pageNum) {\n    //   try {\n    //     var response;\n    //     if (pageNum!==undefined){\n    //       response = await axios.get('/api/exams?pageNum='+ pageNum);\n    //     }else {\n    //       response = await axios.get('/api/exams');\n    //     }\n    //     commit('setExams', response.data);\n    //   } catch (error) {\n    //     // 请求失败时，设置空数据\n    //     commit('setExams', []);\n    //   }\n    // },\n\n    async fetchExams({ commit }, dict) {\n      try {\n        console.log('dd', dict)\n\n        var pageNum = dict.pageNum;\n        var kind = dict.kind;\n        var response;\n        if(kind===\"all\"){\n          if (pageNum!==undefined){\n            response = await axios.get('/api/exams/student-name?pageNum='+ pageNum);\n          }else {\n            response = await axios.get('/api/exams');\n          }\n        }else if(kind==='pro'){\n          if (pageNum!==undefined){\n            response = await axios.get('/api/exams/student-name/in-progress?pageNum='+ pageNum);\n          }else {\n            response = await axios.get('/api/exams/student-name/in-progress');\n          }\n        }else if(kind==='unstart'){\n          if (pageNum!==undefined){\n            response = await axios.get('/api/exams/student-name/not-started?pageNum='+ pageNum);\n          }else {\n            response = await axios.get('/api/exams/student-name/not-started');\n          }\n        }else if(kind==='end'){\n          if (pageNum!==undefined){\n            response = await axios.get('/api/exams/student-name/finished?pageNum='+ pageNum);\n          }else {\n            response = await axios.get('/api/exams/student-name/finished');\n          }\n        }\n\n        commit('setExams', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setExams', []);\n      }\n    },\n\n    async fetchStudentExams({ commit }, dict) {\n      try {\n        console.log('ddd', dict)\n\n        var pageNum = dict.pageNum;\n        var kind = dict.kind;\n        var response;\n        console.log('dddd', kind)\n        if(kind===\"all\"){\n          if (pageNum!==undefined){\n            console.log('ddddd', kind)\n            response = await axios.get('/api/exams/student-name?pageNum='+ pageNum +'&&studentName='+ this.state.user.username);\n            console.log('ddddd', kind)\n          }else {\n            response = await axios.get('/api/exams'+'?studentName='+ this.state.user.username);\n          }\n        }else if(kind==='pro'){\n          if (pageNum!==undefined){\n            response = await axios.get('/api/exams/student-name/in-progress?pageNum='+ pageNum+'&&studentName='+ this.state.user.username);\n          }else {\n            response = await axios.get('/api/exams/student-name/in-progress'+'?studentName='+ this.state.user.username);\n          }\n        }else if(kind==='unstart'){\n          if (pageNum!==undefined){\n            response = await axios.get('/api/exams/student-name/not-started?pageNum='+ pageNum+'&&studentName='+ this.state.user.username);\n          }else {\n            response = await axios.get('/api/exams/student-name/not-started'+'?studentName='+ this.state.user.username);\n          }\n        }else if(kind==='end'){\n          if (pageNum!==undefined){\n            response = await axios.get('/api/exams/student-name/finished?pageNum='+ pageNum+'&&studentName='+ this.state.user.username);\n          }else {\n            response = await axios.get('/api/exams/student-name/finished'+'?studentName='+ this.state.user.username);\n          }\n        }\n\n        commit('setExams', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setExams', []);\n      }\n    },\n\n    // 创建新考试\n    async createExam({ commit }, exam) {\n      try {\n        const response = await axios.post('/api/exams', exam);\n        // commit('addExam', response.data);\n        return {success:\"success\"};\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到考试列表\n        // commit('addExam', exam);\n        return {success:\"error\"};\n      }\n    },\n    // 提交考试\n    async submitExam(_, { examId, answers }) {\n      try {\n        await axios.post(`/api/exams/${examId}/submit`, { answers });\n      } catch (error) {\n        // 提交失败时，暂时不做处理\n      }\n    },\n    // 用户登录\n    async login({ commit }, credentials) {\n      try {\n        const response = await axios.post('/api/users/login', credentials);\n        commit('setUser', response.data);\n        return { success: true, role: response.data.role};\n      } catch (error) {\n        return { success: false, message: error.response ? error.response.data.message : '网络错误' };\n      }\n    }\n    },\n  async register({ commit }, { id,username, password,role }) {\n      try {\n        const response = await axios.post('/api/users/register', { id,username, password,role });\n        commit('setUser', response.data);\n        return response.data;\n      } catch (error) {\n        console.error('注册失败：', error);\n        throw new Error('Registration failed');\n      }\n    },\n  getters: {\n    getExamQuestions(state) {\n      return state.examQuestions;\n    },\n    getExamAnswer: (state) => (questionId) => {\n      return state.examAnswers[questionId];\n    },\n    getAnsweredCount(state) {\n      return Object.keys(state.examAnswers).length;\n    }\n  }\n});\n\nexport default store;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}