{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* eslint-disable no-unused-vars */\n\nimport { createStore } from 'vuex';\nimport axios from 'axios';\n\n// 设置 Axios 基地址\naxios.defaults.baseURL = 'http://localhost:8181';\nconst store = createStore({\n  state: {\n    questions: [],\n    // 存储题目列表\n    paperQuestions: [],\n    paper: [],\n    papers: [],\n    exams: [],\n    // 存储考试列表\n    user: null // 存储当前登录用户\n  },\n  mutations: {\n    // 设置题目列表\n    setPapers(state, papers) {\n      state.papers = papers;\n    },\n    addPaper(state, paper) {\n      state.papers.push(paper);\n      state.paper = [];\n    },\n    removePaper(state, paperId) {\n      state.papers = state.papers.filter(paper => paper.id !== paperId);\n    },\n    addQuestionToPaper(state, question) {\n      console.log(\"hello\");\n      // if (!state.paper.includes(question)) {\n      state.paper.push(question);\n      // }\n    },\n    removeQuestionFromPaper(state, questionId) {\n      state.paper = state.paper.filter(id => id !== questionId);\n    },\n    setPaperQuestions(state, questions) {\n      state.paperQuestions = questions;\n    },\n    // 设置题目列表\n    setQuestions(state, questions) {\n      state.questions = questions;\n    },\n    // 添加新题目\n    addQuestion(state, question) {\n      state.questions.push(question);\n    },\n    // 设置考试列表\n    setExams(state, exams) {\n      state.exams = exams;\n    },\n    // 添加新考试\n    addExam(state, exam) {\n      state.exams.push(exam);\n    },\n    // 设置当前用户\n    setUser(state, user) {\n      state.user = user;\n    }\n  },\n  actions: {\n    async fetchFileteredQuestions({\n      commit\n    }, params) {\n      try {\n        // Construct query string from params\n        const queryString = Object.keys(params).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`).join('&');\n        const response = await axios.get(`/api/search?${queryString}`);\n        this.$store.commit('setQuestions', response.data); // Assuming you have a Vuex store\n      } catch (error) {\n        // Handle request failure\n        this.$store.commit('setQuestions', []);\n      }\n    },\n    async fetchPaperQuestion({\n      commit\n    }, id) {\n      try {\n        console.log(id);\n        const response = await axios.get('/api/papers/admin/' + id);\n        commit('setPaperQuestions', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setPaperQuestions', []);\n      }\n    },\n    // 获取paper列表\n    async fetchPapers({\n      commit\n    }) {\n      try {\n        const response = await axios.get('/api/papers');\n        commit('setPapers', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setPapers', []);\n      }\n    },\n    // 获取题目列表\n    async fetchQuestions({\n      commit\n    }) {\n      try {\n        const response = await axios.get('/api/questions');\n        commit('setQuestions', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setQuestions', []);\n      }\n    },\n    async addPaper({\n      commit\n    }, paper) {\n      try {\n        const response = await axios.post('/api/papers', paper);\n        commit('addPaper', response.data);\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('addPaper', paper);\n      }\n    },\n    // 添加新题目\n    async addQuestion({\n      commit\n    }, question) {\n      try {\n        const response = await axios.post('/api/questions', question);\n        commit('addQuestion', response.data);\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('addQuestion', question);\n      }\n    },\n    // 获取考试列表\n    async fetchExams({\n      commit\n    }) {\n      try {\n        const response = await axios.get('/api/exams');\n        commit('setExams', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setExams', []);\n      }\n    },\n    // 创建新考试\n    async createExam({\n      commit\n    }, exam) {\n      try {\n        const response = await axios.post('/api/exams', exam);\n        commit('addExam', response.data);\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到考试列表\n        commit('addExam', exam);\n      }\n    },\n    // 提交考试\n    async submitExam(_, {\n      examId,\n      answers\n    }) {\n      try {\n        await axios.post(`/api/exams/${examId}/submit`, {\n          answers\n        });\n      } catch (error) {\n        // 提交失败时，暂时不做处理\n      }\n    },\n    // 用户登录\n    async login({\n      commit\n    }, credentials) {\n      try {\n        const response = await axios.post('/api/users/login', credentials);\n        commit('setUser', response.data.user);\n        return {\n          success: true\n        };\n      } catch (error) {\n        return {\n          success: false,\n          message: error.response ? error.response.data.message : '网络错误'\n        };\n      }\n    }\n  }\n});\nexport default store;","map":{"version":3,"names":["createStore","axios","defaults","baseURL","store","state","questions","paperQuestions","paper","papers","exams","user","mutations","setPapers","addPaper","push","removePaper","paperId","filter","id","addQuestionToPaper","question","console","log","removeQuestionFromPaper","questionId","setPaperQuestions","setQuestions","addQuestion","setExams","addExam","exam","setUser","actions","fetchFileteredQuestions","commit","params","queryString","Object","keys","map","key","encodeURIComponent","join","response","get","$store","data","error","fetchPaperQuestion","fetchPapers","fetchQuestions","post","fetchExams","createExam","submitExam","_","examId","answers","login","credentials","success","message"],"sources":["C:/Users/86139/Desktop/demo_vue/src/store/index.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\n\nimport { createStore } from 'vuex';\nimport axios from 'axios';\n\n// 设置 Axios 基地址\naxios.defaults.baseURL = 'http://localhost:8181';\n\nconst store = createStore({\n  state: {\n    questions: [], // 存储题目列表\n    paperQuestions: [],\n    paper: [],\n    papers: [],\n    exams: [], // 存储考试列表\n    user: null, // 存储当前登录用户\n  },\n  mutations: {\n    // 设置题目列表\n    setPapers(state, papers) {\n      state.papers = papers;\n    },\n    addPaper(state, paper) {\n      state.papers.push(paper);\n      state.paper = []\n    },\n    removePaper(state, paperId) {\n      state.papers = state.papers.filter(paper => paper.id !== paperId);\n    },\n\n    addQuestionToPaper(state, question) {\n      console.log(\"hello\");\n      // if (!state.paper.includes(question)) {\n        state.paper.push(question);\n      // }\n    },\n    removeQuestionFromPaper(state, questionId) {\n      state.paper = state.paper.filter(id => id !== questionId);\n    },\n    \n    setPaperQuestions(state, questions){\n      state.paperQuestions = questions;\n    },\n    // 设置题目列表\n    setQuestions(state, questions) {\n      state.questions = questions;\n    },\n    // 添加新题目\n    addQuestion(state, question) {\n      state.questions.push(question);\n    },\n    // 设置考试列表\n    setExams(state, exams) {\n      state.exams = exams;\n    },\n    // 添加新考试\n    addExam(state, exam) {\n      state.exams.push(exam);\n    },\n    // 设置当前用户\n    setUser(state, user) {\n      state.user = user;\n    }\n  },\n  actions: {\n    async fetchFileteredQuestions({ commit }, params) {\n      try {\n        // Construct query string from params\n        const queryString = Object.keys(params)\n          .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n          .join('&');\n  \n        const response = await axios.get(`/api/search?${queryString}`);\n        this.$store.commit('setQuestions', response.data); // Assuming you have a Vuex store\n      } catch (error) {\n        // Handle request failure\n        this.$store.commit('setQuestions', []);\n      }\n    },\n\n    async fetchPaperQuestion({ commit },id){\n          try {\n              console.log(id);\n        const response = await axios.get('/api/papers/admin/'+id);\n        commit('setPaperQuestions', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setPaperQuestions', []);\n      }\n    },\n\n    // 获取paper列表\n    async fetchPapers({ commit }) {\n      try {\n        const response = await axios.get('/api/papers');\n        commit('setPapers', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setPapers', []);\n      }\n    },\n    // 获取题目列表\n    async fetchQuestions({ commit }) {\n      try {\n        const response = await axios.get('/api/questions');\n        commit('setQuestions', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setQuestions', []);\n      }\n    },\n    async addPaper({ commit }, paper) {\n      try {\n        const response = await axios.post('/api/papers', paper);\n        commit('addPaper', response.data);\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('addPaper', paper);\n      }\n    },\n    // 添加新题目\n    async addQuestion({ commit }, question) {\n      try {\n        const response = await axios.post('/api/questions', question);\n        commit('addQuestion', response.data);\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('addQuestion', question);\n      }\n    },\n    // 获取考试列表\n    async fetchExams({ commit }) {\n      try {\n        const response = await axios.get('/api/exams');\n        commit('setExams', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setExams', []);\n      }\n    },\n    // 创建新考试\n    async createExam({ commit }, exam) {\n      try {\n        const response = await axios.post('/api/exams', exam);\n        commit('addExam', response.data);\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到考试列表\n        commit('addExam', exam);\n      }\n    },\n    // 提交考试\n    async submitExam(_, { examId, answers }) {\n      try {\n        await axios.post(`/api/exams/${examId}/submit`, { answers });\n      } catch (error) {\n        // 提交失败时，暂时不做处理\n      }\n    },\n    // 用户登录\n    async login({ commit }, credentials) {\n      try {\n        const response = await axios.post('/api/users/login', credentials);\n        commit('setUser', response.data.user);\n        return { success: true };\n      } catch (error) {\n        return { success: false, message: error.response ? error.response.data.message : '网络错误' };\n      }\n    }\n  }\n});\n\nexport default store;\n"],"mappings":";AAAA;;AAEA,SAASA,WAAW,QAAQ,MAAM;AAClC,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACAA,KAAK,CAACC,QAAQ,CAACC,OAAO,GAAG,uBAAuB;AAEhD,MAAMC,KAAK,GAAGJ,WAAW,CAAC;EACxBK,KAAK,EAAE;IACLC,SAAS,EAAE,EAAE;IAAE;IACfC,cAAc,EAAE,EAAE;IAClBC,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,EAAE;IACVC,KAAK,EAAE,EAAE;IAAE;IACXC,IAAI,EAAE,IAAI,CAAE;EACd,CAAC;EACDC,SAAS,EAAE;IACT;IACAC,SAASA,CAACR,KAAK,EAAEI,MAAM,EAAE;MACvBJ,KAAK,CAACI,MAAM,GAAGA,MAAM;IACvB,CAAC;IACDK,QAAQA,CAACT,KAAK,EAAEG,KAAK,EAAE;MACrBH,KAAK,CAACI,MAAM,CAACM,IAAI,CAACP,KAAK,CAAC;MACxBH,KAAK,CAACG,KAAK,GAAG,EAAE;IAClB,CAAC;IACDQ,WAAWA,CAACX,KAAK,EAAEY,OAAO,EAAE;MAC1BZ,KAAK,CAACI,MAAM,GAAGJ,KAAK,CAACI,MAAM,CAACS,MAAM,CAACV,KAAK,IAAIA,KAAK,CAACW,EAAE,KAAKF,OAAO,CAAC;IACnE,CAAC;IAEDG,kBAAkBA,CAACf,KAAK,EAAEgB,QAAQ,EAAE;MAClCC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;MACpB;MACElB,KAAK,CAACG,KAAK,CAACO,IAAI,CAACM,QAAQ,CAAC;MAC5B;IACF,CAAC;IACDG,uBAAuBA,CAACnB,KAAK,EAAEoB,UAAU,EAAE;MACzCpB,KAAK,CAACG,KAAK,GAAGH,KAAK,CAACG,KAAK,CAACU,MAAM,CAACC,EAAE,IAAIA,EAAE,KAAKM,UAAU,CAAC;IAC3D,CAAC;IAEDC,iBAAiBA,CAACrB,KAAK,EAAEC,SAAS,EAAC;MACjCD,KAAK,CAACE,cAAc,GAAGD,SAAS;IAClC,CAAC;IACD;IACAqB,YAAYA,CAACtB,KAAK,EAAEC,SAAS,EAAE;MAC7BD,KAAK,CAACC,SAAS,GAAGA,SAAS;IAC7B,CAAC;IACD;IACAsB,WAAWA,CAACvB,KAAK,EAAEgB,QAAQ,EAAE;MAC3BhB,KAAK,CAACC,SAAS,CAACS,IAAI,CAACM,QAAQ,CAAC;IAChC,CAAC;IACD;IACAQ,QAAQA,CAACxB,KAAK,EAAEK,KAAK,EAAE;MACrBL,KAAK,CAACK,KAAK,GAAGA,KAAK;IACrB,CAAC;IACD;IACAoB,OAAOA,CAACzB,KAAK,EAAE0B,IAAI,EAAE;MACnB1B,KAAK,CAACK,KAAK,CAACK,IAAI,CAACgB,IAAI,CAAC;IACxB,CAAC;IACD;IACAC,OAAOA,CAAC3B,KAAK,EAAEM,IAAI,EAAE;MACnBN,KAAK,CAACM,IAAI,GAAGA,IAAI;IACnB;EACF,CAAC;EACDsB,OAAO,EAAE;IACP,MAAMC,uBAAuBA,CAAC;MAAEC;IAAO,CAAC,EAAEC,MAAM,EAAE;MAChD,IAAI;QACF;QACA,MAAMC,WAAW,GAAGC,MAAM,CAACC,IAAI,CAACH,MAAM,CAAC,CACpCI,GAAG,CAACC,GAAG,IAAK,GAAEC,kBAAkB,CAACD,GAAG,CAAE,IAAGC,kBAAkB,CAACN,MAAM,CAACK,GAAG,CAAC,CAAE,EAAC,CAAC,CAC3EE,IAAI,CAAC,GAAG,CAAC;QAEZ,MAAMC,QAAQ,GAAG,MAAM3C,KAAK,CAAC4C,GAAG,CAAE,eAAcR,WAAY,EAAC,CAAC;QAC9D,IAAI,CAACS,MAAM,CAACX,MAAM,CAAC,cAAc,EAAES,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;MACrD,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd;QACA,IAAI,CAACF,MAAM,CAACX,MAAM,CAAC,cAAc,EAAE,EAAE,CAAC;MACxC;IACF,CAAC;IAED,MAAMc,kBAAkBA,CAAC;MAAEd;IAAO,CAAC,EAAChB,EAAE,EAAC;MACjC,IAAI;QACAG,OAAO,CAACC,GAAG,CAACJ,EAAE,CAAC;QACrB,MAAMyB,QAAQ,GAAG,MAAM3C,KAAK,CAAC4C,GAAG,CAAC,oBAAoB,GAAC1B,EAAE,CAAC;QACzDgB,MAAM,CAAC,mBAAmB,EAAES,QAAQ,CAACG,IAAI,CAAC;MAC5C,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd;QACAb,MAAM,CAAC,mBAAmB,EAAE,EAAE,CAAC;MACjC;IACF,CAAC;IAED;IACA,MAAMe,WAAWA,CAAC;MAAEf;IAAO,CAAC,EAAE;MAC5B,IAAI;QACF,MAAMS,QAAQ,GAAG,MAAM3C,KAAK,CAAC4C,GAAG,CAAC,aAAa,CAAC;QAC/CV,MAAM,CAAC,WAAW,EAAES,QAAQ,CAACG,IAAI,CAAC;MACpC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd;QACAb,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC;MACzB;IACF,CAAC;IACD;IACA,MAAMgB,cAAcA,CAAC;MAAEhB;IAAO,CAAC,EAAE;MAC/B,IAAI;QACF,MAAMS,QAAQ,GAAG,MAAM3C,KAAK,CAAC4C,GAAG,CAAC,gBAAgB,CAAC;QAClDV,MAAM,CAAC,cAAc,EAAES,QAAQ,CAACG,IAAI,CAAC;MACvC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd;QACAb,MAAM,CAAC,cAAc,EAAE,EAAE,CAAC;MAC5B;IACF,CAAC;IACD,MAAMrB,QAAQA,CAAC;MAAEqB;IAAO,CAAC,EAAE3B,KAAK,EAAE;MAChC,IAAI;QACF,MAAMoC,QAAQ,GAAG,MAAM3C,KAAK,CAACmD,IAAI,CAAC,aAAa,EAAE5C,KAAK,CAAC;QACvD2B,MAAM,CAAC,UAAU,EAAES,QAAQ,CAACG,IAAI,CAAC;MACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd;QACAb,MAAM,CAAC,UAAU,EAAE3B,KAAK,CAAC;MAC3B;IACF,CAAC;IACD;IACA,MAAMoB,WAAWA,CAAC;MAAEO;IAAO,CAAC,EAAEd,QAAQ,EAAE;MACtC,IAAI;QACF,MAAMuB,QAAQ,GAAG,MAAM3C,KAAK,CAACmD,IAAI,CAAC,gBAAgB,EAAE/B,QAAQ,CAAC;QAC7Dc,MAAM,CAAC,aAAa,EAAES,QAAQ,CAACG,IAAI,CAAC;MACtC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd;QACAb,MAAM,CAAC,aAAa,EAAEd,QAAQ,CAAC;MACjC;IACF,CAAC;IACD;IACA,MAAMgC,UAAUA,CAAC;MAAElB;IAAO,CAAC,EAAE;MAC3B,IAAI;QACF,MAAMS,QAAQ,GAAG,MAAM3C,KAAK,CAAC4C,GAAG,CAAC,YAAY,CAAC;QAC9CV,MAAM,CAAC,UAAU,EAAES,QAAQ,CAACG,IAAI,CAAC;MACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd;QACAb,MAAM,CAAC,UAAU,EAAE,EAAE,CAAC;MACxB;IACF,CAAC;IACD;IACA,MAAMmB,UAAUA,CAAC;MAAEnB;IAAO,CAAC,EAAEJ,IAAI,EAAE;MACjC,IAAI;QACF,MAAMa,QAAQ,GAAG,MAAM3C,KAAK,CAACmD,IAAI,CAAC,YAAY,EAAErB,IAAI,CAAC;QACrDI,MAAM,CAAC,SAAS,EAAES,QAAQ,CAACG,IAAI,CAAC;MAClC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd;QACAb,MAAM,CAAC,SAAS,EAAEJ,IAAI,CAAC;MACzB;IACF,CAAC;IACD;IACA,MAAMwB,UAAUA,CAACC,CAAC,EAAE;MAAEC,MAAM;MAAEC;IAAQ,CAAC,EAAE;MACvC,IAAI;QACF,MAAMzD,KAAK,CAACmD,IAAI,CAAE,cAAaK,MAAO,SAAQ,EAAE;UAAEC;QAAQ,CAAC,CAAC;MAC9D,CAAC,CAAC,OAAOV,KAAK,EAAE;QACd;MAAA;IAEJ,CAAC;IACD;IACA,MAAMW,KAAKA,CAAC;MAAExB;IAAO,CAAC,EAAEyB,WAAW,EAAE;MACnC,IAAI;QACF,MAAMhB,QAAQ,GAAG,MAAM3C,KAAK,CAACmD,IAAI,CAAC,kBAAkB,EAAEQ,WAAW,CAAC;QAClEzB,MAAM,CAAC,SAAS,EAAES,QAAQ,CAACG,IAAI,CAACpC,IAAI,CAAC;QACrC,OAAO;UAAEkD,OAAO,EAAE;QAAK,CAAC;MAC1B,CAAC,CAAC,OAAOb,KAAK,EAAE;QACd,OAAO;UAAEa,OAAO,EAAE,KAAK;UAAEC,OAAO,EAAEd,KAAK,CAACJ,QAAQ,GAAGI,KAAK,CAACJ,QAAQ,CAACG,IAAI,CAACe,OAAO,GAAG;QAAO,CAAC;MAC3F;IACF;EACF;AACF,CAAC,CAAC;AAEF,eAAe1D,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}