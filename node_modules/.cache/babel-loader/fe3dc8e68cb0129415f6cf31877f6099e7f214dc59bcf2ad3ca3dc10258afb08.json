{"ast":null,"code":"import { mapActions, mutations } from 'vuex';\nexport default {\n  data() {\n    return {\n      username: '',\n      password: '',\n      loginFailed: false\n    };\n  },\n  computed: {\n    ...mapState(['questions', 'paper', 'user']),\n    tableData() {\n      return this.questions.map(question => ({\n        question: question.description,\n        questionType: question.type,\n        tag: question.tag,\n        difficulty: question.difficultLevel,\n        analysis: question.analysis,\n        createdBy: question.createdBy,\n        id: question.id\n      }));\n    },\n    filteredQuestions() {\n      return this.questions.filter(question => {\n        const matchesKeyword = question.question.includes(this.searchKeyword);\n        const matchesType = this.filterQuestionType ? question.questionType === this.filterQuestionType : true;\n        const matchesDifficulty = this.filterDifficulty ? question.difficulty === this.filterDifficulty : true;\n        return matchesKeyword && matchesType && matchesDifficulty;\n      });\n    },\n    totalPages() {\n      return Math.ceil(this.filteredQuestions.length / this.pageSize);\n    },\n    paginatedQuestions() {\n      const start = (this.currentPage - 1) * this.pageSize;\n      return this.filteredQuestions.slice(start, start + this.pageSize);\n    }\n  },\n  methods: {\n    ...mapActions(['login']),\n    async handleLogin() {\n      try {\n        const result = await this.login({\n          username: this.username,\n          password: this.password\n        });\n        if (result.success) {\n          console.log(this.user);\n          //   this.$router.push('/home');\n        } else {\n          alert('登录失败：' + result.message);\n        }\n      } catch (error) {\n        console.error('登录失败：', error);\n        alert(error);\n        // alert('登录失败：服务器错误');\n      }\n    },\n    closeAlert() {\n      this.loginFailed = false;\n    }\n  }\n};","map":{"version":3,"names":["mapActions","mutations","data","username","password","loginFailed","computed","mapState","tableData","questions","map","question","description","questionType","type","tag","difficulty","difficultLevel","analysis","createdBy","id","filteredQuestions","filter","matchesKeyword","includes","searchKeyword","matchesType","filterQuestionType","matchesDifficulty","filterDifficulty","totalPages","Math","ceil","length","pageSize","paginatedQuestions","start","currentPage","slice","methods","handleLogin","result","login","success","console","log","user","alert","message","error","closeAlert"],"sources":["C:\\Users\\86139\\Desktop\\demo_vue\\src\\views\\LoginView.vue"],"sourcesContent":["<template>\r\n  <div class=\"login\">\r\n    <h2>管理员登录</h2>\r\n    <form @submit.prevent=\"handleLogin\">\r\n      <div>\r\n        <label for=\"username\">用户名:</label>\r\n        <input type=\"text\" v-model=\"username\" required />\r\n      </div>\r\n      <div>\r\n        <label for=\"password\">密码:</label>\r\n        <input type=\"password\" v-model=\"password\" required />\r\n      </div>\r\n      <button type=\"submit\">登录</button>\r\n    </form>\r\n    <div v-if=\"loginFailed\" class=\"alert\">\r\n      登录失败：服务器错误\r\n      <button @click=\"closeAlert\">关闭</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions, mutations } from 'vuex';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      username: '',\r\n      password: '',\r\n      loginFailed: false,\r\n    };\r\n    },\r\ncomputed: {\r\n    ...mapState(['questions', 'paper', 'user']),\r\n    tableData() {\r\n      return this.questions.map(question => ({\r\n        question: question.description,\r\n        questionType: question.type,\r\n        tag: question.tag,\r\n        difficulty: question.difficultLevel,\r\n        analysis: question.analysis,\r\n        createdBy: question.createdBy,\r\n           id: question.id,\r\n      }));\r\n    },\r\n    filteredQuestions() {\r\n      return this.questions.filter(question => {\r\n        const matchesKeyword = question.question.includes(this.searchKeyword);\r\n        const matchesType = this.filterQuestionType ? question.questionType === this.filterQuestionType : true;\r\n        const matchesDifficulty = this.filterDifficulty ? question.difficulty === this.filterDifficulty : true;\r\n        return matchesKeyword && matchesType && matchesDifficulty;\r\n      });\r\n    },\r\n    totalPages() {\r\n      return Math.ceil(this.filteredQuestions.length / this.pageSize);\r\n    },\r\n    paginatedQuestions() {\r\n      const start = (this.currentPage - 1) * this.pageSize;\r\n      return this.filteredQuestions.slice(start, start + this.pageSize);\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions(['login']),\r\n    async handleLogin() {\r\n      try {\r\n        const result = await this.login({ username: this.username, password: this.password });\r\n          if (result.success) {\r\n            console.log(this.user)\r\n        //   this.$router.push('/home');\r\n        } else {\r\n          alert('登录失败：' + result.message);\r\n        }\r\n      } catch (error) {\r\n        console.error('登录失败：', error);\r\n        alert(error)\r\n        // alert('登录失败：服务器错误');\r\n      }\r\n    },\r\n    closeAlert() {\r\n      this.loginFailed = false;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.login {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n  background-color: #f0f2f5;\r\n}\r\n\r\nform {\r\n  background: white;\r\n  padding: 2rem;\r\n  border-radius: 5px;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\nform div {\r\n  margin-bottom: 1rem;\r\n}\r\n\r\nbutton {\r\n  width: 100%;\r\n  padding: 0.5rem;\r\n  background: #1890ff;\r\n  border: none;\r\n  color: white;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background: #40a9ff;\r\n}\r\n\r\n.alert {\r\n  margin-top: 1rem;\r\n  padding: 1rem;\r\n  background: #f8d7da;\r\n  color: #721c24;\r\n  border: 1px solid #f5c6cb;\r\n  border-radius: 5px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n</style>\r\n"],"mappings":"AAsBA,SAASA,UAAU,EAAEC,SAAQ,QAAS,MAAM;AAE5C,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,EAAE;MACZC,WAAW,EAAE;IACf,CAAC;EACD,CAAC;EACLC,QAAQ,EAAE;IACN,GAAGC,QAAQ,CAAC,CAAC,WAAW,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IAC3CC,SAASA,CAAA,EAAG;MACV,OAAO,IAAI,CAACC,SAAS,CAACC,GAAG,CAACC,QAAO,KAAM;QACrCA,QAAQ,EAAEA,QAAQ,CAACC,WAAW;QAC9BC,YAAY,EAAEF,QAAQ,CAACG,IAAI;QAC3BC,GAAG,EAAEJ,QAAQ,CAACI,GAAG;QACjBC,UAAU,EAAEL,QAAQ,CAACM,cAAc;QACnCC,QAAQ,EAAEP,QAAQ,CAACO,QAAQ;QAC3BC,SAAS,EAAER,QAAQ,CAACQ,SAAS;QAC1BC,EAAE,EAAET,QAAQ,CAACS;MAClB,CAAC,CAAC,CAAC;IACL,CAAC;IACDC,iBAAiBA,CAAA,EAAG;MAClB,OAAO,IAAI,CAACZ,SAAS,CAACa,MAAM,CAACX,QAAO,IAAK;QACvC,MAAMY,cAAa,GAAIZ,QAAQ,CAACA,QAAQ,CAACa,QAAQ,CAAC,IAAI,CAACC,aAAa,CAAC;QACrE,MAAMC,WAAU,GAAI,IAAI,CAACC,kBAAiB,GAAIhB,QAAQ,CAACE,YAAW,KAAM,IAAI,CAACc,kBAAiB,GAAI,IAAI;QACtG,MAAMC,iBAAgB,GAAI,IAAI,CAACC,gBAAe,GAAIlB,QAAQ,CAACK,UAAS,KAAM,IAAI,CAACa,gBAAe,GAAI,IAAI;QACtG,OAAON,cAAa,IAAKG,WAAU,IAAKE,iBAAiB;MAC3D,CAAC,CAAC;IACJ,CAAC;IACDE,UAAUA,CAAA,EAAG;MACX,OAAOC,IAAI,CAACC,IAAI,CAAC,IAAI,CAACX,iBAAiB,CAACY,MAAK,GAAI,IAAI,CAACC,QAAQ,CAAC;IACjE,CAAC;IACDC,kBAAkBA,CAAA,EAAG;MACnB,MAAMC,KAAI,GAAI,CAAC,IAAI,CAACC,WAAU,GAAI,CAAC,IAAI,IAAI,CAACH,QAAQ;MACpD,OAAO,IAAI,CAACb,iBAAiB,CAACiB,KAAK,CAACF,KAAK,EAAEA,KAAI,GAAI,IAAI,CAACF,QAAQ,CAAC;IACnE;EACF,CAAC;EACDK,OAAO,EAAE;IACP,GAAGvC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC;IACxB,MAAMwC,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAMC,MAAK,GAAI,MAAM,IAAI,CAACC,KAAK,CAAC;UAAEvC,QAAQ,EAAE,IAAI,CAACA,QAAQ;UAAEC,QAAQ,EAAE,IAAI,CAACA;QAAS,CAAC,CAAC;QACnF,IAAIqC,MAAM,CAACE,OAAO,EAAE;UAClBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,IAAI;UACzB;QACA,OAAO;UACLC,KAAK,CAAC,OAAM,GAAIN,MAAM,CAACO,OAAO,CAAC;QACjC;MACF,EAAE,OAAOC,KAAK,EAAE;QACdL,OAAO,CAACK,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;QAC7BF,KAAK,CAACE,KAAK;QACX;MACF;IACF,CAAC;IACDC,UAAUA,CAAA,EAAG;MACX,IAAI,CAAC7C,WAAU,GAAI,KAAK;IAC1B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}