{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapActions, mapState } from 'vuex';\nimport { ElMessage } from 'element-plus';\nimport { ref } from 'vue';\nlet tableRowEditId = ref(null); // 控制可编辑的每一行\nlet tableColumnEditIndex = ref(null); //控制可编辑的每一列\n\nconst showUnitInput = (row, column) => {\n  //赋值给定义的变量\n  tableRowEditId.value = row.id; //确定点击的单元格在哪行 如果数据中有ID可以用ID判断，没有可以使用其他值判断，只要能确定是哪一行即可\n  tableColumnEditIndex.value = column.id; //确定点击的单元格在哪列 \n};\nconst blurValueInput = (row, column) => {\n  // tableRowEditId.value = null\n  // tableColumnEditIndex.value = null\n  //在此处调接口传数据\n};\nexport default {\n  name: 'SearchQuestion',\n  data() {\n    return {\n      searchKeyword: '',\n      filterQuestionType: '',\n      queryParams: {},\n      filterDifficulty: '',\n      currentPage: 1,\n      dialogTableVisible: false,\n      myQuestions: false,\n      pageSize: 5,\n      tableRowEditId: null,\n      // 控制可编辑的每一行\n      tableColumnEditIndex: null,\n      // 控制可编辑的每一列\n      totalPages: 5\n      //   tableData: [\n      //     { \n      //       question: '这是一个假问题?',\n      //       questionType: '选择题',\n      //       tag: '物理',\n      //       difficulty: '中等',\n      //       analysis: '这是一个问题的解析',\n      //       createdBy: \"小张\",\n      //       id: 5\n      //     },\n      //             { \n      //       question: '这是一个假问题2?',\n      //       questionType: '选择题',\n      //       tag: '物理',\n      //       difficulty: '中等',\n      //       analysis: '这是一个问题的解析',\n      //       createdBy: \"小张\",\n      //       id: 3\n      //     }\n      //   ]\n    };\n  },\n  computed: {\n    ...mapState(['questions', 'paper', 'user', 'question', 'questionsPages']),\n    questionData() {\n      return this.question.map(question => ({\n        description: question.description,\n        type: question.type,\n        tag: question.tag,\n        difficultLevel: question.difficultLevel,\n        answer: question.answer,\n        analysis: question.analysis,\n        createdBy: question.createdBy,\n        id: question.id\n      }));\n    },\n    tableData() {\n      return this.questions.map(question => ({\n        question: question.description,\n        questionType: question.type,\n        tag: question.tag,\n        difficulty: question.difficultLevel,\n        analysis: question.analysis,\n        createdBy: question.createdBy,\n        id: question.id\n      }));\n    },\n    filteredQuestions() {\n      return this.questions.filter(question => {\n        const matchesKeyword = question.question.includes(this.searchKeyword);\n        const matchesType = this.filterQuestionType ? question.questionType === this.filterQuestionType : true;\n        const matchesDifficulty = this.filterDifficulty ? question.difficulty === this.filterDifficulty : true;\n        return matchesKeyword && matchesType && matchesDifficulty;\n      });\n    },\n    computedTotal() {\n      return this.totalPages * 10;\n    },\n    totalPages() {\n      return this.questionsPages;\n      console.log(\"this\", this.questionsPages);\n      return 1000;\n    },\n    paginatedQuestions() {\n      const start = (this.currentPage - 1) * this.pageSize;\n      return this.filteredQuestions.slice(start, start + this.pageSize);\n    }\n  },\n  methods: {\n    ...mapActions(['fetchQuestions', 'deleteQuestion', 'addQuestionToPaper', 'removeQuestionFromPaper', 'fetchFileteredQuestions', 'fetchFileteredQuestion', 'updateQuestion', 'fetchQuestionsPages']),\n    // viewQuestion(id){\n\n    // },\n    showUnitInput(row, column) {\n      // 赋值给定义的变量\n      this.tableRowEditId = row.id; // 确定点击的单元格在哪行\n      this.tableColumnEditIndex = column.id; // 确定点击的单元格在哪列\n    },\n    blurValueInput(row, column) {\n      this.tableRowEditId = null;\n      this.tableColumnEditIndex = null;\n      // 在此处调接口传数据\n    },\n    async handleSubmit(row) {\n      console.log(this.questions);\n      // console.log('row',row)\n      // console.log('row properties:', Object.keys(row));\n      // const plainRow = JSON.parse(JSON.stringify(row));\n      const newQuestion = {\n        description: row.description,\n        type: row.type,\n        answer: row.answer,\n        difficultLevel: row.difficultLevel,\n        tag: row.tag,\n        analysis: row.analysis\n      };\n      console.log(newQuestion);\n      // console.log(this.questions)\n      await this.updateQuestion({\n        'id': row.id,\n        'question': newQuestion\n      });\n      this.success('提交成功');\n      this.queryParams.pageNum = this.currentPage;\n      this.fetchQuestions(this.queryParams);\n    },\n    searchQuestions() {\n      // this.currentPage = 1;\n\n      // Initialize an empty queryParams object\n\n      // Add fields to queryParams only if they are not empty\n      if (this.tag) {\n        this.queryParams.keywords = this.tag;\n      } else {\n        delete this.queryParams.keywords;\n      }\n      if (this.questionType) {\n        this.queryParams.type = this.questionType;\n      } else {\n        delete this.queryParams.type;\n      }\n      if (this.difficulty) {\n        this.queryParams.difficultLevel = this.difficulty;\n      } else {\n        delete this.queryParams.difficultLevel;\n      }\n      if (this.myQuestions) {\n        this.queryParams.username = this.user.username;\n      } else {\n        delete this.queryParams.username;\n      }\n      delete this.queryParams.pageNum;\n      // Fetch filtered questions with the constructed queryParams\n      this.fetchFileteredQuestions(this.queryParams);\n      this.queryParams.pageNum = 1;\n      this.fetchQuestions(this.queryParams);\n    },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n        this.fetchQuestions(this.currentPage);\n      }\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n        this.fetchQuestions(this.currentPage);\n      }\n    },\n    handlePageChange(page) {\n      console.log('Page changed to:', page); // 日志记录当前页码\n      this.currentPage = page;\n      this.queryParams.pageNum = page;\n      this.fetchQuestions(this.queryParams); // 触发 Vuex action 以获取新页数据\n    },\n    composePaper(index, row) {\n      const questionId = row.id; // 获取 question id\n      // this.addQuestionToPaper(row);\n      if (!this.paper.some(item => item.id === row.id)) {\n        this.paper.push(row);\n        this.success('加入成功');\n      } else {\n        this.warning('已加入');\n      }\n      console.log('组卷操作:', questionId);\n      console.log(row);\n      console.log(this.paper);\n    },\n    handleEdit(index, row) {\n      // 处理编辑逻辑\n      this.fetchFileteredQuestion(row.id);\n      console.log('编辑操作:', index, row);\n    },\n    async handleDelete(index, row) {\n      const questionId = row.id; // 获取 question id\n      await this.deleteQuestion(questionId);\n      this.queryParams.pageNum = this.currentPage;\n      await this.fetchQuestions(this.queryParams);\n      this.success('删除成功');\n      console.log('删除操作:', questionId);\n    },\n    success(ms) {\n      ElMessage({\n        message: ms,\n        type: 'success',\n        customClass: 'custom-message-class',\n        duration: 3000,\n        showClose: true\n      });\n    },\n    warning(ms) {\n      ElMessage({\n        message: ms,\n        type: 'warning',\n        customClass: 'custom-message-class',\n        duration: 3000,\n        showClose: true\n      });\n    }\n  },\n  mounted() {\n    this.queryParams.pageNum = this.currentPage;\n    this.fetchQuestions(this.queryParams);\n    this.fetchQuestionsPages();\n    console.log('apagegas', this.totalPages);\n  }\n};","map":{"version":3,"names":["mapActions","mapState","ElMessage","ref","tableRowEditId","tableColumnEditIndex","showUnitInput","row","column","value","id","blurValueInput","name","data","searchKeyword","filterQuestionType","queryParams","filterDifficulty","currentPage","dialogTableVisible","myQuestions","pageSize","totalPages","computed","questionData","question","map","description","type","tag","difficultLevel","answer","analysis","createdBy","tableData","questions","questionType","difficulty","filteredQuestions","filter","matchesKeyword","includes","matchesType","matchesDifficulty","computedTotal","questionsPages","console","log","paginatedQuestions","start","slice","methods","handleSubmit","newQuestion","updateQuestion","success","pageNum","fetchQuestions","searchQuestions","keywords","username","user","fetchFileteredQuestions","prevPage","nextPage","handlePageChange","page","composePaper","index","questionId","paper","some","item","push","warning","handleEdit","fetchFileteredQuestion","handleDelete","deleteQuestion","ms","message","customClass","duration","showClose","mounted","fetchQuestionsPages"],"sources":["C:\\Users\\86139\\Desktop\\demo_vue\\src\\components\\SearchQuestion.vue"],"sourcesContent":["<template>\r\n  <div class=\"search-question\">\r\n    <h3>查询试题</h3>\r\n    <div class=\"search-filters\">\r\n      <div class=\"form-row\">\r\n        <div class=\"form-group\" style=\"display: flex; align-items: center;\">\r\n          <label for=\"tag\" style=\"margin-left: 30px; align-self: flex-start;\">关键字:</label>\r\n          <input type=\"text\" id=\"tag\" v-model=\"tag\" placeholder=\"请输入关键字\" style=\"margin-left: 20px;width: 700px;\" />\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"question-type\">题目类型:</label>\r\n          <select id=\"question-type\" v-model=\"questionType\">\r\n            <option value=\"\">全部</option>\r\n            <option value=\"选择题\">选择题</option>\r\n            <option value=\"判断题\">判断题</option>\r\n            <option value=\"填空题\">填空题</option>\r\n            <option value=\"问答题\">问答题</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"difficulty\">难度等级:</label>\r\n          <select id=\"difficulty\" v-model=\"difficulty\">\r\n            <option value=\"\">全部</option>\r\n            <option value=\"简单\">简单</option>\r\n            <option value=\"中等\">中等</option>\r\n            <option value=\"困难\">困难</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"form-group\">\r\n          <label for=\"difficulty\">我的题目</label>\r\n            <el-checkbox v-model=\"myQuestions\" sytle=\"width: 10px;\" label=\"\" value=\"Value1\" border />\r\n        </div>\r\n        \r\n        <button @click=\"searchQuestions\" class=\"form-group\" style=\"padding: 20px 0px 20px 35px; font-size: 18px;\">查询题目</button>\r\n\r\n      </div>\r\n      \r\n    </div>\r\n                    <!-- 表格数据绑定和默认宽度 -->\r\n              \r\n  <el-table :data=\"tableData\" style=\"width: 100%; margin-left: 6%;\">\r\n    <el-table-column type=\"index\" width=\"50\"></el-table-column>\r\n    <el-table-column prop=\"question\" label=\"问题\" width=\"300\">\r\n      <template #default=\"scope\">\r\n        <el-tooltip\r\n          class=\"item\"\r\n          effect=\"light\"\r\n          :content=\"scope.row.question\"\r\n          placement=\"bottom-start\"\r\n          :fallback-placements=\"['top-start']\"\r\n          :hide-after=\"0\"\r\n          popper-class=\"custom-tooltip\"\r\n        >\r\n          <div class=\"ellipsis\">{{ scope.row.question }}</div>\r\n        </el-tooltip>\r\n      </template>\r\n    </el-table-column>\r\n    <el-table-column prop=\"questionType\" label=\"题型\" width=\"180\"></el-table-column>\r\n    <el-table-column prop=\"tag\" label=\"标签\" width=\"180\"></el-table-column>\r\n    <el-table-column prop=\"difficulty\" label=\"难度\" width=\"120\"></el-table-column>\r\n    <el-table-column prop=\"createdBy\" label=\"创建人\" width=\"120\"></el-table-column>\r\n    <el-table-column label=\"操作\" width=\"220\" header-align=\"center\">\r\n      <template #default=\"scope\">\r\n        <div style=\"display: flex; justify-content: space-between;\">\r\n          <el-button size=\"small\" type=\"primary\" @click=\"composePaper(scope.$index, scope.row)\">组卷</el-button>\r\n          <el-button size=\"small\" type=\"success\" plain @click=\"dialogTableVisible = true; handleEdit(scope.$index, scope.row)\">编辑</el-button>\r\n          <el-button size=\"small\" type=\"danger\" :disabled=\"(user.username !== scope.row.createdBy) && (user.role !== 'ADMIN')\" @click=\"handleDelete(scope.$index, scope.row)\">删除</el-button>\r\n        </div>\r\n      </template>\r\n    </el-table-column>\r\n  </el-table>\r\n    <div class=\"questions-list\">\r\n      \r\n      <!-- <ul>\r\n        <li v-for=\"question in paginatedQuestions\" :key=\"question.id\">\r\n          {{ question.question }}\r\n        </li>\r\n      </ul> -->\r\n      <!-- <div class=\"pagination\">\r\n        <button @click=\"prevPage\" :disabled=\"currentPage === 1\" style=\"padding: 5px 10px;\">上一页</button>\r\n        <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\" style=\"padding: 5px 10px;\">下一页</button>\r\n      </div> -->\r\n      \r\n\t<!-- <el-pagination\r\n\t:current-page=\"searchData.current\"\r\n\t:page-size=\"searchData.limit\"\r\n\t:total=\"total\"\r\n\t:pager-count=\"6\"\r\n\tstyle=\"text-align: center;margin-top: 20px;\"\r\n\tlayout=\"jumper, prev, pager, next, total\"\r\n\t@current-change=\"getData\" /> -->\r\n       <el-dialog v-model=\"dialogTableVisible\" title=\"编辑题目\" width=\"1050\" style=\"margin-left:20%\">\r\n    <el-table :data=\"questionData\" style=\"width: 100%\" border @cell-click=\"showUnitInput\">\r\n      <el-table-column prop=\"description\" label=\"问题\" width=\"300\">\r\n        <template #default=\"{ row, column }\">\r\n          <el-input\r\n            v-if=\"tableRowEditId === row.id && tableColumnEditIndex === column.id\"\r\n            @blur=\"blurValueInput(row, column)\"\r\n            @keyup.enter=\"blurValueInput(row, column)\"\r\n            v-model=\"row.description\"\r\n          />\r\n          <span v-else>{{ row.description }}</span>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column prop=\"type\" label=\"题型\" width=\"180\">\r\n        <template #default=\"{ row, column }\">\r\n          <el-input\r\n            v-if=\"tableRowEditId === row.id && tableColumnEditIndex === column.id\"\r\n            @blur=\"blurValueInput(row, column)\"\r\n            @keyup.enter=\"blurValueInput(row, column)\"\r\n            v-model=\"row.type\"\r\n          />\r\n          <span v-else>{{ row.type }}</span>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column prop=\"tag\" label=\"标签\" width=\"180\">\r\n        <template #default=\"{ row, column }\">\r\n          <el-input\r\n            v-if=\"tableRowEditId === row.id && tableColumnEditIndex === column.id\"\r\n            @blur=\"blurValueInput(row, column)\"\r\n            @keyup.enter=\"blurValueInput(row, column)\"\r\n            v-model=\"row.tag\"\r\n          />\r\n          <span v-else>{{ row.tag }}</span>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column prop=\"difficultLevel\" label=\"难度\" width=\"120\">\r\n        <template #default=\"{ row, column }\">\r\n          <el-input\r\n            v-if=\"tableRowEditId === row.id && tableColumnEditIndex === column.id\"\r\n            @blur=\"blurValueInput(row, column)\"\r\n            @keyup.enter=\"blurValueInput(row, column)\"\r\n            v-model=\"row.difficultLevel\"\r\n          />\r\n          <span v-else>{{ row.difficultLevel }}</span>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column prop=\"answer\" label=\"答案\" width=\"120\">\r\n        <template #default=\"{ row, column }\">\r\n          <el-input\r\n            v-if=\"tableRowEditId === row.id && tableColumnEditIndex === column.id\"\r\n            @blur=\"blurValueInput(row, column)\"\r\n            @keyup.enter=\"blurValueInput(row, column)\"\r\n            v-model=\"row.answer\"\r\n          />\r\n          <span v-else>{{ row.answer }}</span>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column label=\"操作\" width=\"120\" header-align=\"center\">\r\n        <template #default=\"{ row }\">\r\n          <el-button type=\"primary\" link @click=\"handleSubmit(row)\">确定</el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n  </el-dialog>\r\n    </div>\r\n\r\n  <div class=\"pagination\">\r\n    <el-pagination\r\n      :page-size=\"10\"\r\n      :pager-count=\"11\"\r\n      layout=\"prev, pager, next\"\r\n      :total=\"totalPages\"\r\n      @current-change=\"handlePageChange\"\r\n    />\r\n  </div>\r\n  </div>\r\n\r\n</template>\r\n\r\n<script >\r\nimport { mapActions, mapState } from 'vuex';\r\nimport { ElMessage } from 'element-plus';\r\nimport { ref } from 'vue'\r\nlet tableRowEditId = ref(null) // 控制可编辑的每一行\r\nlet tableColumnEditIndex = ref(null) //控制可编辑的每一列\r\n\r\nconst showUnitInput = (row, column) => {\r\n  //赋值给定义的变量\r\n  tableRowEditId.value = row.id //确定点击的单元格在哪行 如果数据中有ID可以用ID判断，没有可以使用其他值判断，只要能确定是哪一行即可\r\n  tableColumnEditIndex.value = column.id //确定点击的单元格在哪列 \r\n}\r\nconst blurValueInput = (row, column) => {\r\n  // tableRowEditId.value = null\r\n  // tableColumnEditIndex.value = null\r\n  //在此处调接口传数据\r\n}\r\n\r\nexport default {\r\n  name: 'SearchQuestion',\r\n  data() {\r\n    return {\r\n      searchKeyword: '',\r\n      filterQuestionType: '',\r\n      queryParams : {},\r\n      filterDifficulty: '',\r\n      currentPage: 1,\r\n      dialogTableVisible: false,\r\n      myQuestions: false,\r\n      pageSize: 5,\r\n            tableRowEditId: null, // 控制可编辑的每一行\r\n      tableColumnEditIndex: null, // 控制可编辑的每一列\r\n      totalPages: 5,\r\n    //   tableData: [\r\n    //     { \r\n    //       question: '这是一个假问题?',\r\n    //       questionType: '选择题',\r\n    //       tag: '物理',\r\n    //       difficulty: '中等',\r\n    //       analysis: '这是一个问题的解析',\r\n    //       createdBy: \"小张\",\r\n    //       id: 5\r\n    //     },\r\n    //             { \r\n    //       question: '这是一个假问题2?',\r\n    //       questionType: '选择题',\r\n    //       tag: '物理',\r\n    //       difficulty: '中等',\r\n    //       analysis: '这是一个问题的解析',\r\n    //       createdBy: \"小张\",\r\n    //       id: 3\r\n    //     }\r\n    //   ]\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapState(['questions', 'paper', 'user', 'question', 'questionsPages']),\r\n    questionData(){\r\n       return this.question.map(question => ({\r\n        description: question.description,\r\n        type: question.type,\r\n        tag: question.tag,\r\n        difficultLevel: question.difficultLevel,\r\n        answer: question.answer,\r\n        analysis:question.analysis,\r\n        createdBy: question.createdBy,\r\n        id: question.id,\r\n        }));\r\n    },\r\n    tableData() {\r\n      return this.questions.map(question => ({\r\n        question: question.description,\r\n        questionType: question.type,\r\n        tag: question.tag,\r\n        difficulty: question.difficultLevel,\r\n        analysis: question.analysis,\r\n        createdBy: question.createdBy,\r\n           id: question.id,\r\n      }));\r\n    },\r\n    filteredQuestions() {\r\n      return this.questions.filter(question => {\r\n        const matchesKeyword = question.question.includes(this.searchKeyword);\r\n        const matchesType = this.filterQuestionType ? question.questionType === this.filterQuestionType : true;\r\n        const matchesDifficulty = this.filterDifficulty ? question.difficulty === this.filterDifficulty : true;\r\n        return matchesKeyword && matchesType && matchesDifficulty;\r\n      });\r\n    },\r\n    computedTotal(){\r\n      return this.totalPages*10;\r\n    },\r\n    totalPages() {\r\n      return this.questionsPages;\r\n      console.log(\"this\", this.questionsPages);\r\n      return 1000;\r\n    },\r\n    paginatedQuestions() {\r\n      const start = (this.currentPage - 1) * this.pageSize;\r\n      return this.filteredQuestions.slice(start, start + this.pageSize);\r\n    }\r\n  },\r\n  methods: {\r\n    ...mapActions(['fetchQuestions', 'deleteQuestion', 'addQuestionToPaper', 'removeQuestionFromPaper', 'fetchFileteredQuestions', 'fetchFileteredQuestion', 'updateQuestion', 'fetchQuestionsPages']),\r\n    // viewQuestion(id){\r\n\r\n      // },\r\n    showUnitInput(row, column) {\r\n      // 赋值给定义的变量\r\n      this.tableRowEditId = row.id; // 确定点击的单元格在哪行\r\n      this.tableColumnEditIndex = column.id; // 确定点击的单元格在哪列\r\n    },\r\n    blurValueInput(row, column) {\r\n      this.tableRowEditId = null;\r\n      this.tableColumnEditIndex = null;\r\n      // 在此处调接口传数据\r\n    },\r\n    async handleSubmit(row) {\r\n      console.log(this.questions)\r\n      // console.log('row',row)\r\n      // console.log('row properties:', Object.keys(row));\r\n      // const plainRow = JSON.parse(JSON.stringify(row));\r\n      const newQuestion = {\r\n        description: row.description,\r\n        type: row.type,\r\n        answer:row.answer,\r\n        difficultLevel: row.difficultLevel,\r\n        tag: row.tag,\r\n        analysis: row.analysis,\r\n      };\r\n      console.log(newQuestion)\r\n      // console.log(this.questions)\r\n      await this.updateQuestion({'id':row.id, 'question':newQuestion});\r\n      this.success('提交成功');\r\n      this.queryParams.pageNum = this.currentPage;\r\n      this.fetchQuestions(this.queryParams);\r\n    },\r\n    searchQuestions() {\r\n      // this.currentPage = 1;\r\n      \r\n      // Initialize an empty queryParams object\r\n      \r\n      \r\n      // Add fields to queryParams only if they are not empty\r\n      if (this.tag) {\r\n        this.queryParams.keywords = this.tag;\r\n      } else {\r\n        delete this.queryParams.keywords;\r\n      }\r\n\r\n      if (this.questionType) {\r\n        this.queryParams.type = this.questionType;\r\n      } else {\r\n        delete this.queryParams.type;\r\n      }\r\n\r\n      if (this.difficulty) {\r\n        this.queryParams.difficultLevel = this.difficulty;\r\n      } else {\r\n        delete this.queryParams.difficultLevel;\r\n      }\r\n\r\n      if (this.myQuestions) {\r\n        this.queryParams.username = this.user.username;\r\n      } else {\r\n        delete this.queryParams.username;\r\n      }\r\n      delete this.queryParams.pageNum;\r\n      // Fetch filtered questions with the constructed queryParams\r\n      this.fetchFileteredQuestions(this.queryParams);\r\n      this.queryParams.pageNum = 1;\r\n      this.fetchQuestions(this.queryParams);\r\n    },\r\n    prevPage() {\r\n      if (this.currentPage > 1) {\r\n        this.currentPage--;\r\n        \r\n        this.fetchQuestions(this.currentPage);\r\n      }\r\n    },\r\n    nextPage() {\r\n      if (this.currentPage < this.totalPages) {\r\n        this.currentPage++;\r\n        this.fetchQuestions(this.currentPage);\r\n      }\r\n    },\r\n    handlePageChange(page) {\r\n      console.log('Page changed to:', page); // 日志记录当前页码\r\n      this.currentPage = page;\r\n      this.queryParams.pageNum = page;\r\n      this.fetchQuestions(this.queryParams); // 触发 Vuex action 以获取新页数据\r\n    },\r\n    composePaper(index, row) {\r\n      const questionId = row.id; // 获取 question id\r\n      // this.addQuestionToPaper(row);\r\n      if (!this.paper.some(item => item.id === row.id)) {\r\n        this.paper.push(row);\r\n        this.success('加入成功');\r\n      } else {\r\n        this.warning('已加入');\r\n      }\r\n      console.log('组卷操作:', questionId);\r\n      console.log(row)\r\n      console.log(this.paper)\r\n      \r\n    },\r\n    handleEdit(index, row) {\r\n      // 处理编辑逻辑\r\n      this.fetchFileteredQuestion(row.id)\r\n      console.log('编辑操作:', index, row);\r\n\r\n    },\r\n    async handleDelete(index, row) {\r\n      const questionId = row.id; // 获取 question id\r\n      await this.deleteQuestion(questionId);\r\n      this.queryParams.pageNum = this.currentPage;\r\n      await this.fetchQuestions(this.queryParams);\r\n      this.success('删除成功');\r\n      console.log('删除操作:', questionId);\r\n    },\r\n    success(ms){\r\n      ElMessage({\r\n        message: ms,\r\n        type: 'success',\r\n        customClass: 'custom-message-class',\r\n        duration: 3000,\r\n        showClose: true\r\n      });\r\n    },\r\n    warning(ms){\r\n      ElMessage({\r\n        message: ms,\r\n        type: 'warning',\r\n        customClass: 'custom-message-class',\r\n        duration: 3000,\r\n        showClose: true\r\n      });\r\n    }\r\n  },\r\n  mounted() {\r\n    this.queryParams.pageNum = this.currentPage;\r\n    this.fetchQuestions(this.queryParams);\r\n    this.fetchQuestionsPages();\r\n    console.log('apagegas',this.totalPages);\r\n  }\r\n\r\n};\r\n</script>\r\n\r\n<style>\r\n.search-question {\r\n  flex: 1;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  overflow: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.tabs {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.tabs button {\r\n  background-color: #409eff;\r\n  color: #fff;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  cursor: pointer;\r\n  margin: 0 5px;\r\n}\r\n\r\n.tabs button.active {\r\n  background-color: #66b1ff;\r\n}\r\n\r\n.form-container, .search-container {\r\n  background: #fff;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\nh3 {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\nform {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.form-row {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 15px;\r\n  margin-left: 1px;\r\n}\r\n\r\n.form-group {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 0 15px;\r\n}\r\n\r\n.form-group:first-child {\r\n  margin-left: 0;\r\n}\r\n\r\n.form-group:last-child {\r\n  margin-right: 0;\r\n}\r\n\r\nlabel {\r\n  margin-bottom: 5px;\r\n  font-weight: bold;\r\n}\r\n\r\ninput, select, textarea {\r\n  padding: 10px;\r\n  border: 1px solid #dcdfe6;\r\n  border-radius: 4px;\r\n  font-size: 14px;\r\n  width: 100%;\r\n}\r\n\r\ntextarea {\r\n  resize: vertical;\r\n}\r\n\r\ntextarea#question, textarea#answer, textarea#analysis {\r\n  height: 100px;\r\n}\r\n\r\n.submit-button {\r\n  background-color: #409eff;\r\n  color: #fff;\r\n  padding: 10px 20px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  align-self: center;\r\n  margin-top: 20px;\r\n}\r\n\r\n.submit-button:hover {\r\n  background-color: #66b1ff;\r\n}\r\n\r\n\r\n.pagination {\r\n  position: absolute;\r\n  bottom: 40px; /* 距离底部的距离 */\r\n  left: 58%; /* 水平居中 */\r\n  transform: translateX(-50%); /* 水平居中 */\r\n  display: flex;\r\n    justify-content: center;\r\n  align-items: center;\r\n  /* justify-content: space-between; */\r\n  width: 200px; /* 指定pagination的宽度 */\r\n}\r\n\r\n.pagination button {\r\n  background-color: #409eff;\r\n  color: #fff;\r\n  padding: 5px 10px;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  width: 80px; /* 指定按钮的宽度 */\r\n}\r\n\r\n.pagination button:disabled {\r\n  background-color: #a0cfff;\r\n}\r\n\r\n.ellipsis {\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  width: 100%;\r\n}\r\n\r\n.custom-tooltip {\r\n  max-width: 200px; /* 设置最大宽度 */\r\n  white-space: pre-wrap; /* 保证文本自动换行 */\r\n  word-wrap: break-word; /* 自动换行 */\r\n  word-break: break-all; /* 强制换行 */\r\n}\r\n\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}