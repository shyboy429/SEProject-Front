{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* eslint-disable no-unused-vars */\n\nimport { createStore } from 'vuex';\nimport axios from 'axios';\n\n// 设置 Axios 基地址\naxios.defaults.baseURL = 'http://localhost:8181';\nconst store = createStore({\n  state: {\n    questions: [],\n    // 存储题目列表\n    exams: [],\n    // 存储考试列表\n    user: null // 存储当前登录用户\n  },\n  mutations: {\n    // 设置题目列表\n    setQuestions(state, questions) {\n      state.questions = questions;\n    },\n    // 添加新题目\n    addQuestion(state, question) {\n      state.questions.push(question);\n    },\n    // 设置考试列表\n    setExams(state, exams) {\n      state.exams = exams;\n    },\n    // 添加新考试\n    addExam(state, exam) {\n      state.exams.push(exam);\n    },\n    // 设置当前用户\n    setUser(state, user) {\n      state.user = user;\n    }\n  },\n  actions: {\n    // 获取题目列表\n    async fetchQuestions({\n      commit\n    }) {\n      try {\n        const response = await axios.get('/api/questions');\n        commit('setQuestions', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setQuestions', []);\n      }\n    },\n    // 添加新题目\n    async addQuestion({\n      commit\n    }, question) {\n      try {\n        const response = await axios.post('/api/questions', question);\n        commit('addQuestion', response.data);\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('addQuestion', question);\n      }\n    },\n    // 获取考试列表\n    async fetchExams({\n      commit\n    }) {\n      try {\n        const response = await axios.get('/api/exams');\n        commit('setExams', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setExams', []);\n      }\n    },\n    // 创建新考试\n    async createExam({\n      commit\n    }, exam) {\n      try {\n        const response = await axios.post('/api/exams', exam);\n        commit('addExam', response.data);\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到考试列表\n        commit('addExam', exam);\n      }\n    },\n    // 提交考试\n    async submitExam(_, {\n      examId,\n      answers\n    }) {\n      try {\n        await axios.post(`/api/exams/${examId}/submit`, {\n          answers\n        });\n      } catch (error) {\n        // 提交失败时，暂时不做处理\n      }\n    },\n    // 用户登录\n    async login({\n      commit\n    }, credentials) {\n      try {\n        const response = await axios.post('/api/login', credentials);\n        commit('setUser', response.data.user);\n        return {\n          success: true\n        };\n      } catch (error) {\n        return {\n          success: false,\n          message: error.response ? error.response.data.message : '网络错误'\n        };\n      }\n    }\n  }\n});\nexport default store;","map":{"version":3,"names":["createStore","axios","defaults","baseURL","store","state","questions","exams","user","mutations","setQuestions","addQuestion","question","push","setExams","addExam","exam","setUser","actions","fetchQuestions","commit","response","get","data","error","post","fetchExams","createExam","submitExam","_","examId","answers","login","credentials","success","message"],"sources":["C:/Users/86139/Desktop/demo_vue/src/store/index.js"],"sourcesContent":["/* eslint-disable no-unused-vars */\n\nimport { createStore } from 'vuex';\nimport axios from 'axios';\n\n// 设置 Axios 基地址\naxios.defaults.baseURL = 'http://localhost:8181';\n\nconst store = createStore({\n  state: {\n    questions: [], // 存储题目列表\n    exams: [], // 存储考试列表\n    user: null, // 存储当前登录用户\n  },\n  mutations: {\n    // 设置题目列表\n    setQuestions(state, questions) {\n      state.questions = questions;\n    },\n    // 添加新题目\n    addQuestion(state, question) {\n      state.questions.push(question);\n    },\n    // 设置考试列表\n    setExams(state, exams) {\n      state.exams = exams;\n    },\n    // 添加新考试\n    addExam(state, exam) {\n      state.exams.push(exam);\n    },\n    // 设置当前用户\n    setUser(state, user) {\n      state.user = user;\n    }\n  },\n  actions: {\n    // 获取题目列表\n    async fetchQuestions({ commit }) {\n      try {\n        const response = await axios.get('/api/questions');\n        commit('setQuestions', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setQuestions', []);\n      }\n    },\n    // 添加新题目\n    async addQuestion({ commit }, question) {\n      try {\n        const response = await axios.post('/api/questions', question);\n        commit('addQuestion', response.data);\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到题目列表\n        commit('addQuestion', question);\n      }\n    },\n    // 获取考试列表\n    async fetchExams({ commit }) {\n      try {\n        const response = await axios.get('/api/exams');\n        commit('setExams', response.data);\n      } catch (error) {\n        // 请求失败时，设置空数据\n        commit('setExams', []);\n      }\n    },\n    // 创建新考试\n    async createExam({ commit }, exam) {\n      try {\n        const response = await axios.post('/api/exams', exam);\n        commit('addExam', response.data);\n      } catch (error) {\n        // 请求失败时，直接添加传入的数据到考试列表\n        commit('addExam', exam);\n      }\n    },\n    // 提交考试\n    async submitExam(_, { examId, answers }) {\n      try {\n        await axios.post(`/api/exams/${examId}/submit`, { answers });\n      } catch (error) {\n        // 提交失败时，暂时不做处理\n      }\n    },\n    // 用户登录\n    async login({ commit }, credentials) {\n      try {\n        const response = await axios.post('/api/login', credentials);\n        commit('setUser', response.data.user);\n        return { success: true };\n      } catch (error) {\n        return { success: false, message: error.response ? error.response.data.message : '网络错误' };\n      }\n    }\n  }\n});\n\nexport default store;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}