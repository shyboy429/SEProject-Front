{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"创建考试试卷\", -1 /* HOISTED */);\nconst _hoisted_2 = [\"value\"];\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"创建试卷\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.createExam && $options.createExam(...args), [\"prevent\"]))\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.title = $event),\n    placeholder: \"试卷标题\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.title]]), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.selectedQuestion = $event),\n    multiple: \"\"\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.questions, question => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: question.id,\n      value: question.id\n    }, _toDisplayString(question.title), 9 /* TEXT, PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedQuestion]]), _hoisted_3], 32 /* NEED_HYDRATION */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.exams, exam => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: exam.id\n    }, [_createElementVNode(\"h3\", null, _toDisplayString(exam.title), 1 /* TEXT */), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(exam.questions, question => {\n      return _openBlock(), _createElementBlock(\"li\", {\n        key: question.id\n      }, _toDisplayString(question.title), 1 /* TEXT */);\n    }), 128 /* KEYED_FRAGMENT */))])]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"names":["_createElementVNode","type","_createElementBlock","_hoisted_1","onSubmit","_cache","_withModifiers","args","$options","createExam","$event","$data","title","placeholder","required","selectedQuestion","multiple","_Fragment","_renderList","_ctx","questions","question","key","id","value","_hoisted_2","_hoisted_3","exams","exam","_toDisplayString"],"sources":["C:\\Users\\wu\\Desktop\\软工\\springboot_vue\\demo_vue\\src\\components\\ExamPaper.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>创建考试试卷</h2>\r\n    <form @submit.prevent=\"createExam\">\r\n      <input v-model=\"title\" placeholder=\"试卷标题\" required />\r\n      <select v-model=\"selectedQuestion\" multiple>\r\n        <option v-for=\"question in questions\" :key=\"question.id\" :value=\"question.id\">\r\n          {{ question.title }}\r\n        </option>\r\n      </select>\r\n      <button type=\"submit\">创建试卷</button>\r\n    </form>\r\n    <div v-for=\"exam in exams\" :key=\"exam.id\">\r\n      <h3>{{ exam.title }}</h3>\r\n      <ul>\r\n        <li v-for=\"question in exam.questions\" :key=\"question.id\">{{ question.title }}</li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapState, mapActions } from 'vuex';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      title: '',\r\n      selectedQuestion: [],\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapState(['questions', 'exams']),\r\n  },\r\n  methods: {\r\n    ...mapActions(['fetchQuestions', 'fetchExams', 'createExam']),\r\n    async createExam() {\r\n      const exam = {\r\n        title: this.title,\r\n        questions: this.selectedQuestion,\r\n      };\r\n      await this.createExam(exam);\r\n      this.title = '';\r\n      this.selectedQuestion = [];\r\n    },\r\n  },\r\n  created() {\r\n    this.fetchQuestions();\r\n    this.fetchExams();\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";gCAEIA,mBAAA,CAAe,YAAX,QAAM;mBAFd;gCAUMA,mBAAA,CAAmC;EAA3BC,IAAI,EAAC;AAAQ,GAAC,MAAI;;uBAT9BC,mBAAA,CAiBM,cAhBJC,UAAe,EACfH,mBAAA,CAQO;IARAI,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAHjBC,cAAA,KAAAC,IAAA,KAG2BC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;sBAC/BP,mBAAA,CAAqD;IAJ3D,uBAAAK,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAIsBC,KAAA,CAAAC,KAAK,GAAAF,MAAA;IAAEG,WAAW,EAAC,MAAM;IAACC,QAAQ,EAAR;iDAA1BH,KAAA,CAAAC,KAAK,E,mBACrBZ,mBAAA,CAIS;IATf,uBAAAK,MAAA,QAAAA,MAAA,MAAAK,MAAA,IAKuBC,KAAA,CAAAI,gBAAgB,GAAAL,MAAA;IAAEM,QAAQ,EAAR;yBACjCd,mBAAA,CAESe,SAAA,QARjBC,WAAA,CAMmCC,IAAA,CAAAC,SAAS,EAArBC,QAAQ;yBAAvBnB,mBAAA,CAES;MAF8BoB,GAAG,EAAED,QAAQ,CAACE,EAAE;MAAGC,KAAK,EAAEH,QAAQ,CAACE;wBACrEF,QAAQ,CAACT,KAAK,wBAP3Ba,UAAA;2EAKuBd,KAAA,CAAAI,gBAAgB,E,GAKjCW,UAAmC,C,+CAErCxB,mBAAA,CAKMe,SAAA,QAjBVC,WAAA,CAYwBC,IAAA,CAAAQ,KAAK,EAAbC,IAAI;yBAAhB1B,mBAAA,CAKM;MALsBoB,GAAG,EAAEM,IAAI,CAACL;QACpCvB,mBAAA,CAAyB,YAAA6B,gBAAA,CAAlBD,IAAI,CAAChB,KAAK,kBACjBZ,mBAAA,CAEK,c,kBADHE,mBAAA,CAAmFe,SAAA,QAf3FC,WAAA,CAe+BU,IAAI,CAACR,SAAS,EAA1BC,QAAQ;2BAAnBnB,mBAAA,CAAmF;QAA3CoB,GAAG,EAAED,QAAQ,CAACE;0BAAOF,QAAQ,CAACT,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}