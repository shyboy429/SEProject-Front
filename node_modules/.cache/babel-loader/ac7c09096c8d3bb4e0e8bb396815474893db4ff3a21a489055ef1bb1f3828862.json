{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Message } from '@arco-design/web-vue';\nimport { reactive, ref, computed, watch } from 'vue';\nimport { addQuestionRequest, delQuestionItemRequest, delQuestionRequest, updateQuestionItemRequest, updateQuestionCorrectRequest, updateQuestionRequest } from '../apis/question-api';\nimport { getQuestionType, letterList } from '../utils/question-config';\nimport BaseQuestionPreview from './BaseQuestionPreview.vue';\nexport default {\n  __name: 'QuestionBank',\n  props: {\n    topicType: String,\n    question: {\n      type: Object,\n      default: {\n        \"content\": \"\",\n        \"courseId\": \"\",\n        \"difficulty\": \"\",\n        \"analysis\": \"\"\n      }\n    },\n    options: {\n      type: Array,\n      default: []\n    }\n  },\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const props = __props;\n    //类型\n    const type = ref(getQuestionType(props.topicType));\n    //题目\n    const question = reactive(props.question);\n    const isCreate = question.id == undefined;\n    //选项\n    const options = ref(props.options);\n    watch(() => props.options, value => {\n      options.value = value;\n      init();\n    });\n    //解答区，\n    const init = () => {\n      if (type.value.enumName == \"SUBJECTIVE\") {\n        if (options.value.length == 0) {\n          options.value.push({\n            content: \"\"\n          });\n        }\n      }\n      if (type.value.enumName == \"JUDGMENTAL\") {\n        if (options.value.length == 0) {\n          options.value.push({\n            content: \"对\"\n          });\n          options.value.push({\n            content: \"错\"\n          });\n        }\n      }\n    };\n    //添加选项\n    const addOption = () => {\n      if (question['id'] == undefined || options.value.length == 0 || options.value[options.value.length - 1].id != undefined) {\n        options.value.push({\n          \"content\": \"\"\n        });\n      } else {\n        Message.info(\"请完成当前选择后，在添加~\");\n      }\n    };\n\n    //删除选项\n    const delOption = async index => {\n      if (isCreate) {} else {\n        await delQuestionItemRequest(options.value[index].id);\n      }\n      options.value.splice(index, 1);\n    };\n\n    //创建题目\n    const createQuestion = () => {\n      if (question.content && question.content == '') {\n        Message.info('题目不能为空~');\n        return;\n      }\n      const params = {\n        ...question,\n        'options': options.value\n      };\n      params['type'] = props.topicType;\n      addQuestionRequest(params).then(res => {});\n    };\n    const handleBlur = (component, index) => {\n      console.log(component);\n      let questField;\n      switch (component) {\n        case 'question':\n          questField = 'content';\n        case 'analysis':\n          questField = 'analysis';\n        case 'difficulty':\n          questField = 'difficulty';\n          saveQuestion(questField);\n          break;\n        case 'option':\n          saveOption(options.value[index]);\n          break;\n      }\n    };\n    // 更新题目/jiex \n    const saveQuestion = info => {\n      if (isCreate) {\n        return;\n      }\n      const params = {\n        id: question.id,\n        courseId: question.courseId\n      };\n      console.log(question[info]);\n      console.log(props.question[info]);\n      // 内容没有更改不更新\n      if (question[info] == null) {\n        return;\n      }\n      console.log(question[info]);\n      params[info] = question[info];\n      updateQuestionRequest(params).then(res => []);\n    };\n    // 添加/修改选项\n    const saveOption = item => {\n      if (isCreate) {\n        return;\n      }\n      //编辑下修改答案\n      item['questionId'] = question.id;\n      updateQuestionItemRequest(item).then(res => {\n        //添加选项会返回id\n        const data = res.data.data;\n        if (data) {\n          item.id = data;\n        }\n      });\n    };\n    //更改单/多正确选项\n    const saveCorrect = index => {\n      if (isCreate) {\n        updateCorrect(index);\n        return;\n      }\n      updateQuestionCorrectRequest(options.value[index].id).then(res => {\n        updateCorrect(index);\n      });\n    };\n    const updateCorrect = index => {\n      for (let i = 0; i < options.value.length; i++) {\n        const item = options.value[i];\n        if (i == index) {\n          if (type.value.enumName == 'MULTIPLE_CHOICE') {\n            if (item['answer'] != null) {\n              item['answer'] = null;\n            } else {\n              item['answer'] = 1;\n            }\n          } else {\n            item['answer'] = 1;\n          }\n        } else {\n          if (type.value.enumName != 'MULTIPLE_CHOICE') {\n            item['answer'] = null;\n          }\n        }\n      }\n    };\n    const __returned__ = {\n      props,\n      type,\n      question,\n      isCreate,\n      options,\n      init,\n      addOption,\n      delOption,\n      createQuestion,\n      handleBlur,\n      saveQuestion,\n      saveOption,\n      saveCorrect,\n      updateCorrect,\n      get Message() {\n        return Message;\n      },\n      reactive,\n      ref,\n      computed,\n      watch,\n      get addQuestionRequest() {\n        return addQuestionRequest;\n      },\n      get delQuestionItemRequest() {\n        return delQuestionItemRequest;\n      },\n      get delQuestionRequest() {\n        return delQuestionRequest;\n      },\n      get updateQuestionItemRequest() {\n        return updateQuestionItemRequest;\n      },\n      get updateQuestionCorrectRequest() {\n        return updateQuestionCorrectRequest;\n      },\n      get updateQuestionRequest() {\n        return updateQuestionRequest;\n      },\n      get getQuestionType() {\n        return getQuestionType;\n      },\n      get letterList() {\n        return letterList;\n      },\n      BaseQuestionPreview\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["Message","reactive","ref","computed","watch","addQuestionRequest","delQuestionItemRequest","delQuestionRequest","updateQuestionItemRequest","updateQuestionCorrectRequest","updateQuestionRequest","getQuestionType","letterList","BaseQuestionPreview","props","__props","type","topicType","question","isCreate","id","undefined","options","value","init","enumName","length","push","content","addOption","info","delOption","index","splice","createQuestion","params","then","res","handleBlur","component","console","log","questField","saveQuestion","saveOption","courseId","item","data","saveCorrect","updateCorrect","i"],"sources":["C:/Users/wu/Desktop/软工/springboot_vue/demo_vue/src/components/QuestionBank.vue"],"sourcesContent":["<template>\r\n    <BaseQuestionPreview mode=\"editor\" @editorBlur=\"handleBlur\" :question=\"question\" :show-area=\"true\" :topic-type=\"props.topicType\" :options=\"options\">\r\n        <template #option_footer >\r\n            <a-button long @click=\"addOption\">添加选项</a-button>\r\n        </template>\r\n        <template #option=\"{ index }\">\r\n            <a-button @click=\"delOption(index)\" status=\"danger\" style=\"margin-right: 5px;\">\r\n                <template #icon>\r\n                    <icon-delete />\r\n                </template>\r\n            </a-button>\r\n            <a-button class=\"letter\" @click=\"saveCorrect(index)\">\r\n               {{options[index].answer!=null?\"取消选择\":\"选择\"}}\r\n            </a-button>\r\n        </template>\r\n        <!-- 保存区 -->\r\n        <template #footer>\r\n            <div class=\"public\">\r\n                <span class=\"title\">可见状态：</span>\r\n                <a-radio-group type=\"button\" @change=\"saveQuestion('isPublic')\" default-value=\"self\"\r\n                    v-model:model-value=\"question.isPublic\">\r\n                    <a-radio value=\"self\">自己</a-radio>\r\n                    <a-radio value=\"course\">课程</a-radio>\r\n                    <a-radio value=\"overt\">公开</a-radio>\r\n                </a-radio-group>\r\n            </div>\r\n            <div class=\"public\">\r\n                <span class=\"title\">题目分值：</span>\r\n                <a-input-number :style=\"{ width: '170px' }\" v-model=\"question.score\" @blur=\"saveQuestion('score')\"\r\n                    placeholder=\"输入分值\" :default-value=\"5\" mode=\"button\" class=\"input-demo\" />\r\n            </div>\r\n            <a-button v-if=\"isCreate\" long type=\"primary\" size=\"large\" @click=\"createQuestion\">保存</a-button>\r\n        </template>\r\n    </BaseQuestionPreview>\r\n</template>\r\n<script setup>\r\nimport { Message } from '@arco-design/web-vue';\r\nimport { reactive, ref, computed, watch } from 'vue';\r\nimport { addQuestionRequest, delQuestionItemRequest, delQuestionRequest, updateQuestionItemRequest, updateQuestionCorrectRequest, updateQuestionRequest } from '../apis/question-api';\r\nimport { getQuestionType, letterList } from '../utils/question-config';\r\nimport BaseQuestionPreview from './BaseQuestionPreview.vue';\r\nconst props = defineProps({\r\n    topicType: String,\r\n    question: {\r\n        type: Object,\r\n        default: {\r\n            \"content\": \"\",\r\n            \"courseId\": \"\",\r\n            \"difficulty\": \"\",\r\n            \"analysis\": \"\",\r\n        }\r\n    },\r\n    options: {\r\n        type: Array,\r\n        default: []\r\n    },\r\n})\r\n//类型\r\nconst type = ref(getQuestionType(props.topicType))\r\n//题目\r\nconst question = reactive(props.question)\r\nconst isCreate = question.id == undefined\r\n//选项\r\nconst options = ref(props.options)\r\nwatch(() => props.options, (value) => {\r\n    options.value = value\r\n    init()\r\n})\r\n//解答区，\r\nconst init = () => {\r\n    if (type.value.enumName == \"SUBJECTIVE\") {\r\n        if (options.value.length == 0) {\r\n            options.value.push({\r\n                content: \"\"\r\n            })\r\n        }\r\n    }\r\n    if (type.value.enumName == \"JUDGMENTAL\") {\r\n        if (options.value.length == 0) {\r\n            options.value.push({\r\n                content: \"对\"\r\n            })\r\n            options.value.push({\r\n                content: \"错\"\r\n            })\r\n        }\r\n    }\r\n}\r\n//添加选项\r\nconst addOption = () => {\r\n    if (question['id'] == undefined || options.value.length == 0 || (options.value[options.value.length - 1].id != undefined)) {\r\n        options.value.push({\r\n            \"content\": \"\",\r\n        })\r\n    } else {\r\n        Message.info(\"请完成当前选择后，在添加~\")\r\n    }\r\n}\r\n\r\n//删除选项\r\nconst delOption =async (index) => {\r\n    if(isCreate){\r\n        \r\n    }else{\r\n       await delQuestionItemRequest(options.value[index].id)\r\n    }\r\n    options.value.splice(index, 1);\r\n}\r\n\r\n//创建题目\r\nconst createQuestion = () => {\r\n    if (question.content && question.content == '') {\r\n        Message.info('题目不能为空~')\r\n        return\r\n    }\r\n    const params = {\r\n        ...question,\r\n        'options': options.value\r\n    }\r\n    params['type'] = props.topicType\r\n    addQuestionRequest(params).then(res => {\r\n\r\n    })\r\n}\r\nconst handleBlur=(component,index)=>{\r\n    console.log(component)\r\n    let questField\r\n    switch(component){\r\n        case 'question':\r\n            questField='content'\r\n        case 'analysis':\r\n            questField='analysis'\r\n        case 'difficulty':\r\n            questField='difficulty'\r\n            saveQuestion(questField)\r\n            break;\r\n        case 'option':\r\n            saveOption(options.value[index])\r\n            break\r\n    }\r\n}\r\n// 更新题目/jiex \r\nconst saveQuestion = (info) => {\r\n    if (isCreate) {\r\n        return\r\n    }\r\n    const params = {\r\n        id: question.id,\r\n        courseId: question.courseId\r\n    }\r\n    console.log(question[info])\r\n    console.log(props.question[info])\r\n    // 内容没有更改不更新\r\n    if ((question[info] == null)) {\r\n        return\r\n    }\r\n\r\n    console.log(question[info])\r\n    params[info] = question[info]\r\n\r\n    updateQuestionRequest(params).then(res => [\r\n    ])\r\n}\r\n// 添加/修改选项\r\nconst saveOption = (item) => {\r\n    if (isCreate) {\r\n        return\r\n    }\r\n    //编辑下修改答案\r\n    item['questionId'] = question.id\r\n    updateQuestionItemRequest(item).then(res => {\r\n        //添加选项会返回id\r\n        const data = res.data.data\r\n        if (data) {\r\n            item.id = data\r\n        }\r\n    })\r\n\r\n}\r\n//更改单/多正确选项\r\nconst saveCorrect = (index) => {\r\n    if (isCreate) {\r\n        updateCorrect(index)\r\n        return\r\n    }\r\n    updateQuestionCorrectRequest(options.value[index].id).then(res => {\r\n        updateCorrect(index)\r\n    })\r\n\r\n}\r\nconst updateCorrect = (index) => {\r\n    for (let i = 0; i < options.value.length; i++) {\r\n        const item = options.value[i];\r\n        if (i == index) {\r\n            if (type.value.enumName == 'MULTIPLE_CHOICE') {\r\n                if (item['answer'] != null) {\r\n                    item['answer'] = null\r\n                } else {\r\n                    item['answer'] = 1\r\n                }\r\n            } else {\r\n                item['answer'] = 1\r\n            }\r\n        } else {\r\n            if (type.value.enumName != 'MULTIPLE_CHOICE') {\r\n                item['answer'] = null\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style lang=\"less\" scoped>\r\n:deep(.option-item) {\r\n    flex-wrap: wrap;\r\n}\r\n:deep(.arco-radio),:deep(.arco-checkbox){\r\n   display: block;\r\n}\r\n\r\n\r\n:deep(.option-item:hover) {\r\n    background-color: #fff !important;\r\n}\r\n\r\n:deep(.question-info .info) {\r\n    float: none!important;\r\n}\r\n\r\n.public {\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 10px;\r\n\r\n    .title {\r\n        color: var(--color-text-3);\r\n    }\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}