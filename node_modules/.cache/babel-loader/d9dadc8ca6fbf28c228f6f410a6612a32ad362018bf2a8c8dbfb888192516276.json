{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapActions, mapState } from 'vuex';\nimport { ElMessage } from 'element-plus';\nimport * as echarts from 'echarts';\nexport default {\n  name: 'PaperManagement',\n  data() {\n    return {\n      dialogFormVisible: false,\n      dialogTableVisible: false,\n      chart: null,\n      dialogChartVisible: false,\n      dialogTable2Visible: false,\n      paper_id: 0,\n      formLabelWidth: '140px',\n      form: {\n        title: '',\n        introduction: '',\n        createdBy: '',\n        createTime: '',\n        updateTime: ''\n      },\n      searchKeyword: '',\n      filterQuestionType: '',\n      filterDifficulty: '',\n      currentPage: 1,\n      pageSize: 5\n      //   tableData: [\n      //     { \n      //       title: '这是一个假问题?',\n      //       introduction: '选择题',\n      //       createTime: '2024-06-03',\n      //       updateTime: '2024-06-03',\n      //       createdBy: \"小张\",\n      //       id: 5\n      //     }\n      //   ],\n      //   paperData: [\n      //     { \n      //       question: '这是一个假问题?',\n      //       questionType: '选择题',\n      //       tag: '物理',\n      //       difficulty: '中等',\n      //       analysis: '这是一个问题的解析',\n      //       createdBy: \"小张\",\n      //       id: 5\n      //     }\n      //   ]\n    };\n  },\n  computed: {\n    ...mapState(['papers', 'paper', 'paperQuestions', 'user', 'papersPages']),\n    totalPages() {\n      return this.papersPages;\n      console.log(\"this\", this.questionsPages);\n      return 1000;\n    },\n    tableData() {\n      return this.papers.map(paper => ({\n        title: paper.title,\n        introduction: paper.introduction,\n        createTime: paper.createTime,\n        updateTime: paper.updateTime,\n        createdBy: paper.createdBy,\n        id: paper.id\n      }));\n    },\n    paperData() {\n      return this.paperQuestions.map(question => ({\n        question: question.description,\n        questionType: question.type,\n        tag: question.tag,\n        difficulty: question.difficultLevel,\n        analysis: question.analysis,\n        id: question.id,\n        createdBy: question.createdBy\n      }));\n    },\n    selectedData() {\n      return this.paper.map(question => ({\n        question: question.question,\n        questionType: question.questionType,\n        tag: question.tag,\n        difficulty: question.difficulty,\n        id: question.id,\n        analysis: question.analysis,\n        createdBy: question.createdBy\n      }));\n    }\n  },\n  methods: {\n    ...mapActions(['fetchPapers', 'addPaper', 'addQuestionToPaper', 'removeFromPaper', 'fetchPaperQuestion', 'updatePaperQuestions', 'deletePaper', 'fetchPapersPages']),\n    automaticPaper() {\n      // 自动组卷的逻辑\n    },\n    // addPaper() {\n    //   this.dialogFormVisible = true;\n    // },\n    async ab() {\n      setTimeout(() => {\n        this.dialogChartVisible = true;\n      }, 700);\n    },\n    async savePaper() {\n      const currentDateTime = new Date().toISOString().slice(0, 19).replace('T', ' ');\n      this.form.createTime = currentDateTime;\n      this.form.updateTime = currentDateTime;\n      this.tableData.push({\n        ...this.form,\n        id: this.tableData.length + 1\n      });\n\n      // 遍历 this.paper 并提取每个 question 的 id\n      const content = this.paper.map(item => item.id).join(' ');\n      const newPaper = {\n        title: this.form.title,\n        introduction: this.form.introduction,\n        createdBy: this.user.username,\n        createTime: this.form.createTime,\n        updateTime: this.form.updateTime,\n        // 改！\n        content: content,\n        id: \"\"\n      };\n      const result = await this.addPaper(newPaper);\n      this.dialogFormVisible = false;\n      this.form = {\n        title: '',\n        introduction: '',\n        createdBy: '',\n        createTime: '',\n        updateTime: ''\n      };\n      await this.fetchPapers(this.currentPage);\n      if (!result.success) {\n        this.success('创建成功');\n      } else {\n        this.error(result.error);\n      }\n      this.fetchPapersPages();\n    },\n    composePaper(index, row) {\n      const questionId = row.id; // 获取 question id\n      this.addQuestionToPaper(questionId);\n      console.log('组卷操作:', questionId);\n    },\n    handleCartDelete(row) {\n      const questionId = row.id; // 获取 question id\n      console.log(row.id);\n      this.removeFromPaper(questionId);\n      // this.paper = this.paper.filter(item => item.id !== row.id);\n      console.log(this.paper);\n      ElMessage({\n        message: '移除成功',\n        type: 'success',\n        customClass: 'custom-message-class',\n        duration: 3000,\n        showClose: true\n      });\n    },\n    querySelected() {\n      if (this.paper.length === 0) {\n        this.selectedData = [];\n      } else {\n        this.selectedData = this.paper.map(question => ({\n          question: question.question,\n          questionType: question.questionType,\n          tag: question.tag,\n          difficulty: question.difficulty,\n          analysis: question.analysis,\n          createdBy: question.createdBy,\n          id: question.id\n        }));\n      }\n    },\n    queryPaper(index, row) {\n      console.log('query');\n      const paperId = row.id; // 获取 question id\n      this.paper_id = row.id;\n      console.log('query');\n      this.fetchPaperQuestion(paperId);\n      console.log('查看试卷:', paperId);\n    },\n    async handlePaperDelete(index, row) {\n      const paperId = row.id; // 获取 question id\n      const result = await this.deletePaper(paperId);\n      if (result.success !== 'error') {\n        this.success('删除成功');\n      } else {\n        this.error(result.error);\n      }\n      await this.fetchPapersPages();\n      this.fetchPapers(this.currentPage);\n    },\n    analysis(index, row) {\n      this.queryPaper(index, row);\n      this.initChart();\n    },\n    async handleDelete(row) {\n      console.log(this.paper_id);\n      const paperID = this.paper_id;\n      console.log(row);\n      const result = await this.updatePaperQuestions({\n        'paperid': paperID,\n        'questionid': row.id\n      });\n      this.fetchPapers(this.currentPage);\n      if (result.success !== 'error') {\n        this.success('删除成功');\n      } else {\n        this.error(result.error);\n      }\n    },\n    // handleDelete(index, row) {\n    //   this.tableData.splice(index, 1);\n    // },\n    // handleEdit(index, row) {\n    //   // 编辑试卷的逻辑\n    // },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage -= 1;\n      }\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage += 1;\n      }\n    },\n    success(ms) {\n      ElMessage({\n        message: ms,\n        type: 'success',\n        customClass: 'custom-message-class',\n        duration: 3000,\n        showClose: true\n      });\n    },\n    warning(ms) {\n      ElMessage({\n        message: ms,\n        type: 'warning',\n        customClass: 'custom-message-class',\n        duration: 3000,\n        showClose: true\n      });\n    },\n    error(ms) {\n      ElMessage({\n        message: ms,\n        type: 'error',\n        customClass: 'custom-message-class',\n        duration: 3000,\n        showClose: true\n      });\n    },\n    initChart() {\n      this.$nextTick(() => {\n        console.log(this.paperQuestions);\n        this.chart = echarts.init(document.getElementById('myChart'));\n\n        // 计算每种类型的数量\n        const typeCounts = this.paperQuestions.reduce((acc, item) => {\n          acc[item.type] = (acc[item.type] || 0) + 1;\n          return acc;\n        }, {});\n\n        // 将计算结果转换为 ECharts 数据格式\n        const data = Object.keys(typeCounts).map(type => {\n          return {\n            value: typeCounts[type],\n            name: type\n          };\n        });\n        const option = {\n          title: {\n            text: '题目类型占比图:',\n            left: 'left'\n          },\n          tooltip: {\n            trigger: 'item',\n            formatter: '{a} <br/>{b} : {c} ({d}%)'\n          },\n          legend: {\n            type: 'scroll',\n            orient: 'vertical',\n            right: 0,\n            top: 'center',\n            icon: 'circle',\n            selectedMode: 'multiple',\n            formatter: name => {\n              let total = data.reduce((sum, item) => sum + item.value, 0);\n              let item = data.find(item => item.name === name);\n              let p = (item.value / total * 100).toFixed(2);\n              return `${name}  |  ${p}%`;\n            }\n          },\n          series: [{\n            name: '题目类型占比',\n            type: 'pie',\n            radius: '60%',\n            center: ['45%', '55%'],\n            selectedMode: 'single',\n            data: data,\n            label: {\n              show: true,\n              formatter: '{b}: {c} ({d}%)'\n            },\n            itemStyle: {\n              emphasis: {\n                shadowBlur: 10,\n                shadowOffsetX: 0,\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\n              }\n            }\n          }]\n        };\n        this.chart.setOption(option);\n        this.chart2 = echarts.init(document.getElementById('myChart2'));\n\n        // 计算每种难度的数量\n        const difficultyCounts = this.paperQuestions.reduce((acc, item) => {\n          acc[item.difficultLevel] = (acc[item.difficultLevel] || 0) + 1;\n          return acc;\n        }, {});\n\n        // 将计算结果转换为 ECharts 数据格式\n        const data2 = Object.keys(difficultyCounts).map(difficultLevel => {\n          return {\n            value: difficultyCounts[difficultLevel],\n            name: difficultLevel\n          };\n        });\n        const option2 = {\n          title: {\n            text: '题目难度占比图:',\n            left: 'left'\n          },\n          tooltip: {\n            trigger: 'item',\n            formatter: '{a} <br/>{b} : {c} ({d}%)'\n          },\n          legend: {\n            type: 'scroll',\n            orient: 'vertical',\n            right: 0,\n            top: 'center',\n            icon: 'circle',\n            selectedMode: 'multiple',\n            formatter: name => {\n              let total = data2.reduce((sum, item) => sum + item.value, 0);\n              let item = data2.find(item => item.name === name);\n              let p = (item.value / total * 100).toFixed(2);\n              return `${name}  |  ${p}%`;\n            }\n          },\n          series: [{\n            name: '题目难度占比',\n            type: 'pie',\n            radius: '60%',\n            center: ['45%', '55%'],\n            selectedMode: 'single',\n            data: data2,\n            label: {\n              show: true,\n              formatter: '{b}: {c} ({d}%)'\n            },\n            itemStyle: {\n              emphasis: {\n                shadowBlur: 10,\n                shadowOffsetX: 0,\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\n              }\n            }\n          }]\n        };\n        this.chart2.setOption(option2);\n        window.addEventListener('resize', () => {\n          this.chart.resize();\n          this.chart2.resize();\n        });\n      });\n    },\n    handlePageChange(page) {\n      console.log('Page changed to:', page); // 日志记录当前页码\n      this.currentPage = page;\n      this.fetchPapers(page); // 触发 Vuex action 以获取新页数据\n    }\n  },\n  mounted() {\n    this.fetchPapers(this.currentPage);\n    this.fetchPapersPages();\n  }\n};","map":{"version":3,"names":["mapActions","mapState","ElMessage","echarts","name","data","dialogFormVisible","dialogTableVisible","chart","dialogChartVisible","dialogTable2Visible","paper_id","formLabelWidth","form","title","introduction","createdBy","createTime","updateTime","searchKeyword","filterQuestionType","filterDifficulty","currentPage","pageSize","computed","totalPages","papersPages","console","log","questionsPages","tableData","papers","map","paper","id","paperData","paperQuestions","question","description","questionType","type","tag","difficulty","difficultLevel","analysis","selectedData","methods","automaticPaper","ab","setTimeout","savePaper","currentDateTime","Date","toISOString","slice","replace","push","length","content","item","join","newPaper","user","username","result","addPaper","fetchPapers","success","error","fetchPapersPages","composePaper","index","row","questionId","addQuestionToPaper","handleCartDelete","removeFromPaper","message","customClass","duration","showClose","querySelected","queryPaper","paperId","fetchPaperQuestion","handlePaperDelete","deletePaper","initChart","handleDelete","paperID","updatePaperQuestions","prevPage","nextPage","ms","warning","$nextTick","init","document","getElementById","typeCounts","reduce","acc","Object","keys","value","option","text","left","tooltip","trigger","formatter","legend","orient","right","top","icon","selectedMode","total","sum","find","p","toFixed","series","radius","center","label","show","itemStyle","emphasis","shadowBlur","shadowOffsetX","shadowColor","setOption","chart2","difficultyCounts","data2","option2","window","addEventListener","resize","handlePageChange","page","mounted"],"sources":["C:\\Users\\86139\\Desktop\\SEProject-front\\src\\components\\PaperManagement.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"form-row\">\n      <div class=\"form-group\">\n        <label>试卷管理</label>\n      </div>\n      <div class=\"form-group\">\n        <el-button :disabled=\"(user.role !== 'ADMIN')\" @click=\"warning('暂未开放')\" style=\"width: 80px; margin-left: 800px;\">自动组卷</el-button>\n      </div>\n      <div class=\"form-group\">\n        <el-button type=\"success\" :disabled=\"(user.role !== 'ADMIN')\" plain @click=\"dialogTable2Visible = true; querySelected()\" style=\"width: 80px;\">已选试题</el-button>\n      </div>\n      <div class=\"form-group\">\n        <el-button type=\"primary\" :disabled=\"(user.role !== 'ADMIN')\" @click=\"dialogFormVisible = true\" style=\"width: 80px;\">创建试卷</el-button>\n      </div>\n    </div>\n\n    <!-- 表格数据绑定和默认宽度 -->\n    <el-table :data=\"tableData\" style=\"width: 100%; margin-left: 3%;\">\n      <!-- 每一个列，prop为主键，label为文案 -->\n      <!-- 索引 -->\n      <el-table-column type=\"index\" width=\"50\"></el-table-column>\n      <el-table-column prop=\"title\" label=\"试卷名称\" width=\"200\" header-align=\"left\"></el-table-column>\n      <el-table-column prop=\"introduction\" label=\"试卷介绍\" width=\"200\" header-align=\"left\"></el-table-column>\n      <el-table-column prop=\"createTime\" label=\"创建时间\" width=\"200\" header-align=\"left\"></el-table-column>\n      <el-table-column prop=\"updateTime\" label=\"修改时间\" width=\"200\" header-align=\"left\"></el-table-column>\n      <el-table-column prop=\"createdBy\" label=\"创建人\" width=\"120\"></el-table-column>\n      <el-table-column label=\"操作\" width=\"220\" header-align=\"center\" :header-cell-style=\"{ paddingLeft: '0px' }\">\n        <template #default=\"scope\">\n          <div style=\"display: flex; justify-content: space-between;\">\n            <el-button size=\"small\" type=\"primary\"  @click=\"dialogTableVisible = true; queryPaper(scope.$index, scope.row)\">编辑</el-button>\n            <el-button size=\"small\" type=\"danger\" :disabled=\"(user.username !== scope.row.createdBy)&&(user.role!=='ADMIN')\" @click=\"handlePaperDelete(scope.$index, scope.row)\">删除</el-button>\n            <el-button size=\"small\" type=\"info\" @click=\"ab(); analysis(scope.$index, scope.row); \">试卷分析</el-button>\n          </div>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <!-- <div class=\"questions-list\">\n      <div class=\"pagination\">\n        <button @click=\"prevPage\" :disabled=\"currentPage === 1\" style=\"padding: 5px 10px;\">上一页</button>\n        <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\" style=\"padding: 5px 10px;\">下一页</button>\n      </div>\n    </div> -->\n\n\n    <el-dialog v-model=\"dialogTableVisible\" title=\"编辑试卷\" width=\"950\">\n      <el-table :data=\"paperData\">\n        <el-table-column prop=\"question\" label=\"问题\" width=\"300\"></el-table-column>\n        <el-table-column prop=\"questionType\" label=\"题型\" width=\"180\"></el-table-column>\n        <el-table-column prop=\"tag\" label=\"标签\" width=\"180\"></el-table-column>\n        <el-table-column prop=\"difficulty\" label=\"难度\" width=\"120\"></el-table-column>\n        <el-table-column label=\"操作\" width=\"120\" header-align=\"center\">\n        <template #default=\"{ row }\">\n          <el-button type=\"primary\" :disabled=\"(user.role !== 'ADMIN')\" link @click=\"handleDelete(row)\" style=\"text-align: left;padding-left: 0px;\">移出试卷</el-button>\n        </template>\n      </el-table-column>\n      </el-table>\n    </el-dialog>\n\n    <el-dialog v-model=\"dialogTable2Visible\" title=\"试题篮\" width=\"950px\">\n      <el-table :data=\"selectedData\" >\n        <el-table-column prop=\"question\" label=\"问题\" width=\"300\"></el-table-column>\n        <el-table-column prop=\"questionType\" label=\"题型\" width=\"180\"></el-table-column>\n        <el-table-column prop=\"tag\" label=\"标签\" width=\"180\"></el-table-column>\n        <el-table-column prop=\"difficulty\" label=\"难度\" width=\"120\"></el-table-column>\n        <el-table-column label=\"操作\" width=\"120\" header-align=\"center\">\n        <template #default=\"{ row }\">\n          <el-button type=\"primary\" link @click=\"handleCartDelete(row)\" style=\"text-align: left;padding-left: 0px;\">移出试卷</el-button>\n        </template>\n        </el-table-column>\n      </el-table>\n    </el-dialog>\n\n    <!-- 创建试卷的对话框 -->\n    <el-dialog v-model=\"dialogFormVisible\" title=\"创建试卷\">\n      <el-form :model=\"form\"  >\n        \n        <el-form-item  :label-width=\"formLabelWidth\">\n                <template #label>\n        <span style=\"color: red; margin-right:2px\">* </span> 试卷名称\n      </template>\n          <el-input v-model=\"form.title\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"试卷介绍\" :label-width=\"formLabelWidth\">\n          <el-input v-model=\"form.introduction\" autocomplete=\"off\" />\n        </el-form-item>\n      </el-form>\n      <template #footer>\n        <div class=\"dialog-footer\">\n          <el-button type=\"primary\" @click=\"savePaper\">确认</el-button>\n          <el-button @click=\"dialogFormVisible = false\">取消</el-button>\n        </div>\n      </template>\n    </el-dialog>\n\n    <el-dialog v-model=\"dialogChartVisible\" title=\"试卷分析\" width=\"700px\" style=\"margin-left:33%; margin-top:3% \">\n      <!-- <div style=\"display: flex; justify-content: space-between;\"> -->\n        <div id=\"myChart\" style=\"width: 650px; height: 300px;\"></div>\n        <div id=\"myChart2\" style=\"width: 650px; height: 300px;\"></div>\n      <!-- </div> -->\n    </el-dialog>\n\n    <div class=\"pagination\">\n        <el-pagination\n      :page-size=\"10\"\n      :pager-count=\"11\"\n      layout=\"prev, pager, next\"\n      :total=\"totalPages\"\n      @current-change=\"handlePageChange\"\n    />\n    </div>\n  </div>\n</template>\n<script>\nimport { mapActions, mapState } from 'vuex';\nimport { ElMessage } from 'element-plus';\nimport * as echarts from 'echarts';\n\nexport default {\n  name: 'PaperManagement',\n  data() {\n    return {\n      dialogFormVisible: false,\n      dialogTableVisible: false,\n      chart: null,\n      dialogChartVisible: false,\n      dialogTable2Visible: false,\n      paper_id: 0,\n      formLabelWidth: '140px',\n      form: {\n        title: '',\n        introduction: '',\n        createdBy: '',\n        createTime: '',\n        updateTime: '',\n      },\n      searchKeyword: '',\n      filterQuestionType: '',\n      filterDifficulty: '',\n      currentPage: 1,\n      pageSize: 5,\n    //   tableData: [\n    //     { \n    //       title: '这是一个假问题?',\n    //       introduction: '选择题',\n    //       createTime: '2024-06-03',\n    //       updateTime: '2024-06-03',\n    //       createdBy: \"小张\",\n    //       id: 5\n    //     }\n    //   ],\n    //   paperData: [\n    //     { \n    //       question: '这是一个假问题?',\n    //       questionType: '选择题',\n    //       tag: '物理',\n    //       difficulty: '中等',\n    //       analysis: '这是一个问题的解析',\n    //       createdBy: \"小张\",\n    //       id: 5\n    //     }\n    //   ]\n    };\n  },\n  computed: {\n      ...mapState(['papers', 'paper', 'paperQuestions', 'user', 'papersPages']),\n      totalPages() {\n      return this.papersPages ;\n      console.log(\"this\", this.questionsPages);\n      return 1000;\n    },\n    tableData() {\n      return this.papers.map(paper => ({\n        title: paper.title,\n        introduction: paper.introduction,\n        createTime: paper.createTime,\n        updateTime: paper.updateTime,\n        createdBy: paper.createdBy,\n        id: paper.id,\n      }));\n      },\n        paperData() {\n      return this.paperQuestions.map(question => ({\n        question: question.description,\n        questionType: question.type,\n        tag: question.tag,\n        difficulty: question.difficultLevel,\n        analysis: question.analysis,\n        id: question.id,\n        createdBy: question.createdBy,\n      }));\n    },\n    selectedData() {\n      return this.paper.map(question => ({\n        question: question.question,\n        questionType: question.questionType,\n        tag: question.tag,\n        difficulty: question.difficulty,\n        id: question.id,\n        analysis: question.analysis,\n        createdBy: question.createdBy,\n      }));\n    },\n  },\n  methods: {\n    ...mapActions(['fetchPapers', 'addPaper', 'addQuestionToPaper', 'removeFromPaper', 'fetchPaperQuestion', 'updatePaperQuestions', 'deletePaper', 'fetchPapersPages']),\n\n\n    automaticPaper() {\n      // 自动组卷的逻辑\n    },\n    // addPaper() {\n    //   this.dialogFormVisible = true;\n      // },\n      async ab() {\n          setTimeout(() => {\n        \n        this.dialogChartVisible = true;\n      }, 700);\n        \n    },\n    async savePaper() {\n      const currentDateTime = new Date().toISOString().slice(0, 19).replace('T', ' ');\n      this.form.createTime = currentDateTime;\n      this.form.updateTime = currentDateTime;\n\n      this.tableData.push({ ...this.form, id: this.tableData.length + 1 });\n\n      // 遍历 this.paper 并提取每个 question 的 id\n      const content = this.paper.map(item => item.id).join(' ');\n\n      const newPaper = {\n        title: this.form.title,\n        introduction: this.form.introduction,\n        createdBy: this.user.username,\n        createTime: this.form.createTime,\n        updateTime: this.form.updateTime,\n        // 改！\n        content: content,\n        id: \"\"\n      };\n      const result = await this.addPaper(newPaper);\n      this.dialogFormVisible = false;\n      this.form = {\n        title: '',\n        introduction: '',\n        createdBy: '',\n        createTime: '',\n        updateTime: ''\n      };\n      await this.fetchPapers(this.currentPage);\n      if (!result.success){\n          this.success('创建成功');\n      } else {\n        this.error(result.error);\n      }\n      this.fetchPapersPages();\n    },\n    composePaper(index, row) {\n      const questionId = row.id; // 获取 question id\n      this.addQuestionToPaper(questionId);\n      console.log('组卷操作:', questionId);\n    },\n    handleCartDelete( row) {\n      const questionId = row.id; // 获取 question id\n      console.log(row.id);\n      this.removeFromPaper(questionId);\n      // this.paper = this.paper.filter(item => item.id !== row.id);\n      console.log(this.paper);\n        ElMessage({\n        message: '移除成功',\n        type: 'success',\n        customClass: 'custom-message-class',\n        duration: 3000,\n        showClose: true\n      });\n    },\n    querySelected() {\n      if (this.paper.length === 0) {\n        this.selectedData = [];\n      } else {\n        this.selectedData = this.paper.map(question => ({\n          question: question.question,\n          questionType: question.questionType,\n          tag: question.tag,\n          difficulty: question.difficulty,\n          analysis: question.analysis,\n          createdBy: question.createdBy,\n          id: question.id\n        }));\n      }\n    },\n    \n    queryPaper(index, row) {\n      console.log('query');\n      const paperId = row.id; // 获取 question id\n      this.paper_id = row.id;\n      console.log('query');\n      this.fetchPaperQuestion(paperId);\n      console.log('查看试卷:', paperId);\n    },\n    async handlePaperDelete(index, row){\n      const paperId = row.id; // 获取 question id\n      const result = await this.deletePaper(paperId);\n      if (result.success!=='error'){\n          this.success('删除成功');\n      } else {\n        this.error(result.error);\n      }\n      await this.fetchPapersPages();\n      this.fetchPapers(this.currentPage);\n    },\n    analysis(index, row){\n      this.queryPaper(index, row);\n      this.initChart();\n    },\n    async handleDelete(row) {\n      console.log(this.paper_id)\n      const paperID = this.paper_id\n\n      console.log(row);\n      const result = await this.updatePaperQuestions({'paperid':paperID, 'questionid':row.id});\n      this.fetchPapers(this.currentPage);\n      if (result.success!=='error'){\n          this.success('删除成功');\n      } else {\n        this.error(result.error);\n      }\n    },\n    // handleDelete(index, row) {\n    //   this.tableData.splice(index, 1);\n    // },\n    // handleEdit(index, row) {\n    //   // 编辑试卷的逻辑\n    // },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage -= 1;\n      }\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage += 1;\n      }\n    },\n    \n\n    success(ms){\n      ElMessage({\n        message: ms,\n        type: 'success',\n        customClass: 'custom-message-class',\n        duration: 3000,\n        showClose: true\n      });\n    },\n    warning(ms){\n      ElMessage({\n        message: ms,\n        type: 'warning',\n        customClass: 'custom-message-class',\n        duration: 3000,\n        showClose: true\n      });\n    },\n    error(ms){\n      ElMessage({\n        message: ms,\n        type: 'error',\n        customClass: 'custom-message-class',\n        duration: 3000,\n        showClose: true\n      });\n    },\n\n    initChart() {\n      this.$nextTick(() => {\n        console.log(this.paperQuestions);\n      this.chart = echarts.init(document.getElementById('myChart'));\n\n      // 计算每种类型的数量\n      const typeCounts = this.paperQuestions.reduce((acc, item) => {\n        acc[item.type] = (acc[item.type] || 0) + 1;\n        return acc;\n      }, {});\n\n      // 将计算结果转换为 ECharts 数据格式\n      const data = Object.keys(typeCounts).map(type => {\n        return { value: typeCounts[type], name: type };\n      });\n\n      const option = {\n        title: {\n          text: '题目类型占比图:',\n          left: 'left'\n        },\n        tooltip: {\n          trigger: 'item',\n          formatter: '{a} <br/>{b} : {c} ({d}%)'\n        },\n        legend: {\n          type: 'scroll',\n          orient: 'vertical',\n          right: 0,\n          top: 'center',\n          icon: 'circle',\n          selectedMode: 'multiple',\n          formatter: (name) => {\n            let total = data.reduce((sum, item) => sum + item.value, 0);\n            let item = data.find(item => item.name === name);\n            let p = (item.value / total * 100).toFixed(2);\n            return `${name}  |  ${p}%`;\n          }\n        },\n        series: [\n          {\n            name: '题目类型占比',\n            type: 'pie',\n            radius: '60%',\n            center: ['45%', '55%'],\n            selectedMode: 'single',\n            data: data,\n            label: {\n              show: true,\n              formatter: '{b}: {c} ({d}%)'\n            },\n            itemStyle: {\n              emphasis: {\n                shadowBlur: 10,\n                shadowOffsetX: 0,\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\n              }\n            }\n          }\n        ]\n      };\n\n      this.chart.setOption(option);\n\n    this.chart2 = echarts.init(document.getElementById('myChart2'));\n\n    // 计算每种难度的数量\n    const difficultyCounts = this.paperQuestions.reduce((acc, item) => {\n      acc[item.difficultLevel] = (acc[item.difficultLevel] || 0) + 1;\n      return acc;\n    }, {});\n\n    // 将计算结果转换为 ECharts 数据格式\n    const data2 = Object.keys(difficultyCounts).map(difficultLevel => {\n      return { value: difficultyCounts[difficultLevel], name: difficultLevel };\n    });\n\n    const option2 = {\n      title: {\n        text: '题目难度占比图:',\n        left: 'left'\n      },\n      tooltip: {\n        trigger: 'item',\n        formatter: '{a} <br/>{b} : {c} ({d}%)'\n      },\n      legend: {\n        type: 'scroll',\n        orient: 'vertical',\n        right: 0,\n        top: 'center',\n        icon: 'circle',\n        selectedMode: 'multiple',\n        formatter: (name) => {\n          let total = data2.reduce((sum, item) => sum + item.value, 0);\n          let item = data2.find(item => item.name === name);\n          let p = (item.value / total * 100).toFixed(2);\n          return `${name}  |  ${p}%`;\n        }\n      },\n      series: [\n        {\n          name: '题目难度占比',\n          type: 'pie',\n          radius: '60%',\n          center: ['45%', '55%'],\n          selectedMode: 'single',\n          data: data2,\n          label: {\n            show: true,\n            formatter: '{b}: {c} ({d}%)'\n          },\n          itemStyle: {\n            emphasis: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\n            }\n          }\n        }\n      ]\n    };\n\n    this.chart2.setOption(option2);\n\n    window.addEventListener('resize', () => {\n      this.chart.resize();\n      this.chart2.resize();\n    });\n      });\n    },\n  handlePageChange(page) {\n      console.log('Page changed to:', page); // 日志记录当前页码\n      this.currentPage = page;\n      this.fetchPapers(page); // 触发 Vuex action 以获取新页数据\n  },\n  },\n  mounted() {\n    this.fetchPapers(this.currentPage);\n    this.fetchPapersPages();\n  }\n};\n</script>\n\n\n\n<style scoped>\n.container {\n  flex: 1;\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  overflow: auto;\n  display: flex;\n  flex-direction: column;\n}\n.form-row {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 15px;\n  margin-left: 1px;\n}\n.required {\n  color: red;\n}\n.form-group {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  margin: 0 15px;\n}\n.el-button{\n  /* 增加按钮间距 */\n  margin-left: 12px;\n}\nform {\n  background: white;\n  padding: 2rem;\n  border-radius: 5px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\nform div {\n  margin-bottom: 1rem;\n}\n\n/* button {\n  width: 100%;\n  padding: 0.5rem;\n  background: #1890ff;\n  border: none;\n  color: white;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background: #40a9ff;\n} */\n\n.alert {\n  margin-top: 1rem;\n  padding: 1rem;\n  background: #f8d7da;\n  color: #721c24;\n  border: 1px solid #f5c6cb;\n  border-radius: 5px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.pagination {\n  position: absolute;\n  bottom: 40px; /* 距离底部的距离 */\n  left: 58%; /* 水平居中 */\n  transform: translateX(-50%); /* 水平居中 */\n  display: flex;\n    justify-content: center;\n  align-items: center;\n  /* justify-content: space-between; */\n  width: 200px; /* 指定pagination的宽度 */\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}